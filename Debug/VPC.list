
VPC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b7c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000086b0  08009d1c  08009d1c  00019d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080123cc  080123cc  00030084  2**0
                  CONTENTS
  4 .ARM          00000008  080123cc  080123cc  000223cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080123d4  080123d4  00030084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080123d4  080123d4  000223d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080123d8  080123d8  000223d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080123dc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000508  20000084  08012460  00030084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000058c  08012460  0003058c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b83b  00000000  00000000  000300b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003223  00000000  00000000  0004b8ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d38  00000000  00000000  0004eb18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c20  00000000  00000000  0004f850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a135  00000000  00000000  00050470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011a5f  00000000  00000000  0006a5a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095f3f  00000000  00000000  0007c004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00111f43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d20  00000000  00000000  00111f98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009d04 	.word	0x08009d04

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	08009d04 	.word	0x08009d04

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <DpAppl_TestApplEvent>:

  \retval VPC3_TRUE Event was set
  \retval VPC3_FALSE Event was not set.
*/
static uint8_t DpAppl_TestApplEvent( eDpApplEv_Flags eDpApplEv )
{
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	80fb      	strh	r3, [r7, #6]
   if( sDpAppl.eDpApplEvent & eDpApplEv )
 8000582:	4b0e      	ldr	r3, [pc, #56]	; (80005bc <DpAppl_TestApplEvent+0x44>)
 8000584:	881a      	ldrh	r2, [r3, #0]
 8000586:	88fb      	ldrh	r3, [r7, #6]
 8000588:	4013      	ands	r3, r2
 800058a:	b29b      	uxth	r3, r3
 800058c:	2b00      	cmp	r3, #0
 800058e:	d00d      	beq.n	80005ac <DpAppl_TestApplEvent+0x34>
   {
      sDpAppl.eDpApplEvent &= ~eDpApplEv;
 8000590:	4b0a      	ldr	r3, [pc, #40]	; (80005bc <DpAppl_TestApplEvent+0x44>)
 8000592:	881b      	ldrh	r3, [r3, #0]
 8000594:	b21a      	sxth	r2, r3
 8000596:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800059a:	43db      	mvns	r3, r3
 800059c:	b21b      	sxth	r3, r3
 800059e:	4013      	ands	r3, r2
 80005a0:	b21b      	sxth	r3, r3
 80005a2:	b29a      	uxth	r2, r3
 80005a4:	4b05      	ldr	r3, [pc, #20]	; (80005bc <DpAppl_TestApplEvent+0x44>)
 80005a6:	801a      	strh	r2, [r3, #0]
      return VPC3_TRUE;
 80005a8:	2301      	movs	r3, #1
 80005aa:	e000      	b.n	80005ae <DpAppl_TestApplEvent+0x36>
   }//if( sDpAppl.eDpApplEvent & eDpApplEv )

   return VPC3_FALSE;
 80005ac:	2300      	movs	r3, #0
}//static uint8_t DpAppl_TestApplEvent( eDpApplEv_Flags eDpApplEv )
 80005ae:	4618      	mov	r0, r3
 80005b0:	370c      	adds	r7, #12
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	200001b8 	.word	0x200001b8

080005c0 <DpAppl_SetApplEvent>:
  \brief Set PROFIBUS event.

  \param[in] eDpApplEv PROFIBUS event @see eDpApplEv_Flags
*/
static void DpAppl_SetApplEvent( eDpApplEv_Flags eDpApplEv )
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	80fb      	strh	r3, [r7, #6]
   sDpAppl.eDpApplEvent |= eDpApplEv;
 80005ca:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <DpAppl_SetApplEvent+0x24>)
 80005cc:	881a      	ldrh	r2, [r3, #0]
 80005ce:	88fb      	ldrh	r3, [r7, #6]
 80005d0:	4313      	orrs	r3, r2
 80005d2:	b29a      	uxth	r2, r3
 80005d4:	4b03      	ldr	r3, [pc, #12]	; (80005e4 <DpAppl_SetApplEvent+0x24>)
 80005d6:	801a      	strh	r2, [r3, #0]
}//static void DpAppl_SetApplEvent( eDpApplEv_Flags eDpApplEv )
 80005d8:	bf00      	nop
 80005da:	370c      	adds	r7, #12
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr
 80005e4:	200001b8 	.word	0x200001b8

080005e8 <DpAppl_CheckEvIoOut>:
  The VPC3+ has received a DataExchange message and has made the new output data
  available in the N-buffer. In the case of Power_On or Leave_Master, the
  VPC3+ clears the content of the buffer, and generates this event also.
*/
static void DpAppl_CheckEvIoOut( void )
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
VPC3_UNSIGNED8_PTR  pToOutputBuffer;   /**< Pointer to output buffer. */
uint8_t             bOutputState;      /**< State of output data. */

   if( DpAppl_TestApplEvent( eDpApplEv_IoOut ) )
 80005ee:	2020      	movs	r0, #32
 80005f0:	f7ff ffc2 	bl	8000578 <DpAppl_TestApplEvent>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d023      	beq.n	8000642 <DpAppl_CheckEvIoOut+0x5a>
   {
      printf("DEBUG: [DpAppl_CheckEvIoOut] Evento IoOut detectado y procesado por el bucle principal (sincrono).\n");
 80005fa:	4814      	ldr	r0, [pc, #80]	; (800064c <DpAppl_CheckEvIoOut+0x64>)
 80005fc:	f008 fbf4 	bl	8008de8 <puts>
      pToOutputBuffer = VPC3_GetDoutBufPtr( &bOutputState );
 8000600:	1c7b      	adds	r3, r7, #1
 8000602:	4618      	mov	r0, r3
 8000604:	f003 f8de 	bl	80037c4 <VPC3_GetDoutBufPtr>
 8000608:	6078      	str	r0, [r7, #4]
      if( pToOutputBuffer )
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d018      	beq.n	8000642 <DpAppl_CheckEvIoOut+0x5a>
      {
         // Copy output data from PROFIBUS buffer
         CopyFromVpc3( &sSystem.sOutput.abDo8[0], pToOutputBuffer, pDpSystem->bOutputDataLength );
 8000610:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <DpAppl_CheckEvIoOut+0x68>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8000618:	b29b      	uxth	r3, r3
 800061a:	461a      	mov	r2, r3
 800061c:	6879      	ldr	r1, [r7, #4]
 800061e:	480d      	ldr	r0, [pc, #52]	; (8000654 <DpAppl_CheckEvIoOut+0x6c>)
 8000620:	f005 fe5c 	bl	80062dc <CopyFromVpc3>

         /*/ Handle Set Point (0-100) and Relay Control
         uint8_t setpoint = sSystem.sOutput.abDo8[0] & 0x7F;  // Bits 0-6 for setpoint (0-100)
         uint8_t relay_control = (sSystem.sOutput.abDo8[0] >> 7) & 0x01;  // Bit 7 for relay control
*/
         uint16_t setpoint = pToOutputBuffer[0] | (pToOutputBuffer[1] << 8);
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	b21a      	sxth	r2, r3
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	3301      	adds	r3, #1
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	021b      	lsls	r3, r3, #8
 8000632:	b21b      	sxth	r3, r3
 8000634:	4313      	orrs	r3, r2
 8000636:	b21b      	sxth	r3, r3
 8000638:	807b      	strh	r3, [r7, #2]
         // uint8_t  relay    = (setpoint >> 15) & 1;   // si quieres un bit de control - UNUSED
         setpoint &= 0x7FFF;                         // rango 0-32767 ó 0-100 como prefieras
 800063a:	887b      	ldrh	r3, [r7, #2]
 800063c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000640:	807b      	strh	r3, [r7, #2]
         // TODO: Implement your setpoint and relay control logic here
         // Example: Update motor speed based on setpoint
         // Example: Control relay based on relay_control bit
      }
   }
}//static void DpAppl_CheckEvIoOut( void )
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	08009d1c 	.word	0x08009d1c
 8000650:	20000000 	.word	0x20000000
 8000654:	200001a1 	.word	0x200001a1

08000658 <DpAppl_ReadInputData>:
/*--------------------------------------------------------------------------*/
/*!
  \brief Handling of the PROFIBUS input data ( slave --> master ).
*/
static void DpAppl_ReadInputData( void )
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
   // Read fault codes and status (Input Module 1)
   uint8_t fault_codes = 0;
 800065e:	2300      	movs	r3, #0
 8000660:	73fb      	strb	r3, [r7, #15]
   // TODO: Read actual fault codes from hardware
   // Bit 0: Overload
   // Bit 1: Over Temp
   // Bit 2: Power Loss
   // Bit 3: Relay 1 Status
   sSystem.sInput.abDi8[0] = fault_codes;
 8000662:	4a17      	ldr	r2, [pc, #92]	; (80006c0 <DpAppl_ReadInputData+0x68>)
 8000664:	7bfb      	ldrb	r3, [r7, #15]
 8000666:	7053      	strb	r3, [r2, #1]

   // Read analog values (Input Module 2)
   uint8_t analog_values = 0;
 8000668:	2300      	movs	r3, #0
 800066a:	73bb      	strb	r3, [r7, #14]
   // TODO: Read actual analog values from hardware
   // Bits 0-1: Input Mode (0-10V, 2-10V)
   // Bits 2-7: Reserved for future use
   sSystem.sInput.abDi8[1] = analog_values;
 800066c:	4a14      	ldr	r2, [pc, #80]	; (80006c0 <DpAppl_ReadInputData+0x68>)
 800066e:	7bbb      	ldrb	r3, [r7, #14]
 8000670:	7093      	strb	r3, [r2, #2]

   // Update input data in PROFIBUS buffer
   VPC3_UNSIGNED8_PTR pToInputBuffer = VPC3_GetDinBufPtr();
 8000672:	f003 f8e9 	bl	8003848 <VPC3_GetDinBufPtr>
 8000676:	60b8      	str	r0, [r7, #8]
   if( pToInputBuffer )
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d01b      	beq.n	80006b6 <DpAppl_ReadInputData+0x5e>
   {
      // Read feedback value (16-bit)
      uint16_t fb = leer_feedback();        /* tu función ADC, encoder, etc. */
 800067e:	f000 fe03 	bl	8001288 <leer_feedback>
 8000682:	4603      	mov	r3, r0
 8000684:	80fb      	strh	r3, [r7, #6]
      pToInputBuffer[0] = fb & 0xFF;        /* LSB */
 8000686:	88fb      	ldrh	r3, [r7, #6]
 8000688:	b2da      	uxtb	r2, r3
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	701a      	strb	r2, [r3, #0]
      pToInputBuffer[1] = fb >> 8;          /* MSB */
 800068e:	88fb      	ldrh	r3, [r7, #6]
 8000690:	0a1b      	lsrs	r3, r3, #8
 8000692:	b29a      	uxth	r2, r3
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	3301      	adds	r3, #1
 8000698:	b2d2      	uxtb	r2, r2
 800069a:	701a      	strb	r2, [r3, #0]

      // Copy remaining input data
      CopyToVpc3( pToInputBuffer + 2, &sSystem.sInput.abDi8[0], pDpSystem->bInputDataLength - 2 );
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	1c98      	adds	r0, r3, #2
 80006a0:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <DpAppl_ReadInputData+0x6c>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	3b02      	subs	r3, #2
 80006ac:	b29b      	uxth	r3, r3
 80006ae:	461a      	mov	r2, r3
 80006b0:	4905      	ldr	r1, [pc, #20]	; (80006c8 <DpAppl_ReadInputData+0x70>)
 80006b2:	f005 fdbd 	bl	8006230 <CopyToVpc3>
   }
}//static void DpAppl_ReadInputData( void )
 80006b6:	bf00      	nop
 80006b8:	3710      	adds	r7, #16
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000198 	.word	0x20000198
 80006c4:	20000000 	.word	0x20000000
 80006c8:	20000199 	.word	0x20000199

080006cc <DpAppl_ApplicationReady>:
  positive by the user. The slave is now in DataExchange but the static diagnostic bit is set.
  The user can do here own additional initialization and should read here the input data. The
  slave delete now the static diagnostic bit and the master will send DataExchange telegrams.
*/
static void DpAppl_ApplicationReady( void )
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
   printf("DEBUG: [ApplicationReady] INICIO - Configurando aplicación después de Chk_Cfg exitoso\n");
 80006d0:	4822      	ldr	r0, [pc, #136]	; (800075c <DpAppl_ApplicationReady+0x90>)
 80006d2:	f008 fb89 	bl	8008de8 <puts>
   #endif//#if DPV1_IM_SUPP

   /** @todo Make here your own initialization. */

   //read input data
   DpAppl_ReadInputData();
 80006d6:	f7ff ffbf 	bl	8000658 <DpAppl_ReadInputData>

   //reset Diag.Stat
   printf("DEBUG: [ApplicationReady] Llamando DpDiag_ResetStatDiag()...\n");
 80006da:	4821      	ldr	r0, [pc, #132]	; (8000760 <DpAppl_ApplicationReady+0x94>)
 80006dc:	f008 fb84 	bl	8008de8 <puts>
   if( DpDiag_ResetStatDiag() )
 80006e0:	f001 fbf6 	bl	8001ed0 <DpDiag_ResetStatDiag>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d030      	beq.n	800074c <DpAppl_ApplicationReady+0x80>
   {
      printf("DEBUG: [ApplicationReady] DpDiag_ResetStatDiag() exitoso, configurando estados\n");
 80006ea:	481e      	ldr	r0, [pc, #120]	; (8000764 <DpAppl_ApplicationReady+0x98>)
 80006ec:	f008 fb7c 	bl	8008de8 <puts>
      VPC3_ClrDpState( eDpStateCfgOkStatDiag );
 80006f0:	4b1d      	ldr	r3, [pc, #116]	; (8000768 <DpAppl_ApplicationReady+0x9c>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	781a      	ldrb	r2, [r3, #0]
 80006f6:	4b1c      	ldr	r3, [pc, #112]	; (8000768 <DpAppl_ApplicationReady+0x9c>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f022 0208 	bic.w	r2, r2, #8
 80006fe:	b2d2      	uxtb	r2, r2
 8000700:	701a      	strb	r2, [r3, #0]
      VPC3_SetDpState( eDpStateApplReady );
 8000702:	4b19      	ldr	r3, [pc, #100]	; (8000768 <DpAppl_ApplicationReady+0x9c>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	781a      	ldrb	r2, [r3, #0]
 8000708:	4b17      	ldr	r3, [pc, #92]	; (8000768 <DpAppl_ApplicationReady+0x9c>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f042 0204 	orr.w	r2, r2, #4
 8000710:	b2d2      	uxtb	r2, r2
 8000712:	701a      	strb	r2, [r3, #0]
      VPC3_SetDpState( eDpStateRun );
 8000714:	4b14      	ldr	r3, [pc, #80]	; (8000768 <DpAppl_ApplicationReady+0x9c>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	781a      	ldrb	r2, [r3, #0]
 800071a:	4b13      	ldr	r3, [pc, #76]	; (8000768 <DpAppl_ApplicationReady+0x9c>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	f042 0202 	orr.w	r2, r2, #2
 8000722:	b2d2      	uxtb	r2, r2
 8000724:	701a      	strb	r2, [r3, #0]
      printf("DEBUG: [ApplicationReady] Estados configurados: eDpStateCfgOkStatDiag=%d, eDpStateApplReady=%d, eDpStateRun=%d\n",
             VPC3_GetDpState(eDpStateCfgOkStatDiag), VPC3_GetDpState(eDpStateApplReady), VPC3_GetDpState(eDpStateRun));
 8000726:	4b10      	ldr	r3, [pc, #64]	; (8000768 <DpAppl_ApplicationReady+0x9c>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	781b      	ldrb	r3, [r3, #0]
      printf("DEBUG: [ApplicationReady] Estados configurados: eDpStateCfgOkStatDiag=%d, eDpStateApplReady=%d, eDpStateRun=%d\n",
 800072c:	f003 0108 	and.w	r1, r3, #8
             VPC3_GetDpState(eDpStateCfgOkStatDiag), VPC3_GetDpState(eDpStateApplReady), VPC3_GetDpState(eDpStateRun));
 8000730:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <DpAppl_ApplicationReady+0x9c>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	781b      	ldrb	r3, [r3, #0]
      printf("DEBUG: [ApplicationReady] Estados configurados: eDpStateCfgOkStatDiag=%d, eDpStateApplReady=%d, eDpStateRun=%d\n",
 8000736:	f003 0204 	and.w	r2, r3, #4
             VPC3_GetDpState(eDpStateCfgOkStatDiag), VPC3_GetDpState(eDpStateApplReady), VPC3_GetDpState(eDpStateRun));
 800073a:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <DpAppl_ApplicationReady+0x9c>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	781b      	ldrb	r3, [r3, #0]
      printf("DEBUG: [ApplicationReady] Estados configurados: eDpStateCfgOkStatDiag=%d, eDpStateApplReady=%d, eDpStateRun=%d\n",
 8000740:	f003 0302 	and.w	r3, r3, #2
 8000744:	4809      	ldr	r0, [pc, #36]	; (800076c <DpAppl_ApplicationReady+0xa0>)
 8000746:	f008 fab3 	bl	8008cb0 <iprintf>
 800074a:	e002      	b.n	8000752 <DpAppl_ApplicationReady+0x86>
   } else {
      printf("DEBUG: [ApplicationReady] DpDiag_ResetStatDiag() FALLÓ\n");
 800074c:	4808      	ldr	r0, [pc, #32]	; (8000770 <DpAppl_ApplicationReady+0xa4>)
 800074e:	f008 fb4b 	bl	8008de8 <puts>
   }//if( DpDiag_ResetStatDiag() )
   
   printf("DEBUG: [ApplicationReady] FIN - Aplicación configurada\n");
 8000752:	4808      	ldr	r0, [pc, #32]	; (8000774 <DpAppl_ApplicationReady+0xa8>)
 8000754:	f008 fb48 	bl	8008de8 <puts>
}//static void DpAppl_ApplicationReady( void )
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	08009d80 	.word	0x08009d80
 8000760:	08009dd8 	.word	0x08009dd8
 8000764:	08009e18 	.word	0x08009e18
 8000768:	20000000 	.word	0x20000000
 800076c:	08009e68 	.word	0x08009e68
 8000770:	08009ed8 	.word	0x08009ed8
 8000774:	08009f10 	.word	0x08009f10

08000778 <DpAppl_ProfibusInit>:
/*---------------------------------------------------------------------------*/
/*!
  \brief Initializing of PROFIBUS slave communication.
*/
void DpAppl_ProfibusInit( void )
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
DP_ERROR_CODE       bError;

   /*-----------------------------------------------------------------------*/
   /* init application data                                                 */
   /*-----------------------------------------------------------------------*/
   memset( &sDpAppl, 0, sizeof( sDpAppl ) );
 800077e:	2210      	movs	r2, #16
 8000780:	2100      	movs	r1, #0
 8000782:	4832      	ldr	r0, [pc, #200]	; (800084c <DpAppl_ProfibusInit+0xd4>)
 8000784:	f008 fa8c 	bl	8008ca0 <memset>

   /*-----------------------------------------------------------------------*/
   /* init Module-System                                                    */
   /*-----------------------------------------------------------------------*/
   memset( &sSystem, 0, sizeof(STRUC_SYSTEM) );
 8000788:	221a      	movs	r2, #26
 800078a:	2100      	movs	r1, #0
 800078c:	4830      	ldr	r0, [pc, #192]	; (8000850 <DpAppl_ProfibusInit+0xd8>)
 800078e:	f008 fa87 	bl	8008ca0 <memset>
   sSystem.bNrOfModules = MaxModule;
 8000792:	4b2f      	ldr	r3, [pc, #188]	; (8000850 <DpAppl_ProfibusInit+0xd8>)
 8000794:	2202      	movs	r2, #2
 8000796:	701a      	strb	r2, [r3, #0]
      bOldDipSwitch5 = 0x00;
      bDiagStateModule5 = VPC3_FALSE;
      bDiagStateModule6 = VPC3_FALSE;
   #endif//#ifdef EvaBoard_AT89C5132

   wCounterValue               = 0x0000;
 8000798:	4b2e      	ldr	r3, [pc, #184]	; (8000854 <DpAppl_ProfibusInit+0xdc>)
 800079a:	2200      	movs	r2, #0
 800079c:	801a      	strh	r2, [r3, #0]
   bCounterTimeBase            = 0x00;
 800079e:	4b2e      	ldr	r3, [pc, #184]	; (8000858 <DpAppl_ProfibusInit+0xe0>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	701a      	strb	r2, [r3, #0]
   bCounterUpperLimit          = VPC3_FALSE;
 80007a4:	4b2d      	ldr	r3, [pc, #180]	; (800085c <DpAppl_ProfibusInit+0xe4>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	701a      	strb	r2, [r3, #0]
   bCounterLowerLimit          = VPC3_FALSE;
 80007aa:	4b2d      	ldr	r3, [pc, #180]	; (8000860 <DpAppl_ProfibusInit+0xe8>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	701a      	strb	r2, [r3, #0]

   /*-----------------------------------------------------------------------*/
   /* initialize VPC3                                                       */
   /*-----------------------------------------------------------------------*/
   #if VPC3_SERIAL_MODE
      Vpc3AsicAddress = (VPC3_ADR)(uintptr_t)VPC3_ASIC_ADDRESS;
 80007b0:	4b2c      	ldr	r3, [pc, #176]	; (8000864 <DpAppl_ProfibusInit+0xec>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	801a      	strh	r2, [r3, #0]
      pVpc3 = &sVpc3OnlyForInit;
 80007b6:	4b2c      	ldr	r3, [pc, #176]	; (8000868 <DpAppl_ProfibusInit+0xf0>)
 80007b8:	4a2c      	ldr	r2, [pc, #176]	; (800086c <DpAppl_ProfibusInit+0xf4>)
 80007ba:	601a      	str	r2, [r3, #0]
      pDpSystem = &sDpSystemChannel1;
 80007bc:	4b2c      	ldr	r3, [pc, #176]	; (8000870 <DpAppl_ProfibusInit+0xf8>)
 80007be:	4a2d      	ldr	r2, [pc, #180]	; (8000874 <DpAppl_ProfibusInit+0xfc>)
 80007c0:	601a      	str	r2, [r3, #0]

      memset( pVpc3, 0, sizeof( VPC3_STRUC ) );
 80007c2:	4b29      	ldr	r3, [pc, #164]	; (8000868 <DpAppl_ProfibusInit+0xf0>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	2250      	movs	r2, #80	; 0x50
 80007c8:	2100      	movs	r1, #0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f008 fa68 	bl	8008ca0 <memset>
   #endif//#if VPC3_SERIAL_MODE

   /*-----------------------------------------------------------------------*/
   /* initialize global system structure                                    */
   /*-----------------------------------------------------------------------*/
   memset( pDpSystem, 0, sizeof( VPC3_SYSTEM_STRUC ));
 80007d0:	4b27      	ldr	r3, [pc, #156]	; (8000870 <DpAppl_ProfibusInit+0xf8>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	2262      	movs	r2, #98	; 0x62
 80007d6:	2100      	movs	r1, #0
 80007d8:	4618      	mov	r0, r3
 80007da:	f008 fa61 	bl	8008ca0 <memset>
   pDpSystem->eDpState = eDpStateInit;
 80007de:	4b24      	ldr	r3, [pc, #144]	; (8000870 <DpAppl_ProfibusInit+0xf8>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	2201      	movs	r2, #1
 80007e4:	701a      	strb	r2, [r3, #0]

   DpPrm_Init();
 80007e6:	f001 fc87 	bl	80020f8 <DpPrm_Init>
   DpCfg_Init();
 80007ea:	f000 fd5f 	bl	80012ac <DpCfg_Init>
   DpDiag_Init();
 80007ee:	f000 feef 	bl	80015d0 <DpDiag_Init>

//   DpAppl_ClrResetVPC3Channel1();

   bError = VPC3_MemoryTest();
 80007f2:	f001 fd3f 	bl	8002274 <VPC3_MemoryTest>
 80007f6:	4603      	mov	r3, r0
 80007f8:	71fb      	strb	r3, [r7, #7]

   if( DP_OK == bError )
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d117      	bne.n	8000830 <DpAppl_ProfibusInit+0xb8>
   {
      #ifdef EvaBoard_AT89C5132
         bError = VPC3_Initialization( (*READ_PORT0 & 0x7F), IDENT_NR, (psCFG)&sDpAppl.sCfgData );     // address of slave; PORT0
      #else
         bError = VPC3_Initialization( DP_ADDR, IDENT_NR, (psCFG)&sDpAppl.sCfgData );                  // address of slave
 8000800:	4a1d      	ldr	r2, [pc, #116]	; (8000878 <DpAppl_ProfibusInit+0x100>)
 8000802:	f64a 51ac 	movw	r1, #44460	; 0xadac
 8000806:	2007      	movs	r0, #7
 8000808:	f001 fea2 	bl	8002550 <VPC3_Initialization>
 800080c:	4603      	mov	r3, r0
 800080e:	71fb      	strb	r3, [r7, #7]
      #endif//#ifdef EvaBoard_AT89C5132

      if( DP_OK == bError )
 8000810:	79fb      	ldrb	r3, [r7, #7]
 8000812:	2b01      	cmp	r3, #1
 8000814:	d102      	bne.n	800081c <DpAppl_ProfibusInit+0xa4>
      {
        // DpAppl_EnableInterruptVPC3Channel1();

         //todo: before startup the VPC3+, make here your own initialzations

         VPC3_Start();
 8000816:	f002 f85d 	bl	80028d4 <VPC3_Start>
   else
   {
      sVpc3Error.bErrorCode = bError;
      DpAppl_FatalError( _DP_USER, __LINE__, &sVpc3Error );
   }//else of if( DP_OK == bError )
}//void DpAppl_ProfibusInit( void )
 800081a:	e012      	b.n	8000842 <DpAppl_ProfibusInit+0xca>
         sVpc3Error.bErrorCode = bError;
 800081c:	4a17      	ldr	r2, [pc, #92]	; (800087c <DpAppl_ProfibusInit+0x104>)
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	7053      	strb	r3, [r2, #1]
         DpAppl_FatalError( _DP_USER, __LINE__, &sVpc3Error );
 8000822:	4a16      	ldr	r2, [pc, #88]	; (800087c <DpAppl_ProfibusInit+0x104>)
 8000824:	f240 1137 	movw	r1, #311	; 0x137
 8000828:	2010      	movs	r0, #16
 800082a:	f000 fbcd 	bl	8000fc8 <DpAppl_FatalError>
}//void DpAppl_ProfibusInit( void )
 800082e:	e008      	b.n	8000842 <DpAppl_ProfibusInit+0xca>
      sVpc3Error.bErrorCode = bError;
 8000830:	4a12      	ldr	r2, [pc, #72]	; (800087c <DpAppl_ProfibusInit+0x104>)
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	7053      	strb	r3, [r2, #1]
      DpAppl_FatalError( _DP_USER, __LINE__, &sVpc3Error );
 8000836:	4a11      	ldr	r2, [pc, #68]	; (800087c <DpAppl_ProfibusInit+0x104>)
 8000838:	f240 113d 	movw	r1, #317	; 0x13d
 800083c:	2010      	movs	r0, #16
 800083e:	f000 fbc3 	bl	8000fc8 <DpAppl_FatalError>
}//void DpAppl_ProfibusInit( void )
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	200001b8 	.word	0x200001b8
 8000850:	20000198 	.word	0x20000198
 8000854:	200000a0 	.word	0x200000a0
 8000858:	200000a2 	.word	0x200000a2
 800085c:	200000a3 	.word	0x200000a3
 8000860:	200000a4 	.word	0x200000a4
 8000864:	20000144 	.word	0x20000144
 8000868:	200001b4 	.word	0x200001b4
 800086c:	20000148 	.word	0x20000148
 8000870:	20000000 	.word	0x20000000
 8000874:	200000dc 	.word	0x200000dc
 8000878:	200001ba 	.word	0x200001ba
 800087c:	200001c8 	.word	0x200001c8

08000880 <DpAppl_ProfibusMain>:
/*!
  \brief The application program has to call this function cyclically so that the PROFIBUS DP slave services can be processed.
*/

void DpAppl_ProfibusMain( void )
{
 8000880:	b590      	push	{r4, r7, lr}
 8000882:	b087      	sub	sp, #28
 8000884:	af02      	add	r7, sp, #8

   /*-------------------------------------------------------------------*/
   /* trigger watchdogs                                                 */
   /*-------------------------------------------------------------------*/
   // toggle user watchdog
   VPC3_RESET_USER_WD();   // toggle user watchdog
 8000886:	4bac      	ldr	r3, [pc, #688]	; (8000b38 <DpAppl_ProfibusMain+0x2b8>)
 8000888:	881b      	ldrh	r3, [r3, #0]
 800088a:	3308      	adds	r3, #8
 800088c:	b29b      	uxth	r3, r3
 800088e:	2120      	movs	r1, #32
 8000890:	4618      	mov	r0, r3
 8000892:	f005 fa7d 	bl	8005d90 <Vpc3Write>

   #if VPC3_SERIAL_MODE
      /*----------------------------------------------------------------*/
      /* Poll PROFIBUS events                                           */
      /*----------------------------------------------------------------*/
      VPC3_Poll();
 8000896:	f003 fd49 	bl	800432c <VPC3_Poll>
   #endif//#if VPC3_SERIAL_MODE

   /*-------------------------------------------------------------------*/
   /* DP-V1 statemachines                                               */
   /*-------------------------------------------------------------------*/
   VPC3_ProcessDpv1StateMachine();
 800089a:	f003 fb17 	bl	8003ecc <VPC3_ProcessDpv1StateMachine>

   /*-------------------------------------------------------------------*/
   /* internal state machine                                            */
   /*-------------------------------------------------------------------*/
   if( VPC3_GetDpState( eDpStateInit ) )
 800089e:	4ba7      	ldr	r3, [pc, #668]	; (8000b3c <DpAppl_ProfibusMain+0x2bc>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	f003 0301 	and.w	r3, r3, #1
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d01b      	beq.n	80008e4 <DpAppl_ProfibusMain+0x64>
   {
      // clear data
      memset( &sSystem.sOutput.abDo8[0], 0, DOUT_BUFSIZE );
 80008ac:	2202      	movs	r2, #2
 80008ae:	2100      	movs	r1, #0
 80008b0:	48a3      	ldr	r0, [pc, #652]	; (8000b40 <DpAppl_ProfibusMain+0x2c0>)
 80008b2:	f008 f9f5 	bl	8008ca0 <memset>
      memset( &sSystem.sInput.abDi8[0],  0, DIN_BUFSIZE );
 80008b6:	2202      	movs	r2, #2
 80008b8:	2100      	movs	r1, #0
 80008ba:	48a2      	ldr	r0, [pc, #648]	; (8000b44 <DpAppl_ProfibusMain+0x2c4>)
 80008bc:	f008 f9f0 	bl	8008ca0 <memset>
      #ifdef EvaBoard_AT89C5132
         *WRITE_PORT1 = 0x00;
         *WRITE_PORT2 = 0x00;
      #endif//#ifdef EvaBoard_AT89C5132

      VPC3_ClrDpState( eDpStateInit );
 80008c0:	4b9e      	ldr	r3, [pc, #632]	; (8000b3c <DpAppl_ProfibusMain+0x2bc>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	781a      	ldrb	r2, [r3, #0]
 80008c6:	4b9d      	ldr	r3, [pc, #628]	; (8000b3c <DpAppl_ProfibusMain+0x2bc>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	f022 0201 	bic.w	r2, r2, #1
 80008ce:	b2d2      	uxtb	r2, r2
 80008d0:	701a      	strb	r2, [r3, #0]
      VPC3_SetDpState( eDpStateRun );
 80008d2:	4b9a      	ldr	r3, [pc, #616]	; (8000b3c <DpAppl_ProfibusMain+0x2bc>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	781a      	ldrb	r2, [r3, #0]
 80008d8:	4b98      	ldr	r3, [pc, #608]	; (8000b3c <DpAppl_ProfibusMain+0x2bc>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	f042 0202 	orr.w	r2, r2, #2
 80008e0:	b2d2      	uxtb	r2, r2
 80008e2:	701a      	strb	r2, [r3, #0]

   /*-------------------------------------------------------------------*/
   /* VPC3+ DP-state                                                    */
   /*-------------------------------------------------------------------*/
   #if VPC3_SERIAL_MODE
      bStatusRegHigh = VPC3_GET_STATUS_H();
 80008e4:	4b94      	ldr	r3, [pc, #592]	; (8000b38 <DpAppl_ProfibusMain+0x2b8>)
 80008e6:	881b      	ldrh	r3, [r3, #0]
 80008e8:	3305      	adds	r3, #5
 80008ea:	b29b      	uxth	r3, r3
 80008ec:	4618      	mov	r0, r3
 80008ee:	f005 faff 	bl	8005ef0 <Vpc3Read>
 80008f2:	4603      	mov	r3, r0
 80008f4:	72fb      	strb	r3, [r7, #11]
      bStatusRegLow = VPC3_GET_STATUS_L();
 80008f6:	4b90      	ldr	r3, [pc, #576]	; (8000b38 <DpAppl_ProfibusMain+0x2b8>)
 80008f8:	881b      	ldrh	r3, [r3, #0]
 80008fa:	3304      	adds	r3, #4
 80008fc:	b29b      	uxth	r3, r3
 80008fe:	4618      	mov	r0, r3
 8000900:	f005 faf6 	bl	8005ef0 <Vpc3Read>
 8000904:	4603      	mov	r3, r0
 8000906:	72bb      	strb	r3, [r7, #10]
      
      // DEBUG: Monitoreo frecuente del estado
      static uint8_t lastStatusLow = 0xFF;
      static uint8_t lastStatusHigh = 0xFF;
      if (bStatusRegLow != lastStatusLow || bStatusRegHigh != lastStatusHigh) {
 8000908:	4b8f      	ldr	r3, [pc, #572]	; (8000b48 <DpAppl_ProfibusMain+0x2c8>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	7aba      	ldrb	r2, [r7, #10]
 800090e:	429a      	cmp	r2, r3
 8000910:	d104      	bne.n	800091c <DpAppl_ProfibusMain+0x9c>
 8000912:	4b8e      	ldr	r3, [pc, #568]	; (8000b4c <DpAppl_ProfibusMain+0x2cc>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	7afa      	ldrb	r2, [r7, #11]
 8000918:	429a      	cmp	r2, r3
 800091a:	d012      	beq.n	8000942 <DpAppl_ProfibusMain+0xc2>
         printf("DEBUG: [STATUS_CHANGE] STATUS_L: 0x%02X -> 0x%02X, STATUS_H: 0x%02X -> 0x%02X\n", 
 800091c:	4b8a      	ldr	r3, [pc, #552]	; (8000b48 <DpAppl_ProfibusMain+0x2c8>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	4619      	mov	r1, r3
 8000922:	7aba      	ldrb	r2, [r7, #10]
 8000924:	4b89      	ldr	r3, [pc, #548]	; (8000b4c <DpAppl_ProfibusMain+0x2cc>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	4618      	mov	r0, r3
 800092a:	7afb      	ldrb	r3, [r7, #11]
 800092c:	9300      	str	r3, [sp, #0]
 800092e:	4603      	mov	r3, r0
 8000930:	4887      	ldr	r0, [pc, #540]	; (8000b50 <DpAppl_ProfibusMain+0x2d0>)
 8000932:	f008 f9bd 	bl	8008cb0 <iprintf>
                lastStatusLow, bStatusRegLow, lastStatusHigh, bStatusRegHigh);
         lastStatusLow = bStatusRegLow;
 8000936:	4a84      	ldr	r2, [pc, #528]	; (8000b48 <DpAppl_ProfibusMain+0x2c8>)
 8000938:	7abb      	ldrb	r3, [r7, #10]
 800093a:	7013      	strb	r3, [r2, #0]
         lastStatusHigh = bStatusRegHigh;
 800093c:	4a83      	ldr	r2, [pc, #524]	; (8000b4c <DpAppl_ProfibusMain+0x2cc>)
 800093e:	7afb      	ldrb	r3, [r7, #11]
 8000940:	7013      	strb	r3, [r2, #0]
      }

      // Verificación más tolerante: solo error fatal si el ASIC no es VPC3+S
      //if( (( bStatusRegLow & VPC3_PASS_IDLE ) == 0x00 ) || (( bStatusRegHigh & AT_MASK ) != AT_VPC3S ) ) //Funcion original
      if( ( bStatusRegHigh & AT_MASK ) != AT_VPC3S )
 8000942:	7afb      	ldrb	r3, [r7, #11]
 8000944:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000948:	2be0      	cmp	r3, #224	; 0xe0
 800094a:	d018      	beq.n	800097e <DpAppl_ProfibusMain+0xfe>
      {
         printf("DEBUG: [FATAL_CHECK] STATUS_L=0x%02X, STATUS_H=0x%02X, AT_MASK check=%d (ERROR FATAL)\n", 
 800094c:	7ab9      	ldrb	r1, [r7, #10]
 800094e:	7afa      	ldrb	r2, [r7, #11]
         bStatusRegLow, bStatusRegHigh, (bStatusRegHigh & AT_MASK) != AT_VPC3S);
 8000950:	7afb      	ldrb	r3, [r7, #11]
 8000952:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
         printf("DEBUG: [FATAL_CHECK] STATUS_L=0x%02X, STATUS_H=0x%02X, AT_MASK check=%d (ERROR FATAL)\n", 
 8000956:	2be0      	cmp	r3, #224	; 0xe0
 8000958:	bf14      	ite	ne
 800095a:	2301      	movne	r3, #1
 800095c:	2300      	moveq	r3, #0
 800095e:	b2db      	uxtb	r3, r3
 8000960:	487c      	ldr	r0, [pc, #496]	; (8000b54 <DpAppl_ProfibusMain+0x2d4>)
 8000962:	f008 f9a5 	bl	8008cb0 <iprintf>
         sVpc3Error.bErrorCode = bStatusRegLow;
 8000966:	4a7c      	ldr	r2, [pc, #496]	; (8000b58 <DpAppl_ProfibusMain+0x2d8>)
 8000968:	7abb      	ldrb	r3, [r7, #10]
 800096a:	7053      	strb	r3, [r2, #1]
         sVpc3Error.bCnId = bStatusRegHigh;
 800096c:	4a7a      	ldr	r2, [pc, #488]	; (8000b58 <DpAppl_ProfibusMain+0x2d8>)
 800096e:	7afb      	ldrb	r3, [r7, #11]
 8000970:	7113      	strb	r3, [r2, #4]
         DpAppl_FatalError( _DP_APPL, __LINE__, &sVpc3Error );
 8000972:	4a79      	ldr	r2, [pc, #484]	; (8000b58 <DpAppl_ProfibusMain+0x2d8>)
 8000974:	f44f 71c9 	mov.w	r1, #402	; 0x192
 8000978:	2011      	movs	r0, #17
 800097a:	f000 fb25 	bl	8000fc8 <DpAppl_FatalError>
      }
      
      // Verificación de estado: solo warning si no está en PASSIVE_IDLE o superior
      if( ( bStatusRegLow & VPC3_PASS_IDLE ) == 0x00 )
 800097e:	7abb      	ldrb	r3, [r7, #10]
 8000980:	f003 0301 	and.w	r3, r3, #1
 8000984:	2b00      	cmp	r3, #0
 8000986:	d10b      	bne.n	80009a0 <DpAppl_ProfibusMain+0x120>
      {
         static uint32_t offline_count = 0;
         offline_count++;
 8000988:	4b74      	ldr	r3, [pc, #464]	; (8000b5c <DpAppl_ProfibusMain+0x2dc>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	3301      	adds	r3, #1
 800098e:	4a73      	ldr	r2, [pc, #460]	; (8000b5c <DpAppl_ProfibusMain+0x2dc>)
 8000990:	6013      	str	r3, [r2, #0]
         printf("DEBUG: [STATE_WARNING] VPC3+ en OFFLINE (STATUS_L=0x%02X) - esperando reconexión del master (ciclo %lu)\n", 
 8000992:	7abb      	ldrb	r3, [r7, #10]
 8000994:	4a71      	ldr	r2, [pc, #452]	; (8000b5c <DpAppl_ProfibusMain+0x2dc>)
 8000996:	6812      	ldr	r2, [r2, #0]
 8000998:	4619      	mov	r1, r3
 800099a:	4871      	ldr	r0, [pc, #452]	; (8000b60 <DpAppl_ProfibusMain+0x2e0>)
 800099c:	f008 f988 	bl	8008cb0 <iprintf>
                bStatusRegLow, offline_count);
         // No es fatal, solo un warning - el sistema puede recuperarse
         
         // El sistema está funcionando correctamente en modo offline
      }
      bDpState = ( ( bStatusRegLow & MASK_DP_STATE ) >> 5 ); //Cambio a corrido de 5 bits para que funcione correctamente con la modificacion de dp_if.h del 31/07/2025
 80009a0:	7abb      	ldrb	r3, [r7, #10]
 80009a2:	115b      	asrs	r3, r3, #5
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	f003 0303 	and.w	r3, r3, #3
 80009aa:	727b      	strb	r3, [r7, #9]
   #else
      bDpState = VPC3_GET_DP_STATE();
   #endif /* #if VPC3_SERIAL_MODE */

      printf("DEBUG: [STATE_SWITCH] bDpState=0x%02X (WAIT_PRM=0x%02X, WAIT_CFG=0x%02X, DATA_EX=0x%02X)\n",
 80009ac:	7a79      	ldrb	r1, [r7, #9]
 80009ae:	2302      	movs	r3, #2
 80009b0:	9300      	str	r3, [sp, #0]
 80009b2:	2301      	movs	r3, #1
 80009b4:	2200      	movs	r2, #0
 80009b6:	486b      	ldr	r0, [pc, #428]	; (8000b64 <DpAppl_ProfibusMain+0x2e4>)
 80009b8:	f008 f97a 	bl	8008cb0 <iprintf>
          bDpState, WAIT_PRM, WAIT_CFG, DATA_EX);
      printf("DEBUG: [STATE_CALC] STATUS_L=0x%02X, MASK_DP_STATE=0x%02X, cálculo=((0x%02X & 0x%02X) >> 5)=0x%02X\n",
 80009bc:	7ab9      	ldrb	r1, [r7, #10]
 80009be:	7aba      	ldrb	r2, [r7, #10]
 80009c0:	7a7b      	ldrb	r3, [r7, #9]
 80009c2:	9301      	str	r3, [sp, #4]
 80009c4:	2360      	movs	r3, #96	; 0x60
 80009c6:	9300      	str	r3, [sp, #0]
 80009c8:	4613      	mov	r3, r2
 80009ca:	2260      	movs	r2, #96	; 0x60
 80009cc:	4866      	ldr	r0, [pc, #408]	; (8000b68 <DpAppl_ProfibusMain+0x2e8>)
 80009ce:	f008 f96f 	bl	8008cb0 <iprintf>
          bStatusRegLow, MASK_DP_STATE, bStatusRegLow, MASK_DP_STATE, bDpState); //Cambio a corrido de 5 bits para que funcione correctamente con la modificacion de dp_if.h del 31/07/2025
      printf("DEBUG: [STATE_VERIFY] STATUS_L=0x%02X, bits 5-6 extraídos y desplazados: 0x%02X, debería ser DATA_EX=0x%02X\n",
 80009d2:	7ab9      	ldrb	r1, [r7, #10]
          bStatusRegLow, ((bStatusRegLow & 0x60) >> 5), DATA_EX); //Cambio a corrido de 5 bits para que funcione correctamente con la modificacion de dp_if.h del 31/07/2025
 80009d4:	7abb      	ldrb	r3, [r7, #10]
 80009d6:	115b      	asrs	r3, r3, #5
      printf("DEBUG: [STATE_VERIFY] STATUS_L=0x%02X, bits 5-6 extraídos y desplazados: 0x%02X, debería ser DATA_EX=0x%02X\n",
 80009d8:	f003 0203 	and.w	r2, r3, #3
 80009dc:	2302      	movs	r3, #2
 80009de:	4863      	ldr	r0, [pc, #396]	; (8000b6c <DpAppl_ProfibusMain+0x2ec>)
 80009e0:	f008 f966 	bl	8008cb0 <iprintf>
      
      // Análisis detallado del problema
      printf("DEBUG: [STATE_ANALYSIS] STATUS_L=0x%02X (binario: ", bStatusRegLow);
 80009e4:	7abb      	ldrb	r3, [r7, #10]
 80009e6:	4619      	mov	r1, r3
 80009e8:	4861      	ldr	r0, [pc, #388]	; (8000b70 <DpAppl_ProfibusMain+0x2f0>)
 80009ea:	f008 f961 	bl	8008cb0 <iprintf>
      for(uint8_t bit = 0; bit < 8; bit++) {
 80009ee:	2300      	movs	r3, #0
 80009f0:	73fb      	strb	r3, [r7, #15]
 80009f2:	e00e      	b.n	8000a12 <DpAppl_ProfibusMain+0x192>
          printf("%d", (bStatusRegLow >> (7-bit)) & 1);
 80009f4:	7aba      	ldrb	r2, [r7, #10]
 80009f6:	7bfb      	ldrb	r3, [r7, #15]
 80009f8:	f1c3 0307 	rsb	r3, r3, #7
 80009fc:	fa42 f303 	asr.w	r3, r2, r3
 8000a00:	f003 0301 	and.w	r3, r3, #1
 8000a04:	4619      	mov	r1, r3
 8000a06:	485b      	ldr	r0, [pc, #364]	; (8000b74 <DpAppl_ProfibusMain+0x2f4>)
 8000a08:	f008 f952 	bl	8008cb0 <iprintf>
      for(uint8_t bit = 0; bit < 8; bit++) {
 8000a0c:	7bfb      	ldrb	r3, [r7, #15]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	73fb      	strb	r3, [r7, #15]
 8000a12:	7bfb      	ldrb	r3, [r7, #15]
 8000a14:	2b07      	cmp	r3, #7
 8000a16:	d9ed      	bls.n	80009f4 <DpAppl_ProfibusMain+0x174>
      }
      printf(")\n");
 8000a18:	4857      	ldr	r0, [pc, #348]	; (8000b78 <DpAppl_ProfibusMain+0x2f8>)
 8000a1a:	f008 f9e5 	bl	8008de8 <puts>
      printf("DEBUG: [STATE_ANALYSIS] MASK_DP_STATE=0x%02X (binario: ", MASK_DP_STATE);
 8000a1e:	2160      	movs	r1, #96	; 0x60
 8000a20:	4856      	ldr	r0, [pc, #344]	; (8000b7c <DpAppl_ProfibusMain+0x2fc>)
 8000a22:	f008 f945 	bl	8008cb0 <iprintf>
      for(uint8_t bit = 0; bit < 8; bit++) {
 8000a26:	2300      	movs	r3, #0
 8000a28:	73bb      	strb	r3, [r7, #14]
 8000a2a:	e00e      	b.n	8000a4a <DpAppl_ProfibusMain+0x1ca>
          printf("%d", (MASK_DP_STATE >> (7-bit)) & 1);
 8000a2c:	7bbb      	ldrb	r3, [r7, #14]
 8000a2e:	f1c3 0307 	rsb	r3, r3, #7
 8000a32:	2260      	movs	r2, #96	; 0x60
 8000a34:	fa42 f303 	asr.w	r3, r2, r3
 8000a38:	f003 0301 	and.w	r3, r3, #1
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	484d      	ldr	r0, [pc, #308]	; (8000b74 <DpAppl_ProfibusMain+0x2f4>)
 8000a40:	f008 f936 	bl	8008cb0 <iprintf>
      for(uint8_t bit = 0; bit < 8; bit++) {
 8000a44:	7bbb      	ldrb	r3, [r7, #14]
 8000a46:	3301      	adds	r3, #1
 8000a48:	73bb      	strb	r3, [r7, #14]
 8000a4a:	7bbb      	ldrb	r3, [r7, #14]
 8000a4c:	2b07      	cmp	r3, #7
 8000a4e:	d9ed      	bls.n	8000a2c <DpAppl_ProfibusMain+0x1ac>
      }
      printf(")\n");
 8000a50:	4849      	ldr	r0, [pc, #292]	; (8000b78 <DpAppl_ProfibusMain+0x2f8>)
 8000a52:	f008 f9c9 	bl	8008de8 <puts>
      printf("DEBUG: [STATE_ANALYSIS] STATUS_L & MASK_DP_STATE = 0x%02X (binario: ", (bStatusRegLow & MASK_DP_STATE));
 8000a56:	7abb      	ldrb	r3, [r7, #10]
 8000a58:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4848      	ldr	r0, [pc, #288]	; (8000b80 <DpAppl_ProfibusMain+0x300>)
 8000a60:	f008 f926 	bl	8008cb0 <iprintf>
      for(uint8_t bit = 0; bit < 8; bit++) {
 8000a64:	2300      	movs	r3, #0
 8000a66:	737b      	strb	r3, [r7, #13]
 8000a68:	e010      	b.n	8000a8c <DpAppl_ProfibusMain+0x20c>
          printf("%d", ((bStatusRegLow & MASK_DP_STATE) >> (7-bit)) & 1);
 8000a6a:	7abb      	ldrb	r3, [r7, #10]
 8000a6c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8000a70:	7b7b      	ldrb	r3, [r7, #13]
 8000a72:	f1c3 0307 	rsb	r3, r3, #7
 8000a76:	fa42 f303 	asr.w	r3, r2, r3
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	4619      	mov	r1, r3
 8000a80:	483c      	ldr	r0, [pc, #240]	; (8000b74 <DpAppl_ProfibusMain+0x2f4>)
 8000a82:	f008 f915 	bl	8008cb0 <iprintf>
      for(uint8_t bit = 0; bit < 8; bit++) {
 8000a86:	7b7b      	ldrb	r3, [r7, #13]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	737b      	strb	r3, [r7, #13]
 8000a8c:	7b7b      	ldrb	r3, [r7, #13]
 8000a8e:	2b07      	cmp	r3, #7
 8000a90:	d9eb      	bls.n	8000a6a <DpAppl_ProfibusMain+0x1ea>
      }
      printf(")\n");
 8000a92:	4839      	ldr	r0, [pc, #228]	; (8000b78 <DpAppl_ProfibusMain+0x2f8>)
 8000a94:	f008 f9a8 	bl	8008de8 <puts>
      printf("DEBUG: [STATE_ANALYSIS] (STATUS_L & MASK_DP_STATE) >> 5 = 0x%02X (binario: ", bDpState); //Cambio a corrido de 5 bits para que funcione correctamente con la modificacion de dp_if.h del 31/07/2025
 8000a98:	7a7b      	ldrb	r3, [r7, #9]
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4839      	ldr	r0, [pc, #228]	; (8000b84 <DpAppl_ProfibusMain+0x304>)
 8000a9e:	f008 f907 	bl	8008cb0 <iprintf>
      for(uint8_t bit = 0; bit < 8; bit++) {
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	733b      	strb	r3, [r7, #12]
 8000aa6:	e00e      	b.n	8000ac6 <DpAppl_ProfibusMain+0x246>
          printf("%d", (bDpState >> (7-bit)) & 1);
 8000aa8:	7a7a      	ldrb	r2, [r7, #9]
 8000aaa:	7b3b      	ldrb	r3, [r7, #12]
 8000aac:	f1c3 0307 	rsb	r3, r3, #7
 8000ab0:	fa42 f303 	asr.w	r3, r2, r3
 8000ab4:	f003 0301 	and.w	r3, r3, #1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	482e      	ldr	r0, [pc, #184]	; (8000b74 <DpAppl_ProfibusMain+0x2f4>)
 8000abc:	f008 f8f8 	bl	8008cb0 <iprintf>
      for(uint8_t bit = 0; bit < 8; bit++) {
 8000ac0:	7b3b      	ldrb	r3, [r7, #12]
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	733b      	strb	r3, [r7, #12]
 8000ac6:	7b3b      	ldrb	r3, [r7, #12]
 8000ac8:	2b07      	cmp	r3, #7
 8000aca:	d9ed      	bls.n	8000aa8 <DpAppl_ProfibusMain+0x228>
      }
      printf(")\n");
 8000acc:	482a      	ldr	r0, [pc, #168]	; (8000b78 <DpAppl_ProfibusMain+0x2f8>)
 8000ace:	f008 f98b 	bl	8008de8 <puts>
      printf("DEBUG: [STATE_ANALYSIS] Comparación: bDpState=0x%02X vs DATA_EX=0x%02X (¿iguales? %s)\n",
 8000ad2:	7a79      	ldrb	r1, [r7, #9]
 8000ad4:	7a7b      	ldrb	r3, [r7, #9]
 8000ad6:	2b02      	cmp	r3, #2
 8000ad8:	d101      	bne.n	8000ade <DpAppl_ProfibusMain+0x25e>
 8000ada:	4b2b      	ldr	r3, [pc, #172]	; (8000b88 <DpAppl_ProfibusMain+0x308>)
 8000adc:	e000      	b.n	8000ae0 <DpAppl_ProfibusMain+0x260>
 8000ade:	4b2b      	ldr	r3, [pc, #172]	; (8000b8c <DpAppl_ProfibusMain+0x30c>)
 8000ae0:	2202      	movs	r2, #2
 8000ae2:	482b      	ldr	r0, [pc, #172]	; (8000b90 <DpAppl_ProfibusMain+0x310>)
 8000ae4:	f008 f8e4 	bl	8008cb0 <iprintf>
          bDpState, DATA_EX, (bDpState == DATA_EX) ? "SÍ" : "NO");
   
   // Detectar cambio de estado específico
   static uint8_t last_dp_state = 0xFF;
   if (last_dp_state != bDpState) {
 8000ae8:	4b2a      	ldr	r3, [pc, #168]	; (8000b94 <DpAppl_ProfibusMain+0x314>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	7a7a      	ldrb	r2, [r7, #9]
 8000aee:	429a      	cmp	r2, r3
 8000af0:	d00a      	beq.n	8000b08 <DpAppl_ProfibusMain+0x288>
      printf("DEBUG: [STATE_CHANGE] DP_STATE cambió de 0x%02X a 0x%02X\n", last_dp_state, bDpState);
 8000af2:	4b28      	ldr	r3, [pc, #160]	; (8000b94 <DpAppl_ProfibusMain+0x314>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	4619      	mov	r1, r3
 8000af8:	7a7b      	ldrb	r3, [r7, #9]
 8000afa:	461a      	mov	r2, r3
 8000afc:	4826      	ldr	r0, [pc, #152]	; (8000b98 <DpAppl_ProfibusMain+0x318>)
 8000afe:	f008 f8d7 	bl	8008cb0 <iprintf>
      last_dp_state = bDpState;
 8000b02:	4a24      	ldr	r2, [pc, #144]	; (8000b94 <DpAppl_ProfibusMain+0x314>)
 8000b04:	7a7b      	ldrb	r3, [r7, #9]
 8000b06:	7013      	strb	r3, [r2, #0]
   }
   switch( bDpState )
 8000b08:	7a7b      	ldrb	r3, [r7, #9]
 8000b0a:	2b03      	cmp	r3, #3
 8000b0c:	f200 80b2 	bhi.w	8000c74 <DpAppl_ProfibusMain+0x3f4>
 8000b10:	a201      	add	r2, pc, #4	; (adr r2, 8000b18 <DpAppl_ProfibusMain+0x298>)
 8000b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b16:	bf00      	nop
 8000b18:	08000b29 	.word	0x08000b29
 8000b1c:	08000b31 	.word	0x08000b31
 8000b20:	08000ba5 	.word	0x08000ba5
 8000b24:	08000c47 	.word	0x08000c47
            CLR_LED_YLW__;
            SET_LED_RED__;
         #endif//#ifdef EvaBoard_AT89C5132

   
      printf("DEBUG: [STATE_WAIT_PRM] VPC3+ en WAIT_PRM - esperando telegrama Prm\n");
 8000b28:	481c      	ldr	r0, [pc, #112]	; (8000b9c <DpAppl_ProfibusMain+0x31c>)
 8000b2a:	f008 f95d 	bl	8008de8 <puts>
         break;
 8000b2e:	e0ae      	b.n	8000c8e <DpAppl_ProfibusMain+0x40e>
            // set LED's
            CLR_LED_YLW__;
            SET_LED_RED__;
         #endif//#ifdef EvaBoard_AT89C5132

         printf("DEBUG: [STATE_WAIT_CFG] VPC3+ en WAIT_CFG - esperando telegrama Chk_Cfg\n");
 8000b30:	481b      	ldr	r0, [pc, #108]	; (8000ba0 <DpAppl_ProfibusMain+0x320>)
 8000b32:	f008 f959 	bl	8008de8 <puts>
         break;
 8000b36:	e0aa      	b.n	8000c8e <DpAppl_ProfibusMain+0x40e>
 8000b38:	20000144 	.word	0x20000144
 8000b3c:	20000000 	.word	0x20000000
 8000b40:	200001a1 	.word	0x200001a1
 8000b44:	20000199 	.word	0x20000199
 8000b48:	20000004 	.word	0x20000004
 8000b4c:	20000005 	.word	0x20000005
 8000b50:	08009f48 	.word	0x08009f48
 8000b54:	08009f98 	.word	0x08009f98
 8000b58:	200001c8 	.word	0x200001c8
 8000b5c:	200000a8 	.word	0x200000a8
 8000b60:	08009ff0 	.word	0x08009ff0
 8000b64:	0800a05c 	.word	0x0800a05c
 8000b68:	0800a0b8 	.word	0x0800a0b8
 8000b6c:	0800a120 	.word	0x0800a120
 8000b70:	0800a190 	.word	0x0800a190
 8000b74:	0800a1c4 	.word	0x0800a1c4
 8000b78:	0800a1c8 	.word	0x0800a1c8
 8000b7c:	0800a1cc 	.word	0x0800a1cc
 8000b80:	0800a204 	.word	0x0800a204
 8000b84:	0800a24c 	.word	0x0800a24c
 8000b88:	0800a298 	.word	0x0800a298
 8000b8c:	0800a29c 	.word	0x0800a29c
 8000b90:	0800a2a0 	.word	0x0800a2a0
 8000b94:	20000006 	.word	0x20000006
 8000b98:	0800a2fc 	.word	0x0800a2fc
 8000b9c:	0800a338 	.word	0x0800a338
 8000ba0:	0800a37c 	.word	0x0800a37c
            SET_LED_YLW__;
            CLR_LED_RED__;
         #endif//#ifdef EvaBoard_AT89C5132

         // En la primera entrada a DATA_EX, después de una configuración válida, preparamos la aplicación.
         if (VPC3_GetDpState(eDpStateCfgOkStatDiag))
 8000ba4:	4bb5      	ldr	r3, [pc, #724]	; (8000e7c <DpAppl_ProfibusMain+0x5fc>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	f003 0308 	and.w	r3, r3, #8
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d004      	beq.n	8000bbc <DpAppl_ProfibusMain+0x33c>
         {
            printf("DEBUG: [DATA_EX] Condición para llamar a ApplicationReady CUMPLIDA. Llamando...\n");
 8000bb2:	48b3      	ldr	r0, [pc, #716]	; (8000e80 <DpAppl_ProfibusMain+0x600>)
 8000bb4:	f008 f918 	bl	8008de8 <puts>
            DpAppl_ApplicationReady();
 8000bb8:	f7ff fd88 	bl	80006cc <DpAppl_ApplicationReady>
         }

         printf("DEBUG: [STATE_DATA_EX] VPC3+ en DATA_EX - comunicación activa\n");
 8000bbc:	48b1      	ldr	r0, [pc, #708]	; (8000e84 <DpAppl_ProfibusMain+0x604>)
 8000bbe:	f008 f913 	bl	8008de8 <puts>
         printf("DEBUG: [STATE_CHECK] eDpStateApplReady=%d, eDpStateRun=%d\n", 
                VPC3_GetDpState( eDpStateApplReady ), VPC3_GetDpState( eDpStateRun ));
 8000bc2:	4bae      	ldr	r3, [pc, #696]	; (8000e7c <DpAppl_ProfibusMain+0x5fc>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	781b      	ldrb	r3, [r3, #0]
         printf("DEBUG: [STATE_CHECK] eDpStateApplReady=%d, eDpStateRun=%d\n", 
 8000bc8:	f003 0104 	and.w	r1, r3, #4
                VPC3_GetDpState( eDpStateApplReady ), VPC3_GetDpState( eDpStateRun ));
 8000bcc:	4bab      	ldr	r3, [pc, #684]	; (8000e7c <DpAppl_ProfibusMain+0x5fc>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	781b      	ldrb	r3, [r3, #0]
         printf("DEBUG: [STATE_CHECK] eDpStateApplReady=%d, eDpStateRun=%d\n", 
 8000bd2:	f003 0302 	and.w	r3, r3, #2
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	48ab      	ldr	r0, [pc, #684]	; (8000e88 <DpAppl_ProfibusMain+0x608>)
 8000bda:	f008 f869 	bl	8008cb0 <iprintf>
         
         if(    ( VPC3_GetDpState( eDpStateApplReady ) )
 8000bde:	4ba7      	ldr	r3, [pc, #668]	; (8000e7c <DpAppl_ProfibusMain+0x5fc>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	f003 0304 	and.w	r3, r3, #4
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d04f      	beq.n	8000c8c <DpAppl_ProfibusMain+0x40c>
             && ( VPC3_GetDpState( eDpStateRun )  )
 8000bec:	4ba3      	ldr	r3, [pc, #652]	; (8000e7c <DpAppl_ProfibusMain+0x5fc>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	f003 0302 	and.w	r3, r3, #2
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d048      	beq.n	8000c8c <DpAppl_ProfibusMain+0x40c>
           )
         {
            printf("DEBUG: [APPLICATION_READY] Ambos estados activos - aplicación funcionando\n");
 8000bfa:	48a4      	ldr	r0, [pc, #656]	; (8000e8c <DpAppl_ProfibusMain+0x60c>)
 8000bfc:	f008 f8f4 	bl	8008de8 <puts>
            #endif//#ifdef EvaBoard_AT89C5132

            /*-------------------------------------------------------------------*/
            /* DP-V0 - diagnostic                                                */
            /*-------------------------------------------------------------------*/
            DpDiag_CheckDpv0Diagnosis();
 8000c00:	f001 fa44 	bl	800208c <DpDiag_CheckDpv0Diagnosis>

            /*-------------------------------------------------------------------*/
            /* profibus input                                                    */
            /*-------------------------------------------------------------------*/
            if( DpAppl_TestApplEvent( eDpApplEv_IoIn ) )
 8000c04:	2010      	movs	r0, #16
 8000c06:	f7ff fcb7 	bl	8000578 <DpAppl_TestApplEvent>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <DpAppl_ProfibusMain+0x394>
            {
               DpAppl_ReadInputData();
 8000c10:	f7ff fd22 	bl	8000658 <DpAppl_ReadInputData>
            }//if( DpAppl_TestApplEvent( eDpApplEv_IoIn ) )

            // --- INICIO: Logica de prueba para eco de datos ---
            // Leer el primer byte enviado por el PLC desde el buffer de datos de salida del master.
            // Este buffer se actualiza en DpAppl_CheckEvIoOut() y se copia a sSystem.sOutput.
            uint8_t byte_from_plc = sSystem.sOutput.abDo8[0];
 8000c14:	4b9e      	ldr	r3, [pc, #632]	; (8000e90 <DpAppl_ProfibusMain+0x610>)
 8000c16:	7a5b      	ldrb	r3, [r3, #9]
 8000c18:	723b      	strb	r3, [r7, #8]

            // Modificar el valor (ej. sumarle 100 para que el cambio sea evidente)
            uint8_t byte_to_plc = byte_from_plc + 100;
 8000c1a:	7a3b      	ldrb	r3, [r7, #8]
 8000c1c:	3364      	adds	r3, #100	; 0x64
 8000c1e:	71fb      	strb	r3, [r7, #7]

            // Log detallado de la trama de datos en cada ciclo
            static uint32_t data_exchange_count = 0;
            printf("[DATA_EXCHANGE_TRAMA #%lu] PLC->STM32: 0x%02X | STM32->PLC: 0x%02X\n",
 8000c20:	4b9c      	ldr	r3, [pc, #624]	; (8000e94 <DpAppl_ProfibusMain+0x614>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	3301      	adds	r3, #1
 8000c26:	4a9b      	ldr	r2, [pc, #620]	; (8000e94 <DpAppl_ProfibusMain+0x614>)
 8000c28:	6013      	str	r3, [r2, #0]
 8000c2a:	4b9a      	ldr	r3, [pc, #616]	; (8000e94 <DpAppl_ProfibusMain+0x614>)
 8000c2c:	6819      	ldr	r1, [r3, #0]
 8000c2e:	7a3a      	ldrb	r2, [r7, #8]
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	4899      	ldr	r0, [pc, #612]	; (8000e98 <DpAppl_ProfibusMain+0x618>)
 8000c34:	f008 f83c 	bl	8008cb0 <iprintf>
                   byte_from_plc,
                   byte_to_plc);

            // Escribir el nuevo valor en el buffer de entrada hacia el PLC.
            // Este buffer (sSystem.sInput.abDi8) será leído por el master en el siguiente ciclo.
            sSystem.sInput.abDi8[0] = byte_to_plc;
 8000c38:	4a95      	ldr	r2, [pc, #596]	; (8000e90 <DpAppl_ProfibusMain+0x610>)
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	7053      	strb	r3, [r2, #1]
            
            // Notificar que hay nuevos datos de entrada disponibles
            DpAppl_SetApplEvent( eDpApplEv_IoIn );
 8000c3e:	2010      	movs	r0, #16
 8000c40:	f7ff fcbe 	bl	80005c0 <DpAppl_SetApplEvent>
            // --- FIN: Logica de prueba ---
         }//if(    ( pDpSystem->bApplicationReady == VPC3_TRUE ) ...

         break;
 8000c44:	e022      	b.n	8000c8c <DpAppl_ProfibusMain+0x40c>
      }//case DATA_EX:

      case DP_ERROR:
      {
         printf("DEBUG: [STATE_DP_ERROR] VPC3+ en estado DP_ERROR - error de protocolo\n");
 8000c46:	4895      	ldr	r0, [pc, #596]	; (8000e9c <DpAppl_ProfibusMain+0x61c>)
 8000c48:	f008 f8ce 	bl	8008de8 <puts>
         sVpc3Error.bErrorCode = VPC3_GET_DP_STATE();
 8000c4c:	4b94      	ldr	r3, [pc, #592]	; (8000ea0 <DpAppl_ProfibusMain+0x620>)
 8000c4e:	881b      	ldrh	r3, [r3, #0]
 8000c50:	3304      	adds	r3, #4
 8000c52:	b29b      	uxth	r3, r3
 8000c54:	4618      	mov	r0, r3
 8000c56:	f005 f94b 	bl	8005ef0 <Vpc3Read>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8000c60:	b2da      	uxtb	r2, r3
 8000c62:	4b90      	ldr	r3, [pc, #576]	; (8000ea4 <DpAppl_ProfibusMain+0x624>)
 8000c64:	705a      	strb	r2, [r3, #1]
         DpAppl_FatalError( _DP_USER, __LINE__, &sVpc3Error );
 8000c66:	4a8f      	ldr	r2, [pc, #572]	; (8000ea4 <DpAppl_ProfibusMain+0x624>)
 8000c68:	f240 2162 	movw	r1, #610	; 0x262
 8000c6c:	2010      	movs	r0, #16
 8000c6e:	f000 f9ab 	bl	8000fc8 <DpAppl_FatalError>
         break;
 8000c72:	e00c      	b.n	8000c8e <DpAppl_ProfibusMain+0x40e>
      }//case DP_ERROR:
      
      default:
      {
         // Caso para estados no reconocidos (debería ser raro ahora)
         printf("DEBUG: [STATE_DEFAULT] VPC3+ en estado 0x%02X (no reconocido) - STATUS_L=0x%02X\n", bDpState, bStatusRegLow);
 8000c74:	7a7b      	ldrb	r3, [r7, #9]
 8000c76:	7aba      	ldrb	r2, [r7, #10]
 8000c78:	4619      	mov	r1, r3
 8000c7a:	488b      	ldr	r0, [pc, #556]	; (8000ea8 <DpAppl_ProfibusMain+0x628>)
 8000c7c:	f008 f818 	bl	8008cb0 <iprintf>
         printf("DEBUG: [STATE_UNKNOWN] Estado no reconocido: 0x%02X\n", bDpState);
 8000c80:	7a7b      	ldrb	r3, [r7, #9]
 8000c82:	4619      	mov	r1, r3
 8000c84:	4889      	ldr	r0, [pc, #548]	; (8000eac <DpAppl_ProfibusMain+0x62c>)
 8000c86:	f008 f813 	bl	8008cb0 <iprintf>
         break;
 8000c8a:	e000      	b.n	8000c8e <DpAppl_ProfibusMain+0x40e>
         break;
 8000c8c:	bf00      	nop

   /*------------------------------------------------------------------------*/
   /* profibus output ( master to slave )                                    */
   /*------------------------------------------------------------------------*/
   printf("DEBUG: [ProfibusMain] STATUS antes de DpAppl_CheckEvIoOut: L=0x%02X, H=0x%02X\n", 
          VPC3_GET_STATUS_L(), VPC3_GET_STATUS_H());
 8000c8e:	4b84      	ldr	r3, [pc, #528]	; (8000ea0 <DpAppl_ProfibusMain+0x620>)
 8000c90:	881b      	ldrh	r3, [r3, #0]
 8000c92:	3304      	adds	r3, #4
 8000c94:	b29b      	uxth	r3, r3
 8000c96:	4618      	mov	r0, r3
 8000c98:	f005 f92a 	bl	8005ef0 <Vpc3Read>
 8000c9c:	4603      	mov	r3, r0
   printf("DEBUG: [ProfibusMain] STATUS antes de DpAppl_CheckEvIoOut: L=0x%02X, H=0x%02X\n", 
 8000c9e:	461c      	mov	r4, r3
          VPC3_GET_STATUS_L(), VPC3_GET_STATUS_H());
 8000ca0:	4b7f      	ldr	r3, [pc, #508]	; (8000ea0 <DpAppl_ProfibusMain+0x620>)
 8000ca2:	881b      	ldrh	r3, [r3, #0]
 8000ca4:	3305      	adds	r3, #5
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f005 f921 	bl	8005ef0 <Vpc3Read>
 8000cae:	4603      	mov	r3, r0
   printf("DEBUG: [ProfibusMain] STATUS antes de DpAppl_CheckEvIoOut: L=0x%02X, H=0x%02X\n", 
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	4621      	mov	r1, r4
 8000cb4:	487e      	ldr	r0, [pc, #504]	; (8000eb0 <DpAppl_ProfibusMain+0x630>)
 8000cb6:	f007 fffb 	bl	8008cb0 <iprintf>
   
   // Detectar corrupción antes de CheckEvIoOut
   if (VPC3_GET_STATUS_L() == 0x26 && VPC3_GET_STATUS_H() == 0xB7) {
 8000cba:	4b79      	ldr	r3, [pc, #484]	; (8000ea0 <DpAppl_ProfibusMain+0x620>)
 8000cbc:	881b      	ldrh	r3, [r3, #0]
 8000cbe:	3304      	adds	r3, #4
 8000cc0:	b29b      	uxth	r3, r3
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f005 f914 	bl	8005ef0 <Vpc3Read>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b26      	cmp	r3, #38	; 0x26
 8000ccc:	d10c      	bne.n	8000ce8 <DpAppl_ProfibusMain+0x468>
 8000cce:	4b74      	ldr	r3, [pc, #464]	; (8000ea0 <DpAppl_ProfibusMain+0x620>)
 8000cd0:	881b      	ldrh	r3, [r3, #0]
 8000cd2:	3305      	adds	r3, #5
 8000cd4:	b29b      	uxth	r3, r3
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f005 f90a 	bl	8005ef0 <Vpc3Read>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2bb7      	cmp	r3, #183	; 0xb7
 8000ce0:	d102      	bne.n	8000ce8 <DpAppl_ProfibusMain+0x468>
      printf("DEBUG: [ProfibusMain] ⚠️ CORRUPCIÓN DETECTADA ANTES de CheckEvIoOut\n");
 8000ce2:	4874      	ldr	r0, [pc, #464]	; (8000eb4 <DpAppl_ProfibusMain+0x634>)
 8000ce4:	f008 f880 	bl	8008de8 <puts>
   }
   
   // Detectar transición de DATA_EX a corrupción en main loop
   static uint8_t main_last_status_l = 0xFF;
   static uint8_t main_last_status_h = 0xFF;
   uint8_t main_current_status_l = VPC3_GET_STATUS_L();
 8000ce8:	4b6d      	ldr	r3, [pc, #436]	; (8000ea0 <DpAppl_ProfibusMain+0x620>)
 8000cea:	881b      	ldrh	r3, [r3, #0]
 8000cec:	3304      	adds	r3, #4
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f005 f8fd 	bl	8005ef0 <Vpc3Read>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	71bb      	strb	r3, [r7, #6]
   uint8_t main_current_status_h = VPC3_GET_STATUS_H();
 8000cfa:	4b69      	ldr	r3, [pc, #420]	; (8000ea0 <DpAppl_ProfibusMain+0x620>)
 8000cfc:	881b      	ldrh	r3, [r3, #0]
 8000cfe:	3305      	adds	r3, #5
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	4618      	mov	r0, r3
 8000d04:	f005 f8f4 	bl	8005ef0 <Vpc3Read>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	717b      	strb	r3, [r7, #5]
   
   if (main_last_status_l == 0x45 && main_last_status_h == 0xE3 && 
 8000d0c:	4b6a      	ldr	r3, [pc, #424]	; (8000eb8 <DpAppl_ProfibusMain+0x638>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	2b45      	cmp	r3, #69	; 0x45
 8000d12:	d10f      	bne.n	8000d34 <DpAppl_ProfibusMain+0x4b4>
 8000d14:	4b69      	ldr	r3, [pc, #420]	; (8000ebc <DpAppl_ProfibusMain+0x63c>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	2be3      	cmp	r3, #227	; 0xe3
 8000d1a:	d10b      	bne.n	8000d34 <DpAppl_ProfibusMain+0x4b4>
 8000d1c:	79bb      	ldrb	r3, [r7, #6]
 8000d1e:	2b45      	cmp	r3, #69	; 0x45
 8000d20:	d102      	bne.n	8000d28 <DpAppl_ProfibusMain+0x4a8>
       (main_current_status_l != 0x45 || main_current_status_h != 0xE3)) {
 8000d22:	797b      	ldrb	r3, [r7, #5]
 8000d24:	2be3      	cmp	r3, #227	; 0xe3
 8000d26:	d005      	beq.n	8000d34 <DpAppl_ProfibusMain+0x4b4>
      printf("DEBUG: [ProfibusMain] ⚠️ TRANSICIÓN DETECTADA EN MAIN: STATUS_L=0x45->0x%02X, STATUS_H=0xE3->0x%02X\n", 
 8000d28:	79bb      	ldrb	r3, [r7, #6]
 8000d2a:	797a      	ldrb	r2, [r7, #5]
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4864      	ldr	r0, [pc, #400]	; (8000ec0 <DpAppl_ProfibusMain+0x640>)
 8000d30:	f007 ffbe 	bl	8008cb0 <iprintf>
             main_current_status_l, main_current_status_h);
   }
   
   main_last_status_l = main_current_status_l;
 8000d34:	4a60      	ldr	r2, [pc, #384]	; (8000eb8 <DpAppl_ProfibusMain+0x638>)
 8000d36:	79bb      	ldrb	r3, [r7, #6]
 8000d38:	7013      	strb	r3, [r2, #0]
   main_last_status_h = main_current_status_h;
 8000d3a:	4a60      	ldr	r2, [pc, #384]	; (8000ebc <DpAppl_ProfibusMain+0x63c>)
 8000d3c:	797b      	ldrb	r3, [r7, #5]
 8000d3e:	7013      	strb	r3, [r2, #0]
   
   DpAppl_CheckEvIoOut();
 8000d40:	f7ff fc52 	bl	80005e8 <DpAppl_CheckEvIoOut>
   printf("DEBUG: [ProfibusMain] STATUS después de DpAppl_CheckEvIoOut: L=0x%02X, H=0x%02X\n", 
          VPC3_GET_STATUS_L(), VPC3_GET_STATUS_H());
 8000d44:	4b56      	ldr	r3, [pc, #344]	; (8000ea0 <DpAppl_ProfibusMain+0x620>)
 8000d46:	881b      	ldrh	r3, [r3, #0]
 8000d48:	3304      	adds	r3, #4
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f005 f8cf 	bl	8005ef0 <Vpc3Read>
 8000d52:	4603      	mov	r3, r0
   printf("DEBUG: [ProfibusMain] STATUS después de DpAppl_CheckEvIoOut: L=0x%02X, H=0x%02X\n", 
 8000d54:	461c      	mov	r4, r3
          VPC3_GET_STATUS_L(), VPC3_GET_STATUS_H());
 8000d56:	4b52      	ldr	r3, [pc, #328]	; (8000ea0 <DpAppl_ProfibusMain+0x620>)
 8000d58:	881b      	ldrh	r3, [r3, #0]
 8000d5a:	3305      	adds	r3, #5
 8000d5c:	b29b      	uxth	r3, r3
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f005 f8c6 	bl	8005ef0 <Vpc3Read>
 8000d64:	4603      	mov	r3, r0
   printf("DEBUG: [ProfibusMain] STATUS después de DpAppl_CheckEvIoOut: L=0x%02X, H=0x%02X\n", 
 8000d66:	461a      	mov	r2, r3
 8000d68:	4621      	mov	r1, r4
 8000d6a:	4856      	ldr	r0, [pc, #344]	; (8000ec4 <DpAppl_ProfibusMain+0x644>)
 8000d6c:	f007 ffa0 	bl	8008cb0 <iprintf>
   
   // Detectar corrupción después de CheckEvIoOut
   if (VPC3_GET_STATUS_L() == 0x26 && VPC3_GET_STATUS_H() == 0xB7) {
 8000d70:	4b4b      	ldr	r3, [pc, #300]	; (8000ea0 <DpAppl_ProfibusMain+0x620>)
 8000d72:	881b      	ldrh	r3, [r3, #0]
 8000d74:	3304      	adds	r3, #4
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f005 f8b9 	bl	8005ef0 <Vpc3Read>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b26      	cmp	r3, #38	; 0x26
 8000d82:	d10c      	bne.n	8000d9e <DpAppl_ProfibusMain+0x51e>
 8000d84:	4b46      	ldr	r3, [pc, #280]	; (8000ea0 <DpAppl_ProfibusMain+0x620>)
 8000d86:	881b      	ldrh	r3, [r3, #0]
 8000d88:	3305      	adds	r3, #5
 8000d8a:	b29b      	uxth	r3, r3
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f005 f8af 	bl	8005ef0 <Vpc3Read>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2bb7      	cmp	r3, #183	; 0xb7
 8000d96:	d102      	bne.n	8000d9e <DpAppl_ProfibusMain+0x51e>
      printf("DEBUG: [ProfibusMain] ⚠️ CORRUPCIÓN DETECTADA DESPUÉS de CheckEvIoOut\n");
 8000d98:	484b      	ldr	r0, [pc, #300]	; (8000ec8 <DpAppl_ProfibusMain+0x648>)
 8000d9a:	f008 f825 	bl	8008de8 <puts>
   }

        // Detailed log every 5 seconds
        if (HAL_GetTick() - last_debug > 5000) {
 8000d9e:	f005 fc01 	bl	80065a4 <HAL_GetTick>
 8000da2:	4602      	mov	r2, r0
 8000da4:	4b49      	ldr	r3, [pc, #292]	; (8000ecc <DpAppl_ProfibusMain+0x64c>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d934      	bls.n	8000e1c <DpAppl_ProfibusMain+0x59c>
            print_vpc3_registers();
 8000db2:	f004 fcb7 	bl	8005724 <print_vpc3_registers>
            printf("==============================================\r\n");
 8000db6:	4846      	ldr	r0, [pc, #280]	; (8000ed0 <DpAppl_ProfibusMain+0x650>)
 8000db8:	f008 f816 	bl	8008de8 <puts>
            print_vpc3_state();
 8000dbc:	f004 fd2e 	bl	800581c <print_vpc3_state>
            printf("==============================================\r\n");
 8000dc0:	4843      	ldr	r0, [pc, #268]	; (8000ed0 <DpAppl_ProfibusMain+0x650>)
 8000dc2:	f008 f811 	bl	8008de8 <puts>
            
            // DEBUG: Diagnóstico del modo de memoria del ASIC
            static uint8_t memory_mode_diagnosed = 0;
            if (!memory_mode_diagnosed) {
 8000dc6:	4b43      	ldr	r3, [pc, #268]	; (8000ed4 <DpAppl_ProfibusMain+0x654>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d107      	bne.n	8000dde <DpAppl_ProfibusMain+0x55e>
                VPC3_DiagnoseMemoryMode();
 8000dce:	f003 f9f9 	bl	80041c4 <VPC3_DiagnoseMemoryMode>
                memory_mode_diagnosed = 1;
 8000dd2:	4b40      	ldr	r3, [pc, #256]	; (8000ed4 <DpAppl_ProfibusMain+0x654>)
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	701a      	strb	r2, [r3, #0]
                printf("DEBUG: [ProfibusMain] Diagnóstico de modo de memoria completado\r\n");
 8000dd8:	483f      	ldr	r0, [pc, #252]	; (8000ed8 <DpAppl_ProfibusMain+0x658>)
 8000dda:	f008 f805 	bl	8008de8 <puts>
            }
            
            // DEBUG: Monitoreo específico de MODE_REG_2
            uint8_t current_mode_reg2 = VPC3_GetModeReg2Shadow();  // write-only, use shadow
 8000dde:	f004 ff31 	bl	8005c44 <VPC3_GetModeReg2Shadow>
 8000de2:	4603      	mov	r3, r0
 8000de4:	713b      	strb	r3, [r7, #4]
            static uint8_t last_mode_reg2 = 0xFF;
            if (current_mode_reg2 != last_mode_reg2) {
 8000de6:	4b3d      	ldr	r3, [pc, #244]	; (8000edc <DpAppl_ProfibusMain+0x65c>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	793a      	ldrb	r2, [r7, #4]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d010      	beq.n	8000e12 <DpAppl_ProfibusMain+0x592>
                printf("DEBUG: [MODE_REG2_MONITOR] ⚠️ MODE_REG_2 cambió de 0x%02X a 0x%02X (esperado: 0x05)\r\n", 
 8000df0:	4b3a      	ldr	r3, [pc, #232]	; (8000edc <DpAppl_ProfibusMain+0x65c>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	4619      	mov	r1, r3
 8000df6:	793b      	ldrb	r3, [r7, #4]
 8000df8:	461a      	mov	r2, r3
 8000dfa:	4839      	ldr	r0, [pc, #228]	; (8000ee0 <DpAppl_ProfibusMain+0x660>)
 8000dfc:	f007 ff58 	bl	8008cb0 <iprintf>
                       last_mode_reg2, current_mode_reg2);
                if (current_mode_reg2 != 0x05) {
 8000e00:	793b      	ldrb	r3, [r7, #4]
 8000e02:	2b05      	cmp	r3, #5
 8000e04:	d002      	beq.n	8000e0c <DpAppl_ProfibusMain+0x58c>
                    printf("DEBUG: [MODE_REG2_MONITOR] 🚨 VALOR INCORRECTO DETECTADO - Esto causará LECTURAS ILEGALES\r\n");
 8000e06:	4837      	ldr	r0, [pc, #220]	; (8000ee4 <DpAppl_ProfibusMain+0x664>)
 8000e08:	f007 ffee 	bl	8008de8 <puts>
                }
                last_mode_reg2 = current_mode_reg2;
 8000e0c:	4a33      	ldr	r2, [pc, #204]	; (8000edc <DpAppl_ProfibusMain+0x65c>)
 8000e0e:	793b      	ldrb	r3, [r7, #4]
 8000e10:	7013      	strb	r3, [r2, #0]
            }
            
            last_debug = HAL_GetTick();
 8000e12:	f005 fbc7 	bl	80065a4 <HAL_GetTick>
 8000e16:	4603      	mov	r3, r0
 8000e18:	4a2c      	ldr	r2, [pc, #176]	; (8000ecc <DpAppl_ProfibusMain+0x64c>)
 8000e1a:	6013      	str	r3, [r2, #0]
        }

      // --- DEFENSIVE PROGRAMMING: Continuous segment pointer validation ---
      static uint32_t last_validation = 0;
      if (HAL_GetTick() - last_validation > 5000) { // Check every 5 seconds
 8000e1c:	f005 fbc2 	bl	80065a4 <HAL_GetTick>
 8000e20:	4602      	mov	r2, r0
 8000e22:	4b31      	ldr	r3, [pc, #196]	; (8000ee8 <DpAppl_ProfibusMain+0x668>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	1ad3      	subs	r3, r2, r3
 8000e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d911      	bls.n	8000e54 <DpAppl_ProfibusMain+0x5d4>
         DP_ERROR_CODE validationStatus = VPC3_ValidateSegmentPointers();
 8000e30:	f003 f90a 	bl	8004048 <VPC3_ValidateSegmentPointers>
 8000e34:	4603      	mov	r3, r0
 8000e36:	70fb      	strb	r3, [r7, #3]
         if (validationStatus == DP_NOK) {
 8000e38:	78fb      	ldrb	r3, [r7, #3]
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d105      	bne.n	8000e4a <DpAppl_ProfibusMain+0x5ca>
            printf("ERROR: [DpAppl_ProfibusMain] Segment pointer corruption detected during operation!\r\n");
 8000e3e:	482b      	ldr	r0, [pc, #172]	; (8000eec <DpAppl_ProfibusMain+0x66c>)
 8000e40:	f007 ffd2 	bl	8008de8 <puts>
            printf("ERROR: This may cause LECTURA ILEGAL errors. Consider ASIC reset.\r\n");
 8000e44:	482a      	ldr	r0, [pc, #168]	; (8000ef0 <DpAppl_ProfibusMain+0x670>)
 8000e46:	f007 ffcf 	bl	8008de8 <puts>
         }
         last_validation = HAL_GetTick();
 8000e4a:	f005 fbab 	bl	80065a4 <HAL_GetTick>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	4a25      	ldr	r2, [pc, #148]	; (8000ee8 <DpAppl_ProfibusMain+0x668>)
 8000e52:	6013      	str	r3, [r2, #0]
      }

      // --- CRITICAL: MODE_REG_2 monitoring and recovery ---
      static uint32_t last_mode_monitor = 0;
      if (HAL_GetTick() - last_mode_monitor > 1000) { // Check every second
 8000e54:	f005 fba6 	bl	80065a4 <HAL_GetTick>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	4b26      	ldr	r3, [pc, #152]	; (8000ef4 <DpAppl_ProfibusMain+0x674>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e64:	d955      	bls.n	8000f12 <DpAppl_ProfibusMain+0x692>
         uint8_t monitor_result = VPC3_MonitorAndRecoverModeReg2();
 8000e66:	f003 f893 	bl	8003f90 <VPC3_MonitorAndRecoverModeReg2>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	70bb      	strb	r3, [r7, #2]
         if (monitor_result == 1) {
 8000e6e:	78bb      	ldrb	r3, [r7, #2]
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d143      	bne.n	8000efc <DpAppl_ProfibusMain+0x67c>
            printf("INFO: [DpAppl_ProfibusMain] MODE_REG_2 was automatically recovered\r\n");
 8000e74:	4820      	ldr	r0, [pc, #128]	; (8000ef8 <DpAppl_ProfibusMain+0x678>)
 8000e76:	f007 ffb7 	bl	8008de8 <puts>
 8000e7a:	e045      	b.n	8000f08 <DpAppl_ProfibusMain+0x688>
 8000e7c:	20000000 	.word	0x20000000
 8000e80:	0800a3c4 	.word	0x0800a3c4
 8000e84:	0800a418 	.word	0x0800a418
 8000e88:	0800a458 	.word	0x0800a458
 8000e8c:	0800a494 	.word	0x0800a494
 8000e90:	20000198 	.word	0x20000198
 8000e94:	200000ac 	.word	0x200000ac
 8000e98:	0800a4e0 	.word	0x0800a4e0
 8000e9c:	0800a524 	.word	0x0800a524
 8000ea0:	20000144 	.word	0x20000144
 8000ea4:	200001c8 	.word	0x200001c8
 8000ea8:	0800a56c 	.word	0x0800a56c
 8000eac:	0800a5c0 	.word	0x0800a5c0
 8000eb0:	0800a5f8 	.word	0x0800a5f8
 8000eb4:	0800a648 	.word	0x0800a648
 8000eb8:	20000007 	.word	0x20000007
 8000ebc:	20000008 	.word	0x20000008
 8000ec0:	0800a694 	.word	0x0800a694
 8000ec4:	0800a700 	.word	0x0800a700
 8000ec8:	0800a754 	.word	0x0800a754
 8000ecc:	200000b0 	.word	0x200000b0
 8000ed0:	0800a7a0 	.word	0x0800a7a0
 8000ed4:	200000b4 	.word	0x200000b4
 8000ed8:	0800a7d0 	.word	0x0800a7d0
 8000edc:	20000009 	.word	0x20000009
 8000ee0:	0800a814 	.word	0x0800a814
 8000ee4:	0800a870 	.word	0x0800a870
 8000ee8:	200000b8 	.word	0x200000b8
 8000eec:	0800a8d0 	.word	0x0800a8d0
 8000ef0:	0800a924 	.word	0x0800a924
 8000ef4:	200000bc 	.word	0x200000bc
 8000ef8:	0800a968 	.word	0x0800a968
         } else if (monitor_result == 2) {
 8000efc:	78bb      	ldrb	r3, [r7, #2]
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	d102      	bne.n	8000f08 <DpAppl_ProfibusMain+0x688>
            printf("ERROR: [DpAppl_ProfibusMain] MODE_REG_2 recovery failed - this may cause LECTURA ILEGAL errors\r\n");
 8000f02:	482a      	ldr	r0, [pc, #168]	; (8000fac <DpAppl_ProfibusMain+0x72c>)
 8000f04:	f007 ff70 	bl	8008de8 <puts>
         }
         last_mode_monitor = HAL_GetTick();
 8000f08:	f005 fb4c 	bl	80065a4 <HAL_GetTick>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	4a28      	ldr	r2, [pc, #160]	; (8000fb0 <DpAppl_ProfibusMain+0x730>)
 8000f10:	6013      	str	r3, [r2, #0]
      }

      // --- Continuous MODE_REG_2 monitoring ---
      static uint32_t last_mode_check = 0;
      if (HAL_GetTick() - last_mode_check > 1000) { // Check every second
 8000f12:	f005 fb47 	bl	80065a4 <HAL_GetTick>
 8000f16:	4602      	mov	r2, r0
 8000f18:	4b26      	ldr	r3, [pc, #152]	; (8000fb4 <DpAppl_ProfibusMain+0x734>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f22:	d910      	bls.n	8000f46 <DpAppl_ProfibusMain+0x6c6>
        uint8_t mode_reg2 = VPC3_GetModeReg2Shadow();
 8000f24:	f004 fe8e 	bl	8005c44 <VPC3_GetModeReg2Shadow>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	707b      	strb	r3, [r7, #1]
         if (mode_reg2 != 0x05) {
 8000f2c:	787b      	ldrb	r3, [r7, #1]
 8000f2e:	2b05      	cmp	r3, #5
 8000f30:	d004      	beq.n	8000f3c <DpAppl_ProfibusMain+0x6bc>
            printf("WARNING: [DpAppl_ProfibusMain] MODE_REG_2 instability detected: 0x%02X (expected 0x05)\r\n", mode_reg2);
 8000f32:	787b      	ldrb	r3, [r7, #1]
 8000f34:	4619      	mov	r1, r3
 8000f36:	4820      	ldr	r0, [pc, #128]	; (8000fb8 <DpAppl_ProfibusMain+0x738>)
 8000f38:	f007 feba 	bl	8008cb0 <iprintf>
         }
         last_mode_check = HAL_GetTick();
 8000f3c:	f005 fb32 	bl	80065a4 <HAL_GetTick>
 8000f40:	4603      	mov	r3, r0
 8000f42:	4a1c      	ldr	r2, [pc, #112]	; (8000fb4 <DpAppl_ProfibusMain+0x734>)
 8000f44:	6013      	str	r3, [r2, #0]
      // --- Adaptive MODE_REG_2 monitoring - temporarily disabled to prevent initialization hangs ---
      // VPC3_AdaptiveModeReg2Monitor();

      // --- Polling de eventos VPC3+ ---
      printf("🔍 [ProfibusMain] ANTES de llamar dp_isr - STATUS_L=0x%02X, STATUS_H=0x%02X\r\n", 
             VPC3_GET_STATUS_L(), VPC3_GET_STATUS_H());
 8000f46:	4b1d      	ldr	r3, [pc, #116]	; (8000fbc <DpAppl_ProfibusMain+0x73c>)
 8000f48:	881b      	ldrh	r3, [r3, #0]
 8000f4a:	3304      	adds	r3, #4
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f004 ffce 	bl	8005ef0 <Vpc3Read>
 8000f54:	4603      	mov	r3, r0
      printf("🔍 [ProfibusMain] ANTES de llamar dp_isr - STATUS_L=0x%02X, STATUS_H=0x%02X\r\n", 
 8000f56:	461c      	mov	r4, r3
             VPC3_GET_STATUS_L(), VPC3_GET_STATUS_H());
 8000f58:	4b18      	ldr	r3, [pc, #96]	; (8000fbc <DpAppl_ProfibusMain+0x73c>)
 8000f5a:	881b      	ldrh	r3, [r3, #0]
 8000f5c:	3305      	adds	r3, #5
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	4618      	mov	r0, r3
 8000f62:	f004 ffc5 	bl	8005ef0 <Vpc3Read>
 8000f66:	4603      	mov	r3, r0
      printf("🔍 [ProfibusMain] ANTES de llamar dp_isr - STATUS_L=0x%02X, STATUS_H=0x%02X\r\n", 
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4621      	mov	r1, r4
 8000f6c:	4814      	ldr	r0, [pc, #80]	; (8000fc0 <DpAppl_ProfibusMain+0x740>)
 8000f6e:	f007 fe9f 	bl	8008cb0 <iprintf>
      
      dp_isr();
 8000f72:	f003 ff93 	bl	8004e9c <dp_isr>
      
      printf("🔍 [ProfibusMain] DESPUÉS de llamar dp_isr - STATUS_L=0x%02X, STATUS_H=0x%02X\r\n", 
             VPC3_GET_STATUS_L(), VPC3_GET_STATUS_H());
 8000f76:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <DpAppl_ProfibusMain+0x73c>)
 8000f78:	881b      	ldrh	r3, [r3, #0]
 8000f7a:	3304      	adds	r3, #4
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f004 ffb6 	bl	8005ef0 <Vpc3Read>
 8000f84:	4603      	mov	r3, r0
      printf("🔍 [ProfibusMain] DESPUÉS de llamar dp_isr - STATUS_L=0x%02X, STATUS_H=0x%02X\r\n", 
 8000f86:	461c      	mov	r4, r3
             VPC3_GET_STATUS_L(), VPC3_GET_STATUS_H());
 8000f88:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <DpAppl_ProfibusMain+0x73c>)
 8000f8a:	881b      	ldrh	r3, [r3, #0]
 8000f8c:	3305      	adds	r3, #5
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	4618      	mov	r0, r3
 8000f92:	f004 ffad 	bl	8005ef0 <Vpc3Read>
 8000f96:	4603      	mov	r3, r0
      printf("🔍 [ProfibusMain] DESPUÉS de llamar dp_isr - STATUS_L=0x%02X, STATUS_H=0x%02X\r\n", 
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4621      	mov	r1, r4
 8000f9c:	4809      	ldr	r0, [pc, #36]	; (8000fc4 <DpAppl_ProfibusMain+0x744>)
 8000f9e:	f007 fe87 	bl	8008cb0 <iprintf>


}//void DpAppl_ProfibusMain( void )
 8000fa2:	bf00      	nop
 8000fa4:	3714      	adds	r7, #20
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd90      	pop	{r4, r7, pc}
 8000faa:	bf00      	nop
 8000fac:	0800a9ac 	.word	0x0800a9ac
 8000fb0:	200000bc 	.word	0x200000bc
 8000fb4:	200000c0 	.word	0x200000c0
 8000fb8:	0800aa0c 	.word	0x0800aa0c
 8000fbc:	20000144 	.word	0x20000144
 8000fc0:	0800aa68 	.word	0x0800aa68
 8000fc4:	0800aab8 	.word	0x0800aab8

08000fc8 <DpAppl_FatalError>:

/*---------------------------------------------------------------------------*/
/* function: DpAppl_FatalError                                               */
/*---------------------------------------------------------------------------*/
void DpAppl_FatalError( DP_ERROR_FILE bFile, uint16_t wLine, VPC3_ERRCB_PTR sVpc3Error )
{
 8000fc8:	b590      	push	{r4, r7, lr}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	603a      	str	r2, [r7, #0]
 8000fd2:	71fb      	strb	r3, [r7, #7]
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	80bb      	strh	r3, [r7, #4]
   // Debug prints to identify the fatal error
   printf("\r\n=== FATAL ERROR DETECTED ===\r\n");
 8000fd8:	4823      	ldr	r0, [pc, #140]	; (8001068 <DpAppl_FatalError+0xa0>)
 8000fda:	f007 ff05 	bl	8008de8 <puts>
   printf("DEBUG: [FATAL_ERROR] Context - Current STATUS_L: 0x%02X, STATUS_H: 0x%02X\n", 
          VPC3_GET_STATUS_L(), VPC3_GET_STATUS_H());
 8000fde:	4b23      	ldr	r3, [pc, #140]	; (800106c <DpAppl_FatalError+0xa4>)
 8000fe0:	881b      	ldrh	r3, [r3, #0]
 8000fe2:	3304      	adds	r3, #4
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f004 ff82 	bl	8005ef0 <Vpc3Read>
 8000fec:	4603      	mov	r3, r0
   printf("DEBUG: [FATAL_ERROR] Context - Current STATUS_L: 0x%02X, STATUS_H: 0x%02X\n", 
 8000fee:	461c      	mov	r4, r3
          VPC3_GET_STATUS_L(), VPC3_GET_STATUS_H());
 8000ff0:	4b1e      	ldr	r3, [pc, #120]	; (800106c <DpAppl_FatalError+0xa4>)
 8000ff2:	881b      	ldrh	r3, [r3, #0]
 8000ff4:	3305      	adds	r3, #5
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f004 ff79 	bl	8005ef0 <Vpc3Read>
 8000ffe:	4603      	mov	r3, r0
   printf("DEBUG: [FATAL_ERROR] Context - Current STATUS_L: 0x%02X, STATUS_H: 0x%02X\n", 
 8001000:	461a      	mov	r2, r3
 8001002:	4621      	mov	r1, r4
 8001004:	481a      	ldr	r0, [pc, #104]	; (8001070 <DpAppl_FatalError+0xa8>)
 8001006:	f007 fe53 	bl	8008cb0 <iprintf>
   printf("File: %d\r\n", bFile);
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	4619      	mov	r1, r3
 800100e:	4819      	ldr	r0, [pc, #100]	; (8001074 <DpAppl_FatalError+0xac>)
 8001010:	f007 fe4e 	bl	8008cb0 <iprintf>
   printf("Line: %d\r\n", wLine);
 8001014:	88bb      	ldrh	r3, [r7, #4]
 8001016:	4619      	mov	r1, r3
 8001018:	4817      	ldr	r0, [pc, #92]	; (8001078 <DpAppl_FatalError+0xb0>)
 800101a:	f007 fe49 	bl	8008cb0 <iprintf>
   if (sVpc3Error != NULL) {
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d019      	beq.n	8001058 <DpAppl_FatalError+0x90>
      printf("Function: 0x%02X\r\n", sVpc3Error->bFunction);
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	4619      	mov	r1, r3
 800102a:	4814      	ldr	r0, [pc, #80]	; (800107c <DpAppl_FatalError+0xb4>)
 800102c:	f007 fe40 	bl	8008cb0 <iprintf>
      printf("Error_Code: 0x%02X\r\n", sVpc3Error->bErrorCode);
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	785b      	ldrb	r3, [r3, #1]
 8001034:	4619      	mov	r1, r3
 8001036:	4812      	ldr	r0, [pc, #72]	; (8001080 <DpAppl_FatalError+0xb8>)
 8001038:	f007 fe3a 	bl	8008cb0 <iprintf>
      printf("Detail: 0x%02X\r\n", sVpc3Error->bDetail);
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	885b      	ldrh	r3, [r3, #2]
 8001040:	b29b      	uxth	r3, r3
 8001042:	4619      	mov	r1, r3
 8001044:	480f      	ldr	r0, [pc, #60]	; (8001084 <DpAppl_FatalError+0xbc>)
 8001046:	f007 fe33 	bl	8008cb0 <iprintf>
      printf("cn_id: 0x%02X\r\n", sVpc3Error->bCnId);
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	791b      	ldrb	r3, [r3, #4]
 800104e:	4619      	mov	r1, r3
 8001050:	480d      	ldr	r0, [pc, #52]	; (8001088 <DpAppl_FatalError+0xc0>)
 8001052:	f007 fe2d 	bl	8008cb0 <iprintf>
 8001056:	e002      	b.n	800105e <DpAppl_FatalError+0x96>
   } else {
      printf("sVpc3Error is NULL\r\n");
 8001058:	480c      	ldr	r0, [pc, #48]	; (800108c <DpAppl_FatalError+0xc4>)
 800105a:	f007 fec5 	bl	8008de8 <puts>
   }
   printf("=== ENTERING INFINITE LOOP ===\r\n");
 800105e:	480c      	ldr	r0, [pc, #48]	; (8001090 <DpAppl_FatalError+0xc8>)
 8001060:	f007 fec2 	bl	8008de8 <puts>
         }
      }//while(1)

   #else

      while(1)
 8001064:	e7fe      	b.n	8001064 <DpAppl_FatalError+0x9c>
 8001066:	bf00      	nop
 8001068:	0800ac34 	.word	0x0800ac34
 800106c:	20000144 	.word	0x20000144
 8001070:	0800ac54 	.word	0x0800ac54
 8001074:	0800aca0 	.word	0x0800aca0
 8001078:	0800acac 	.word	0x0800acac
 800107c:	0800acb8 	.word	0x0800acb8
 8001080:	0800accc 	.word	0x0800accc
 8001084:	0800ace4 	.word	0x0800ace4
 8001088:	0800acf8 	.word	0x0800acf8
 800108c:	0800ad08 	.word	0x0800ad08
 8001090:	0800ad1c 	.word	0x0800ad1c

08001094 <DpAppl_MacReset>:
   \brief The function VPC3_Isr() or VPC3_Poll() calls this function if the
   VPC3+ has entered the offline mode (by setting the Go_Offline bit in Moderegister 1).
*/
#if( DP_TIMESTAMP == 0 )
void DpAppl_MacReset( void )
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
   //print_string("\r\nDpAppl_MacReset");
} /* void DpAppl_MacReset( void ) */
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
	...

080010a4 <DpAppl_IsrGoLeaveDataExchange>:
   DP-Statemachine has entered the DataEx-mode or has exited it.
   With the function VPC3_GET_DP_STATE() you can find out the state of VPC3+.
   \param[in] bDpState - state of PROFIBUS connection (WAIT_PRM,WAIT_CFG,DATA_EX)
*/
void DpAppl_IsrGoLeaveDataExchange( uint8_t bDpState )
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	71fb      	strb	r3, [r7, #7]
   printf("DEBUG: [IsrGoLeaveDataExchange] INICIO - bDpState=0x%02X, DATA_EX=0x%02X\n", bDpState, DATA_EX);
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	2202      	movs	r2, #2
 80010b2:	4619      	mov	r1, r3
 80010b4:	4841      	ldr	r0, [pc, #260]	; (80011bc <DpAppl_IsrGoLeaveDataExchange+0x118>)
 80010b6:	f007 fdfb 	bl	8008cb0 <iprintf>
   
   // --- Validación robusta del estado antes de resetear ---
   uint8_t status_l = VPC3_GET_STATUS_L();
 80010ba:	4b41      	ldr	r3, [pc, #260]	; (80011c0 <DpAppl_IsrGoLeaveDataExchange+0x11c>)
 80010bc:	881b      	ldrh	r3, [r3, #0]
 80010be:	3304      	adds	r3, #4
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	4618      	mov	r0, r3
 80010c4:	f004 ff14 	bl	8005ef0 <Vpc3Read>
 80010c8:	4603      	mov	r3, r0
 80010ca:	73fb      	strb	r3, [r7, #15]
   uint8_t status_h = VPC3_GET_STATUS_H();
 80010cc:	4b3c      	ldr	r3, [pc, #240]	; (80011c0 <DpAppl_IsrGoLeaveDataExchange+0x11c>)
 80010ce:	881b      	ldrh	r3, [r3, #0]
 80010d0:	3305      	adds	r3, #5
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	4618      	mov	r0, r3
 80010d6:	f004 ff0b 	bl	8005ef0 <Vpc3Read>
 80010da:	4603      	mov	r3, r0
 80010dc:	73bb      	strb	r3, [r7, #14]
   
   printf("DEBUG: [IsrGoLeaveDataExchange] STATUS_L=0x%02X, STATUS_H=0x%02X\n", status_l, status_h);
 80010de:	7bfb      	ldrb	r3, [r7, #15]
 80010e0:	7bba      	ldrb	r2, [r7, #14]
 80010e2:	4619      	mov	r1, r3
 80010e4:	4837      	ldr	r0, [pc, #220]	; (80011c4 <DpAppl_IsrGoLeaveDataExchange+0x120>)
 80010e6:	f007 fde3 	bl	8008cb0 <iprintf>
   
   // Verificar si realmente estamos en DATA_EX basándonos en STATUS_L
   uint8_t actual_dp_state = (status_l & 0x60) >> 5; // Extraer bits 5-6 de STATUS_L
 80010ea:	7bfb      	ldrb	r3, [r7, #15]
 80010ec:	115b      	asrs	r3, r3, #5
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	f003 0303 	and.w	r3, r3, #3
 80010f4:	737b      	strb	r3, [r7, #13]
   printf("DEBUG: [IsrGoLeaveDataExchange] Estado real calculado de STATUS_L: 0x%02X\n", actual_dp_state);
 80010f6:	7b7b      	ldrb	r3, [r7, #13]
 80010f8:	4619      	mov	r1, r3
 80010fa:	4833      	ldr	r0, [pc, #204]	; (80011c8 <DpAppl_IsrGoLeaveDataExchange+0x124>)
 80010fc:	f007 fdd8 	bl	8008cb0 <iprintf>
   
   // Solo resetear si hay una discrepancia real y el sistema no está funcionando
   if( bDpState != DATA_EX && actual_dp_state != DATA_EX )
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	2b02      	cmp	r3, #2
 8001104:	d021      	beq.n	800114a <DpAppl_IsrGoLeaveDataExchange+0xa6>
 8001106:	7b7b      	ldrb	r3, [r7, #13]
 8001108:	2b02      	cmp	r3, #2
 800110a:	d01e      	beq.n	800114a <DpAppl_IsrGoLeaveDataExchange+0xa6>
   {
      printf("DEBUG: [IsrGoLeaveDataExchange] ⚠️ Confirmado: bDpState=0x%02X != DATA_EX y actual_dp_state=0x%02X != DATA_EX\n", 
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	7b7a      	ldrb	r2, [r7, #13]
 8001110:	4619      	mov	r1, r3
 8001112:	482e      	ldr	r0, [pc, #184]	; (80011cc <DpAppl_IsrGoLeaveDataExchange+0x128>)
 8001114:	f007 fdcc 	bl	8008cb0 <iprintf>
             bDpState, actual_dp_state);
      printf("DEBUG: [IsrGoLeaveDataExchange] Reseteando estados - salida real de DATA_EX detectada\n");
 8001118:	482d      	ldr	r0, [pc, #180]	; (80011d0 <DpAppl_IsrGoLeaveDataExchange+0x12c>)
 800111a:	f007 fe65 	bl	8008de8 <puts>
      
      VPC3_ClrDpState( eDpStateApplReady | eDpStateRun );
 800111e:	4b2d      	ldr	r3, [pc, #180]	; (80011d4 <DpAppl_IsrGoLeaveDataExchange+0x130>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	781a      	ldrb	r2, [r3, #0]
 8001124:	4b2b      	ldr	r3, [pc, #172]	; (80011d4 <DpAppl_IsrGoLeaveDataExchange+0x130>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f022 0206 	bic.w	r2, r2, #6
 800112c:	b2d2      	uxtb	r2, r2
 800112e:	701a      	strb	r2, [r3, #0]
      VPC3_SetDpState( eDpStateInit );
 8001130:	4b28      	ldr	r3, [pc, #160]	; (80011d4 <DpAppl_IsrGoLeaveDataExchange+0x130>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	781a      	ldrb	r2, [r3, #0]
 8001136:	4b27      	ldr	r3, [pc, #156]	; (80011d4 <DpAppl_IsrGoLeaveDataExchange+0x130>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f042 0201 	orr.w	r2, r2, #1
 800113e:	b2d2      	uxtb	r2, r2
 8001140:	701a      	strb	r2, [r3, #0]
      printf("DEBUG: [IsrGoLeaveDataExchange] Estados reseteados - esto puede causar OFFLINE\n");
 8001142:	4825      	ldr	r0, [pc, #148]	; (80011d8 <DpAppl_IsrGoLeaveDataExchange+0x134>)
 8001144:	f007 fe50 	bl	8008de8 <puts>
 8001148:	e031      	b.n	80011ae <DpAppl_IsrGoLeaveDataExchange+0x10a>
   } 
   else if( bDpState != DATA_EX && actual_dp_state == DATA_EX )
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	2b02      	cmp	r3, #2
 800114e:	d01b      	beq.n	8001188 <DpAppl_IsrGoLeaveDataExchange+0xe4>
 8001150:	7b7b      	ldrb	r3, [r7, #13]
 8001152:	2b02      	cmp	r3, #2
 8001154:	d118      	bne.n	8001188 <DpAppl_IsrGoLeaveDataExchange+0xe4>
   {
      printf("DEBUG: [IsrGoLeaveDataExchange] ⚠️ bDpState=0x%02X != DATA_EX pero actual_dp_state=0x%02X == DATA_EX\n", 
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	7b7a      	ldrb	r2, [r7, #13]
 800115a:	4619      	mov	r1, r3
 800115c:	481f      	ldr	r0, [pc, #124]	; (80011dc <DpAppl_IsrGoLeaveDataExchange+0x138>)
 800115e:	f007 fda7 	bl	8008cb0 <iprintf>
             bDpState, actual_dp_state);
      printf("DEBUG: [IsrGoLeaveDataExchange] ⚠️ Posible corrupción de MODE_REG_2 - NO reseteando estados para mantener comunicación\n");
 8001162:	481f      	ldr	r0, [pc, #124]	; (80011e0 <DpAppl_IsrGoLeaveDataExchange+0x13c>)
 8001164:	f007 fe40 	bl	8008de8 <puts>
      printf("DEBUG: [IsrGoLeaveDataExchange] ⚠️ Intentando recuperar MODE_REG_2 sin resetear estados...\n");
 8001168:	481e      	ldr	r0, [pc, #120]	; (80011e4 <DpAppl_IsrGoLeaveDataExchange+0x140>)
 800116a:	f007 fe3d 	bl	8008de8 <puts>
      
      // Intentar recuperar MODE_REG_2 sin resetear estados
      if (VPC3_ForceModeReg2() == 0) {
 800116e:	f002 feb5 	bl	8003edc <VPC3_ForceModeReg2>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d103      	bne.n	8001180 <DpAppl_IsrGoLeaveDataExchange+0xdc>
         printf("DEBUG: [IsrGoLeaveDataExchange] ✅ MODE_REG_2 recuperado sin resetear estados\n");
 8001178:	481b      	ldr	r0, [pc, #108]	; (80011e8 <DpAppl_IsrGoLeaveDataExchange+0x144>)
 800117a:	f007 fe35 	bl	8008de8 <puts>
      if (VPC3_ForceModeReg2() == 0) {
 800117e:	e016      	b.n	80011ae <DpAppl_IsrGoLeaveDataExchange+0x10a>
      } else {
         printf("DEBUG: [IsrGoLeaveDataExchange] ❌ No se pudo recuperar MODE_REG_2, pero manteniendo comunicación\n");
 8001180:	481a      	ldr	r0, [pc, #104]	; (80011ec <DpAppl_IsrGoLeaveDataExchange+0x148>)
 8001182:	f007 fe31 	bl	8008de8 <puts>
      if (VPC3_ForceModeReg2() == 0) {
 8001186:	e012      	b.n	80011ae <DpAppl_IsrGoLeaveDataExchange+0x10a>
      }
   }
   else if( bDpState == DATA_EX && actual_dp_state == DATA_EX )
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	2b02      	cmp	r3, #2
 800118c:	d106      	bne.n	800119c <DpAppl_IsrGoLeaveDataExchange+0xf8>
 800118e:	7b7b      	ldrb	r3, [r7, #13]
 8001190:	2b02      	cmp	r3, #2
 8001192:	d103      	bne.n	800119c <DpAppl_IsrGoLeaveDataExchange+0xf8>
   {
      printf("DEBUG: [IsrGoLeaveDataExchange] ✅ OK: bDpState == DATA_EX y actual_dp_state == DATA_EX - comunicación estable\n");
 8001194:	4816      	ldr	r0, [pc, #88]	; (80011f0 <DpAppl_IsrGoLeaveDataExchange+0x14c>)
 8001196:	f007 fe27 	bl	8008de8 <puts>
 800119a:	e008      	b.n	80011ae <DpAppl_IsrGoLeaveDataExchange+0x10a>
   }
   else
   {
      printf("DEBUG: [IsrGoLeaveDataExchange] ⚠️ Estado inconsistente: bDpState=0x%02X, actual_dp_state=0x%02X\n", 
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	7b7a      	ldrb	r2, [r7, #13]
 80011a0:	4619      	mov	r1, r3
 80011a2:	4814      	ldr	r0, [pc, #80]	; (80011f4 <DpAppl_IsrGoLeaveDataExchange+0x150>)
 80011a4:	f007 fd84 	bl	8008cb0 <iprintf>
             bDpState, actual_dp_state);
      printf("DEBUG: [IsrGoLeaveDataExchange] ⚠️ Manteniendo estados actuales para evitar interrupciones\n");
 80011a8:	4813      	ldr	r0, [pc, #76]	; (80011f8 <DpAppl_IsrGoLeaveDataExchange+0x154>)
 80011aa:	f007 fe1d 	bl	8008de8 <puts>
   }
   
   printf("DEBUG: [IsrGoLeaveDataExchange] FIN\n");
 80011ae:	4813      	ldr	r0, [pc, #76]	; (80011fc <DpAppl_IsrGoLeaveDataExchange+0x158>)
 80011b0:	f007 fe1a 	bl	8008de8 <puts>
}//void DpAppl_IsrGoLeaveDataExchange( uint8_t bDpState )
 80011b4:	bf00      	nop
 80011b6:	3710      	adds	r7, #16
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	0800ad3c 	.word	0x0800ad3c
 80011c0:	20000144 	.word	0x20000144
 80011c4:	0800ad88 	.word	0x0800ad88
 80011c8:	0800adcc 	.word	0x0800adcc
 80011cc:	0800ae18 	.word	0x0800ae18
 80011d0:	0800ae8c 	.word	0x0800ae8c
 80011d4:	20000000 	.word	0x20000000
 80011d8:	0800aee4 	.word	0x0800aee4
 80011dc:	0800af34 	.word	0x0800af34
 80011e0:	0800afa0 	.word	0x0800afa0
 80011e4:	0800b020 	.word	0x0800b020
 80011e8:	0800b080 	.word	0x0800b080
 80011ec:	0800b0d0 	.word	0x0800b0d0
 80011f0:	0800b134 	.word	0x0800b134
 80011f4:	0800b1a8 	.word	0x0800b1a8
 80011f8:	0800b210 	.word	0x0800b210
 80011fc:	0800b270 	.word	0x0800b270

08001200 <DpAppl_IsrDxOut>:
   has received a DataExchange message and has made the new output data
   available in the N-buffer. In the case of Power_On or Leave_Master, the
   VPC3+ clears the content of the buffer, and generates this event also.
*/
void DpAppl_IsrDxOut( void )
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
   printf("DEBUG: [DpAppl_IsrDxOut] INICIO - Configurando evento IoOut\n");
 8001204:	4805      	ldr	r0, [pc, #20]	; (800121c <DpAppl_IsrDxOut+0x1c>)
 8001206:	f007 fdef 	bl	8008de8 <puts>
   DpAppl_SetApplEvent( eDpApplEv_IoOut );
 800120a:	2020      	movs	r0, #32
 800120c:	f7ff f9d8 	bl	80005c0 <DpAppl_SetApplEvent>
   printf("DEBUG: [DpAppl_IsrDxOut] FIN - Evento IoOut configurado\n");
 8001210:	4803      	ldr	r0, [pc, #12]	; (8001220 <DpAppl_IsrDxOut+0x20>)
 8001212:	f007 fde9 	bl	8008de8 <puts>
}//void DpAppl_IsrDxOut( void )
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	0800b294 	.word	0x0800b294
 8001220:	0800b2d0 	.word	0x0800b2d0

08001224 <DpAppl_IsrNewWdDpTimeout>:
   The communication between master and slave is time controlled, every time you're
   disconnecting the PROFIBUS master or you're disconnecting the PROFIBUS cable you'll
   get this event.
*/
void DpAppl_IsrNewWdDpTimeout( void )
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
    //not used in our application
}//void DpAppl_IsrNewWdDpTimeout( void )
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr

08001232 <DpAppl_IsrBaudrateDetect>:
   \brief The function VPC3_Isr() or VPC3_Poll() calls this function if the VPC3+
   has exited the Baud_Search mode and has found a baudrate.
   With the macro VPC3_GET_BAUDRATE() you can detect the baudrate.
*/
void DpAppl_IsrBaudrateDetect( void )
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0
   //not used in our application
}//void DpAppl_IsrBaudrateDetect( void )
 8001236:	bf00      	nop
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <DpAppl_IsrNewGlobalControlCommand>:
   has received a Global_Control message. The GC_Command_Byte can be read out
   with the macro VPC3_GET_GC_COMMAND().
   \param[in] bGcCommand - global control command @see VPC3_GET_GC_COMMAND()
*/
void DpAppl_IsrNewGlobalControlCommand( uint8_t bGcCommand )
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	71fb      	strb	r3, [r7, #7]
   //not used in our application
   bGcCommand = bGcCommand;   //avoid compiler warning
}//void DpAppl_IsrNewGlobalControlCommand( uint8_t bGcCommand )
 800124a:	bf00      	nop
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <DpAppl_IsrNewSetSlaveAddress>:
   has received a Set_Slave_Address message and made the data available in the SSA
   buffer.
  \param[in] psSsa - pointer to set slave address structure
*/
void DpAppl_IsrNewSetSlaveAddress( MEM_STRUC_SSA_BLOCK_PTR psSsa )
{
 8001256:	b480      	push	{r7}
 8001258:	b083      	sub	sp, #12
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
   print_hexbyte(psSsa->bTsAddr);
   print_hexbyte(psSsa->bNoAddressChanged);
   print_hexbyte(psSsa->bIdentHigh);
   print_hexbyte(psSsa->bIdentLow);
*/
}//void DpAppl_IsrNewSetSlaveAddress( MEM_STRUC_SSA_BLOCK_PTR psSsa )
 800125e:	bf00      	nop
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <DpAppl_DisableInterruptVPC3Channel1>:
/*---------------------------------------------------------------------------*/
/*!
  \brief Disable interrupt for VPC3+ channel 1.
*/
void DpAppl_DisableInterruptVPC3Channel1(void)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	af00      	add	r7, sp, #0
   // Disable external interrupt for VPC3+ INT pin during critical sections
   HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800126e:	2017      	movs	r0, #23
 8001270:	f005 faf1 	bl	8006856 <HAL_NVIC_DisableIRQ>
}
 8001274:	bf00      	nop
 8001276:	bd80      	pop	{r7, pc}

08001278 <DpAppl_EnableInterruptVPC3Channel1>:
/*---------------------------------------------------------------------------*/
/*!
  \brief Enable interrupt for VPC3+ channel 1.
*/
void DpAppl_EnableInterruptVPC3Channel1(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
   // Enable external interrupt for VPC3+ INT pin
   HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800127c:	2017      	movs	r0, #23
 800127e:	f005 fadc 	bl	800683a <HAL_NVIC_EnableIRQ>
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <leer_feedback>:
/*!
  \brief Read feedback value from hardware (ADC, encoder, etc.).
  \retval 16-bit feedback value
*/
uint16_t leer_feedback(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
   // This is a placeholder implementation for reading feedback data
   // Replace this with actual hardware reading (ADC, encoder, sensor, etc.)
   
   // For demonstration, return a simple counter that changes over time
   static uint16_t counter = 0;
   counter++;
 800128c:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <leer_feedback+0x20>)
 800128e:	881b      	ldrh	r3, [r3, #0]
 8001290:	3301      	adds	r3, #1
 8001292:	b29a      	uxth	r2, r3
 8001294:	4b04      	ldr	r3, [pc, #16]	; (80012a8 <leer_feedback+0x20>)
 8001296:	801a      	strh	r2, [r3, #0]
   return counter;
 8001298:	4b03      	ldr	r3, [pc, #12]	; (80012a8 <leer_feedback+0x20>)
 800129a:	881b      	ldrh	r3, [r3, #0]
   
   // Example ADC reading (uncomment and adapt as needed):
   // HAL_ADC_Start(&hadc1);
   // HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
   // return (uint16_t)HAL_ADC_GetValue(&hadc1);
}
 800129c:	4618      	mov	r0, r3
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	200000c4 	.word	0x200000c4

080012ac <DpCfg_Init>:
/*---------------------------------------------------------------------------*/
/*!
  \brief Init profibus configuration.
*/
void DpCfg_Init( void )
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
   //todo:
   //insert your real configuration data here
   sDpAppl.sCfgData.bLength = DpApplCfgDataLength; // length of configuration data
 80012b2:	4b14      	ldr	r3, [pc, #80]	; (8001304 <DpCfg_Init+0x58>)
 80012b4:	2202      	movs	r2, #2
 80012b6:	709a      	strb	r2, [r3, #2]
   memcpy( &sDpAppl.sCfgData.abData[0], &DpApplDefCfg[0], sDpAppl.sCfgData.bLength );
 80012b8:	4b12      	ldr	r3, [pc, #72]	; (8001304 <DpCfg_Init+0x58>)
 80012ba:	789b      	ldrb	r3, [r3, #2]
 80012bc:	461a      	mov	r2, r3
 80012be:	4912      	ldr	r1, [pc, #72]	; (8001308 <DpCfg_Init+0x5c>)
 80012c0:	4812      	ldr	r0, [pc, #72]	; (800130c <DpCfg_Init+0x60>)
 80012c2:	f007 fcdf 	bl	8008c84 <memcpy>
   printf("DEBUG: [DpCfg_Init] sDpAppl.sCfgData.abData inicializado: ");
 80012c6:	4812      	ldr	r0, [pc, #72]	; (8001310 <DpCfg_Init+0x64>)
 80012c8:	f007 fcf2 	bl	8008cb0 <iprintf>
   for(int k=0; k<sDpAppl.sCfgData.bLength; k++) {
 80012cc:	2300      	movs	r3, #0
 80012ce:	607b      	str	r3, [r7, #4]
 80012d0:	e00b      	b.n	80012ea <DpCfg_Init+0x3e>
       printf("0x%02X ", sDpAppl.sCfgData.abData[k]);
 80012d2:	4a0c      	ldr	r2, [pc, #48]	; (8001304 <DpCfg_Init+0x58>)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4413      	add	r3, r2
 80012d8:	3303      	adds	r3, #3
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	4619      	mov	r1, r3
 80012de:	480d      	ldr	r0, [pc, #52]	; (8001314 <DpCfg_Init+0x68>)
 80012e0:	f007 fce6 	bl	8008cb0 <iprintf>
   for(int k=0; k<sDpAppl.sCfgData.bLength; k++) {
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	3301      	adds	r3, #1
 80012e8:	607b      	str	r3, [r7, #4]
 80012ea:	4b06      	ldr	r3, [pc, #24]	; (8001304 <DpCfg_Init+0x58>)
 80012ec:	789b      	ldrb	r3, [r3, #2]
 80012ee:	461a      	mov	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4293      	cmp	r3, r2
 80012f4:	dbed      	blt.n	80012d2 <DpCfg_Init+0x26>
   }
   printf("\r\n");
 80012f6:	4808      	ldr	r0, [pc, #32]	; (8001318 <DpCfg_Init+0x6c>)
 80012f8:	f007 fd76 	bl	8008de8 <puts>

}//void DpCfg_Init( void )
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	200001b8 	.word	0x200001b8
 8001308:	0801230c 	.word	0x0801230c
 800130c:	200001bb 	.word	0x200001bb
 8001310:	0800b308 	.word	0x0800b308
 8001314:	0800b344 	.word	0x0800b344
 8001318:	0800b34c 	.word	0x0800b34c

0800131c <DpCfg_ChkNewCfgData>:
 * @param[in] bCfgLength - length of configuration data
 *
 * @return see E_DP_CFG_ERROR @see E_DP_CFG_ERROR
 */
E_DP_CFG_ERROR DpCfg_ChkNewCfgData(MEM_UNSIGNED8_PTR pbCfgData, uint8_t bCfgLength)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08a      	sub	sp, #40	; 0x28
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	460b      	mov	r3, r1
 8001326:	70fb      	strb	r3, [r7, #3]
    // --- PASO 1: Copia local para evitar sobreescritura (Tu excelente idea) ---
    #define LOCAL_CFG_MAX 16 // Un tamaño máximo seguro para la copia local
    uint8_t localCfgBuffer[LOCAL_CFG_MAX];
    uint8_t localLen = (bCfgLength < LOCAL_CFG_MAX) ? bCfgLength : LOCAL_CFG_MAX;
 8001328:	78fb      	ldrb	r3, [r7, #3]
 800132a:	2b10      	cmp	r3, #16
 800132c:	bf28      	it	cs
 800132e:	2310      	movcs	r3, #16
 8001330:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    memcpy(localCfgBuffer, pbCfgData, localLen);
 8001334:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001338:	f107 030c 	add.w	r3, r7, #12
 800133c:	6879      	ldr	r1, [r7, #4]
 800133e:	4618      	mov	r0, r3
 8001340:	f007 fca0 	bl	8008c84 <memcpy>

    g_chk_cfg_flag = 1;
 8001344:	4b84      	ldr	r3, [pc, #528]	; (8001558 <DpCfg_ChkNewCfgData+0x23c>)
 8001346:	2201      	movs	r2, #1
 8001348:	701a      	strb	r2, [r3, #0]
    E_DP_CFG_ERROR eRetValue;
    uint8_t        bNrOfCheckModules;
    uint8_t        bRealCfgLength;
    uint8_t        i;
    MEM_UNSIGNED8_PTR pReceivedDataStart = localCfgBuffer; // Usar la copia local segura
 800134a:	f107 030c 	add.w	r3, r7, #12
 800134e:	623b      	str	r3, [r7, #32]

    // DEBUGGING: Imprime el contenido completo del buffer recibido (usando copia local)
    printf("DEBUG: Chk_Cfg recibido. Longitud: %d bytes. Contenido (copia local): ", bCfgLength);
 8001350:	78fb      	ldrb	r3, [r7, #3]
 8001352:	4619      	mov	r1, r3
 8001354:	4881      	ldr	r0, [pc, #516]	; (800155c <DpCfg_ChkNewCfgData+0x240>)
 8001356:	f007 fcab 	bl	8008cb0 <iprintf>
    for (i = 0; i < localLen; i++) {
 800135a:	2300      	movs	r3, #0
 800135c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001360:	e00d      	b.n	800137e <DpCfg_ChkNewCfgData+0x62>
        printf("0x%02X ", pReceivedDataStart[i]);
 8001362:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001366:	6a3a      	ldr	r2, [r7, #32]
 8001368:	4413      	add	r3, r2
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	4619      	mov	r1, r3
 800136e:	487c      	ldr	r0, [pc, #496]	; (8001560 <DpCfg_ChkNewCfgData+0x244>)
 8001370:	f007 fc9e 	bl	8008cb0 <iprintf>
    for (i = 0; i < localLen; i++) {
 8001374:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001378:	3301      	adds	r3, #1
 800137a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800137e:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001382:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001386:	429a      	cmp	r2, r3
 8001388:	d3eb      	bcc.n	8001362 <DpCfg_ChkNewCfgData+0x46>
    }
    printf("\r\n");
 800138a:	4876      	ldr	r0, [pc, #472]	; (8001564 <DpCfg_ChkNewCfgData+0x248>)
 800138c:	f007 fd2c 	bl	8008de8 <puts>

    bRealCfgLength = sSystem.bNrOfModules * eDpCfgEntryLength;
 8001390:	4b75      	ldr	r3, [pc, #468]	; (8001568 <DpCfg_ChkNewCfgData+0x24c>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	77fb      	strb	r3, [r7, #31]

    DpDiag_SetDefIdentRelDiag();
 8001396:	f000 fdc1 	bl	8001f1c <DpDiag_SetDefIdentRelDiag>
    DpDiag_SetDefModuleStatDiag();
 800139a:	f000 fe1b 	bl	8001fd4 <DpDiag_SetDefModuleStatDiag>

    bNrOfCheckModules = sSystem.bNrOfModules;
 800139e:	4b72      	ldr	r3, [pc, #456]	; (8001568 <DpCfg_ChkNewCfgData+0x24c>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    eRetValue = DP_CFG_OK;
 80013a6:	2300      	movs	r3, #0
 80013a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( bCfgLength != bRealCfgLength )
 80013ac:	78fa      	ldrb	r2, [r7, #3]
 80013ae:	7ffb      	ldrb	r3, [r7, #31]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d024      	beq.n	80013fe <DpCfg_ChkNewCfgData+0xe2>
    {
       if( bCfgLength < bRealCfgLength )
 80013b4:	78fa      	ldrb	r2, [r7, #3]
 80013b6:	7ffb      	ldrb	r3, [r7, #31]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d21d      	bcs.n	80013f8 <DpCfg_ChkNewCfgData+0xdc>
       {
          bNrOfCheckModules = ( bCfgLength / eDpCfgEntryLength );
 80013bc:	78fb      	ldrb	r3, [r7, #3]
 80013be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          for( i = bNrOfCheckModules; i < sSystem.bNrOfModules; i++ )
 80013c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80013c6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80013ca:	e00f      	b.n	80013ec <DpCfg_ChkNewCfgData+0xd0>
          {
             DpDiag_SetIdentRelDiagEntry( i );
 80013cc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80013d0:	4618      	mov	r0, r3
 80013d2:	f000 fdb5 	bl	8001f40 <DpDiag_SetIdentRelDiagEntry>
             DpDiag_SetModulStatusEntry( i, DIAG_MS_NO_MODULE );
 80013d6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80013da:	2103      	movs	r1, #3
 80013dc:	4618      	mov	r0, r3
 80013de:	f000 fe15 	bl	800200c <DpDiag_SetModulStatusEntry>
          for( i = bNrOfCheckModules; i < sSystem.bNrOfModules; i++ )
 80013e2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80013e6:	3301      	adds	r3, #1
 80013e8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80013ec:	4b5e      	ldr	r3, [pc, #376]	; (8001568 <DpCfg_ChkNewCfgData+0x24c>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d3e9      	bcc.n	80013cc <DpCfg_ChkNewCfgData+0xb0>
          }
       }
       eRetValue = DP_CFG_FAULT;
 80013f8:	2301      	movs	r3, #1
 80013fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    for( i = 0; i < bNrOfCheckModules; i++ )
 80013fe:	2300      	movs	r3, #0
 8001400:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001404:	e020      	b.n	8001448 <DpCfg_ChkNewCfgData+0x12c>
    {
       // Usa la copia local segura y accede por índice
       if( memcmp( &sDpAppl.sCfgData.abData[i*eDpCfgEntryLength], &pReceivedDataStart[i*eDpCfgEntryLength], eDpCfgEntryLength ) == 0 )
 8001406:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800140a:	4a58      	ldr	r2, [pc, #352]	; (800156c <DpCfg_ChkNewCfgData+0x250>)
 800140c:	4413      	add	r3, r2
 800140e:	3303      	adds	r3, #3
 8001410:	781a      	ldrb	r2, [r3, #0]
 8001412:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001416:	6a39      	ldr	r1, [r7, #32]
 8001418:	440b      	add	r3, r1
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	429a      	cmp	r2, r3
 800141e:	d10b      	bne.n	8001438 <DpCfg_ChkNewCfgData+0x11c>
       {
          DpDiag_ClrIdentRelDiagEntry( i );
 8001420:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001424:	4618      	mov	r0, r3
 8001426:	f000 fdaf 	bl	8001f88 <DpDiag_ClrIdentRelDiagEntry>
          DpDiag_SetModulStatusEntry( i, DIAG_MS_OK );
 800142a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800142e:	2100      	movs	r1, #0
 8001430:	4618      	mov	r0, r3
 8001432:	f000 fdeb 	bl	800200c <DpDiag_SetModulStatusEntry>
 8001436:	e002      	b.n	800143e <DpCfg_ChkNewCfgData+0x122>
       }
       else
       {
          eRetValue = DP_CFG_FAULT;
 8001438:	2301      	movs	r3, #1
 800143a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    for( i = 0; i < bNrOfCheckModules; i++ )
 800143e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001442:	3301      	adds	r3, #1
 8001444:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001448:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800144c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001450:	429a      	cmp	r2, r3
 8001452:	d3d8      	bcc.n	8001406 <DpCfg_ChkNewCfgData+0xea>
       }
    }

    if( ( eRetValue == DP_CFG_OK ) || ( eRetValue == DP_CFG_UPDATE ) )
 8001454:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001458:	2b00      	cmp	r3, #0
 800145a:	d003      	beq.n	8001464 <DpCfg_ChkNewCfgData+0x148>
 800145c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001460:	2b02      	cmp	r3, #2
 8001462:	d115      	bne.n	8001490 <DpCfg_ChkNewCfgData+0x174>
    {
       eRetValue = DpDiag_SetCfgOk( eRetValue );
 8001464:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001468:	4618      	mov	r0, r3
 800146a:	f000 fc99 	bl	8001da0 <DpDiag_SetCfgOk>
 800146e:	4603      	mov	r3, r0
 8001470:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
       if( eRetValue != DP_CFG_FAULT )
 8001474:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001478:	2b01      	cmp	r3, #1
 800147a:	d00b      	beq.n	8001494 <DpCfg_ChkNewCfgData+0x178>
       {
          VPC3_SetDpState( eDpStateCfgOkStatDiag );
 800147c:	4b3c      	ldr	r3, [pc, #240]	; (8001570 <DpCfg_ChkNewCfgData+0x254>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	781a      	ldrb	r2, [r3, #0]
 8001482:	4b3b      	ldr	r3, [pc, #236]	; (8001570 <DpCfg_ChkNewCfgData+0x254>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f042 0208 	orr.w	r2, r2, #8
 800148a:	b2d2      	uxtb	r2, r2
 800148c:	701a      	strb	r2, [r3, #0]
       if( eRetValue != DP_CFG_FAULT )
 800148e:	e001      	b.n	8001494 <DpCfg_ChkNewCfgData+0x178>
       }
    }
    else
    {
       DpDiag_SetCfgNotOk();
 8001490:	f000 fd0e 	bl	8001eb0 <DpDiag_SetCfgNotOk>
    }

    DpDiag_AlarmInit();
 8001494:	f000 f882 	bl	800159c <DpDiag_AlarmInit>

    if (eRetValue == DP_CFG_OK) {
 8001498:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800149c:	2b00      	cmp	r3, #0
 800149e:	d109      	bne.n	80014b4 <DpCfg_ChkNewCfgData+0x198>
        printf("EVENT: Chk_Cfg recibido y aceptado (DP_CFG_OK)\r\n");
 80014a0:	4834      	ldr	r0, [pc, #208]	; (8001574 <DpCfg_ChkNewCfgData+0x258>)
 80014a2:	f007 fca1 	bl	8008de8 <puts>
        printf("DEBUG: [ChkCfg] dentro del if OK eRetValue=%d\n", eRetValue);
 80014a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014aa:	4619      	mov	r1, r3
 80014ac:	4832      	ldr	r0, [pc, #200]	; (8001578 <DpCfg_ChkNewCfgData+0x25c>)
 80014ae:	f007 fbff 	bl	8008cb0 <iprintf>
 80014b2:	e026      	b.n	8001502 <DpCfg_ChkNewCfgData+0x1e6>
    } else if (eRetValue == DP_CFG_FAULT) {
 80014b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d115      	bne.n	80014e8 <DpCfg_ChkNewCfgData+0x1cc>
        printf("EVENT: Chk_Cfg recibido y RECHAZADO (DP_CFG_FAULT) - Longitud esperada: %d, recibida: %d\r\n", bRealCfgLength, bCfgLength);
 80014bc:	7ffb      	ldrb	r3, [r7, #31]
 80014be:	78fa      	ldrb	r2, [r7, #3]
 80014c0:	4619      	mov	r1, r3
 80014c2:	482e      	ldr	r0, [pc, #184]	; (800157c <DpCfg_ChkNewCfgData+0x260>)
 80014c4:	f007 fbf4 	bl	8008cb0 <iprintf>
        printf("DEBUG: [ChkCfg] bRealCfgLength=%d\n", bRealCfgLength);
 80014c8:	7ffb      	ldrb	r3, [r7, #31]
 80014ca:	4619      	mov	r1, r3
 80014cc:	482c      	ldr	r0, [pc, #176]	; (8001580 <DpCfg_ChkNewCfgData+0x264>)
 80014ce:	f007 fbef 	bl	8008cb0 <iprintf>
        printf("DEBUG: [ChkCfg] pbCfgData=%p\n", pbCfgData);
 80014d2:	6879      	ldr	r1, [r7, #4]
 80014d4:	482b      	ldr	r0, [pc, #172]	; (8001584 <DpCfg_ChkNewCfgData+0x268>)
 80014d6:	f007 fbeb 	bl	8008cb0 <iprintf>
        printf("DEBUG: [ChkCfg] dentro del if FAULT eRetValue=%d\n", eRetValue);
 80014da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014de:	4619      	mov	r1, r3
 80014e0:	4829      	ldr	r0, [pc, #164]	; (8001588 <DpCfg_ChkNewCfgData+0x26c>)
 80014e2:	f007 fbe5 	bl	8008cb0 <iprintf>
 80014e6:	e00c      	b.n	8001502 <DpCfg_ChkNewCfgData+0x1e6>
    } else if (eRetValue == DP_CFG_UPDATE) {
 80014e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d108      	bne.n	8001502 <DpCfg_ChkNewCfgData+0x1e6>
        printf("EVENT: Chk_Cfg requiere actualización (DP_CFG_UPDATE)\r\n");
 80014f0:	4826      	ldr	r0, [pc, #152]	; (800158c <DpCfg_ChkNewCfgData+0x270>)
 80014f2:	f007 fc79 	bl	8008de8 <puts>
        printf("DEBUG: [ChkCfg] dentro del if UPDATE eRetValue=%d\n", eRetValue);
 80014f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014fa:	4619      	mov	r1, r3
 80014fc:	4824      	ldr	r0, [pc, #144]	; (8001590 <DpCfg_ChkNewCfgData+0x274>)
 80014fe:	f007 fbd7 	bl	8008cb0 <iprintf>
    }

    // Imprime la configuración local esperada
    printf("DEBUG: Configuración esperada local (%d bytes): ", bRealCfgLength);
 8001502:	7ffb      	ldrb	r3, [r7, #31]
 8001504:	4619      	mov	r1, r3
 8001506:	4823      	ldr	r0, [pc, #140]	; (8001594 <DpCfg_ChkNewCfgData+0x278>)
 8001508:	f007 fbd2 	bl	8008cb0 <iprintf>
    for (i = 0; i < bRealCfgLength; i++) {
 800150c:	2300      	movs	r3, #0
 800150e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001512:	e00d      	b.n	8001530 <DpCfg_ChkNewCfgData+0x214>
        printf("0x%02X ", sDpAppl.sCfgData.abData[i]);
 8001514:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001518:	4a14      	ldr	r2, [pc, #80]	; (800156c <DpCfg_ChkNewCfgData+0x250>)
 800151a:	4413      	add	r3, r2
 800151c:	78db      	ldrb	r3, [r3, #3]
 800151e:	4619      	mov	r1, r3
 8001520:	480f      	ldr	r0, [pc, #60]	; (8001560 <DpCfg_ChkNewCfgData+0x244>)
 8001522:	f007 fbc5 	bl	8008cb0 <iprintf>
    for (i = 0; i < bRealCfgLength; i++) {
 8001526:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800152a:	3301      	adds	r3, #1
 800152c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001530:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001534:	7ffb      	ldrb	r3, [r7, #31]
 8001536:	429a      	cmp	r2, r3
 8001538:	d3ec      	bcc.n	8001514 <DpCfg_ChkNewCfgData+0x1f8>
    }
    printf("\r\n");
 800153a:	480a      	ldr	r0, [pc, #40]	; (8001564 <DpCfg_ChkNewCfgData+0x248>)
 800153c:	f007 fc54 	bl	8008de8 <puts>

    printf("DEBUG: [ChkCfg] Finalizando con eRetValue=%d\n", eRetValue);
 8001540:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001544:	4619      	mov	r1, r3
 8001546:	4814      	ldr	r0, [pc, #80]	; (8001598 <DpCfg_ChkNewCfgData+0x27c>)
 8001548:	f007 fbb2 	bl	8008cb0 <iprintf>
    return eRetValue;
 800154c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001550:	4618      	mov	r0, r3
 8001552:	3728      	adds	r7, #40	; 0x28
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	200000c6 	.word	0x200000c6
 800155c:	0800b350 	.word	0x0800b350
 8001560:	0800b344 	.word	0x0800b344
 8001564:	0800b34c 	.word	0x0800b34c
 8001568:	20000198 	.word	0x20000198
 800156c:	200001b8 	.word	0x200001b8
 8001570:	20000000 	.word	0x20000000
 8001574:	0800b398 	.word	0x0800b398
 8001578:	0800b3c8 	.word	0x0800b3c8
 800157c:	0800b3f8 	.word	0x0800b3f8
 8001580:	0800b454 	.word	0x0800b454
 8001584:	0800b478 	.word	0x0800b478
 8001588:	0800b498 	.word	0x0800b498
 800158c:	0800b4cc 	.word	0x0800b4cc
 8001590:	0800b504 	.word	0x0800b504
 8001594:	0800b538 	.word	0x0800b538
 8001598:	0800b56c 	.word	0x0800b56c

0800159c <DpDiag_AlarmInit>:
 * @brief Initializes user alarm structure.
 *
 * Set all values to zero.
 */
void DpDiag_AlarmInit( void )
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
   dpl_init_list__( &sDpAppl.dplDiagQueue );
 80015a0:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <DpDiag_AlarmInit+0x28>)
 80015a2:	4a09      	ldr	r2, [pc, #36]	; (80015c8 <DpDiag_AlarmInit+0x2c>)
 80015a4:	f8c3 200b 	str.w	r2, [r3, #11]
 80015a8:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <DpDiag_AlarmInit+0x28>)
 80015aa:	f8d3 300b 	ldr.w	r3, [r3, #11]
 80015ae:	4a05      	ldr	r2, [pc, #20]	; (80015c4 <DpDiag_AlarmInit+0x28>)
 80015b0:	f8c2 3007 	str.w	r3, [r2, #7]

   memset( &sAlarm.abBufferUsed[0], 0, ALARM_MAX_FIFO );
 80015b4:	2220      	movs	r2, #32
 80015b6:	2100      	movs	r1, #0
 80015b8:	4804      	ldr	r0, [pc, #16]	; (80015cc <DpDiag_AlarmInit+0x30>)
 80015ba:	f007 fb71 	bl	8008ca0 <memset>
}//void DpDiag_AlarmInit( void )
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	200001b8 	.word	0x200001b8
 80015c8:	200001bf 	.word	0x200001bf
 80015cc:	200001d0 	.word	0x200001d0

080015d0 <DpDiag_Init>:
 * @brief Initializes local structures.
 *
 * This function is called during startup and with each received parameter telegram from PROFIBUS-DP master.
 */
void DpDiag_Init( void )
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
   //nothing todo in this example.
}//void DpDiag_Init( void )
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
	...

080015e0 <DpDiag_CheckExtDiagBit>:
 *
 * @return EXT_DIAG_SET - the diagnostic message consist of an error
 * @return EXT_DIAG_RESET - no error detected
 */
static uint8_t DpDiag_CheckExtDiagBit( void )
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
uint8_t bExtDiagFlag;
uint8_t i;

   bExtDiagFlag = EXT_DIAG_RESET;
 80015e6:	2300      	movs	r3, #0
 80015e8:	71fb      	strb	r3, [r7, #7]

   for( i = 0; i < ( cSizeOfIdentifierDiagnosis - 1 ); i++ )
 80015ea:	2300      	movs	r3, #0
 80015ec:	71bb      	strb	r3, [r7, #6]
 80015ee:	e00b      	b.n	8001608 <DpDiag_CheckExtDiagBit+0x28>
   {
      if( sIdentRelDiag.abIdentRelDiag[ i ] != 0 )
 80015f0:	79bb      	ldrb	r3, [r7, #6]
 80015f2:	4a0a      	ldr	r2, [pc, #40]	; (800161c <DpDiag_CheckExtDiagBit+0x3c>)
 80015f4:	4413      	add	r3, r2
 80015f6:	785b      	ldrb	r3, [r3, #1]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d002      	beq.n	8001602 <DpDiag_CheckExtDiagBit+0x22>
      {
         bExtDiagFlag = EXT_DIAG_SET;
 80015fc:	2301      	movs	r3, #1
 80015fe:	71fb      	strb	r3, [r7, #7]
         break;
 8001600:	e005      	b.n	800160e <DpDiag_CheckExtDiagBit+0x2e>
   for( i = 0; i < ( cSizeOfIdentifierDiagnosis - 1 ); i++ )
 8001602:	79bb      	ldrb	r3, [r7, #6]
 8001604:	3301      	adds	r3, #1
 8001606:	71bb      	strb	r3, [r7, #6]
 8001608:	79bb      	ldrb	r3, [r7, #6]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d0f0      	beq.n	80015f0 <DpDiag_CheckExtDiagBit+0x10>
      }//if( sIdentRelDiag.abIdentRelDiag[ i ] != 0 )
   }//for( i = 0; i < ( cSizeOfIdentifierDiagnosis - 1 ); i++ )

   return bExtDiagFlag;
 800160e:	79fb      	ldrb	r3, [r7, #7]
}//static uint8_t DpDiag_CheckExtDiagBit( void )
 8001610:	4618      	mov	r0, r3
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	200004d0 	.word	0x200004d0

08001620 <DpDiag_AddIdentRelDiagBlock>:
 * @param[in]pbToDiagBuffer - pointer to local diagnostic buffer
 *
 * @return length of identifier related diagnostic block
 */
static uint8_t DpDiag_AddIdentRelDiagBlock( MEM_UNSIGNED8_PTR pbToDiagBuffer )
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	4b10      	ldr	r3, [pc, #64]	; (800166c <DpDiag_AddIdentRelDiagBlock+0x4c>)
 800162a:	881b      	ldrh	r3, [r3, #0]
 800162c:	b29a      	uxth	r2, r3
   memcpy( pbToDiagBuffer, &sIdentRelDiag, cSizeOfIdentifierDiagnosis );
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	801a      	strh	r2, [r3, #0]
   printf("DEBUG: [DpDiag_AddIdentRelDiagBlock] Copiando %d bytes: ", cSizeOfIdentifierDiagnosis);
 8001632:	2102      	movs	r1, #2
 8001634:	480e      	ldr	r0, [pc, #56]	; (8001670 <DpDiag_AddIdentRelDiagBlock+0x50>)
 8001636:	f007 fb3b 	bl	8008cb0 <iprintf>
   for (uint8_t i = 0; i < cSizeOfIdentifierDiagnosis; i++) {
 800163a:	2300      	movs	r3, #0
 800163c:	73fb      	strb	r3, [r7, #15]
 800163e:	e00a      	b.n	8001656 <DpDiag_AddIdentRelDiagBlock+0x36>
       printf("0x%02X ", ((uint8_t*)&sIdentRelDiag)[i]);
 8001640:	7bfb      	ldrb	r3, [r7, #15]
 8001642:	4a0a      	ldr	r2, [pc, #40]	; (800166c <DpDiag_AddIdentRelDiagBlock+0x4c>)
 8001644:	4413      	add	r3, r2
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	4619      	mov	r1, r3
 800164a:	480a      	ldr	r0, [pc, #40]	; (8001674 <DpDiag_AddIdentRelDiagBlock+0x54>)
 800164c:	f007 fb30 	bl	8008cb0 <iprintf>
   for (uint8_t i = 0; i < cSizeOfIdentifierDiagnosis; i++) {
 8001650:	7bfb      	ldrb	r3, [r7, #15]
 8001652:	3301      	adds	r3, #1
 8001654:	73fb      	strb	r3, [r7, #15]
 8001656:	7bfb      	ldrb	r3, [r7, #15]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d9f1      	bls.n	8001640 <DpDiag_AddIdentRelDiagBlock+0x20>
   }
   printf("\n");
 800165c:	200a      	movs	r0, #10
 800165e:	f007 fb3f 	bl	8008ce0 <putchar>
   return cSizeOfIdentifierDiagnosis;
 8001662:	2302      	movs	r3, #2
}//static uint8_t DpDiag_AddIdentRelDiagBlock( MEM_UNSIGNED8_PTR pbToDiagBuffer )
 8001664:	4618      	mov	r0, r3
 8001666:	3710      	adds	r7, #16
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	200004d0 	.word	0x200004d0
 8001670:	0800b59c 	.word	0x0800b59c
 8001674:	0800b5d8 	.word	0x0800b5d8

08001678 <DpDiag_AddModuleStatDiagBlock>:
 * @param[in]pbToDiagBuffer - pointer to local diagnostic buffer
 *
 * @return length of module status
 */
static uint8_t DpDiag_AddModuleStatDiagBlock( MEM_UNSIGNED8_PTR pbToDiagBuffer )
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
   memcpy( pbToDiagBuffer, &sModuleStatDiag, cSizeOfModuleStatusDiagnosis );
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4a11      	ldr	r2, [pc, #68]	; (80016c8 <DpDiag_AddModuleStatDiagBlock+0x50>)
 8001684:	6811      	ldr	r1, [r2, #0]
 8001686:	6019      	str	r1, [r3, #0]
 8001688:	8892      	ldrh	r2, [r2, #4]
 800168a:	809a      	strh	r2, [r3, #4]
   printf("DEBUG: [DpDiag_AddModuleStatDiagBlock] Copiando %d bytes: ", cSizeOfModuleStatusDiagnosis);
 800168c:	2106      	movs	r1, #6
 800168e:	480f      	ldr	r0, [pc, #60]	; (80016cc <DpDiag_AddModuleStatDiagBlock+0x54>)
 8001690:	f007 fb0e 	bl	8008cb0 <iprintf>
   for (uint8_t i = 0; i < cSizeOfModuleStatusDiagnosis; i++) {
 8001694:	2300      	movs	r3, #0
 8001696:	73fb      	strb	r3, [r7, #15]
 8001698:	e00a      	b.n	80016b0 <DpDiag_AddModuleStatDiagBlock+0x38>
       printf("0x%02X ", ((uint8_t*)&sModuleStatDiag)[i]);
 800169a:	7bfb      	ldrb	r3, [r7, #15]
 800169c:	4a0a      	ldr	r2, [pc, #40]	; (80016c8 <DpDiag_AddModuleStatDiagBlock+0x50>)
 800169e:	4413      	add	r3, r2
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	4619      	mov	r1, r3
 80016a4:	480a      	ldr	r0, [pc, #40]	; (80016d0 <DpDiag_AddModuleStatDiagBlock+0x58>)
 80016a6:	f007 fb03 	bl	8008cb0 <iprintf>
   for (uint8_t i = 0; i < cSizeOfModuleStatusDiagnosis; i++) {
 80016aa:	7bfb      	ldrb	r3, [r7, #15]
 80016ac:	3301      	adds	r3, #1
 80016ae:	73fb      	strb	r3, [r7, #15]
 80016b0:	7bfb      	ldrb	r3, [r7, #15]
 80016b2:	2b05      	cmp	r3, #5
 80016b4:	d9f1      	bls.n	800169a <DpDiag_AddModuleStatDiagBlock+0x22>
   }
   printf("\n");
 80016b6:	200a      	movs	r0, #10
 80016b8:	f007 fb12 	bl	8008ce0 <putchar>
   return cSizeOfModuleStatusDiagnosis;
 80016bc:	2306      	movs	r3, #6
}//static uint8_t DpDiag_AddModuleStatDiagBlock( MEM_UNSIGNED8_PTR pbToDiagBuffer )
 80016be:	4618      	mov	r0, r3
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	200004d4 	.word	0x200004d4
 80016cc:	0800b5e0 	.word	0x0800b5e0
 80016d0:	0800b5d8 	.word	0x0800b5d8

080016d4 <DpDiag_AddChannelRelDiagBlock>:
 * @param[in]pbToDiagBuffer - pointer to local diagnostic buffer
 *
 * @return length of channel related diagnostic block
 */
static uint8_t DpDiag_AddChannelRelDiagBlock( MEM_UNSIGNED8_PTR pbToDiagBuffer )
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
ROMCONST__ uint8_t abChnDiagSlot5[3] = { 0x84, 0xC1, 0x82 };  //module 5
 80016dc:	4a28      	ldr	r2, [pc, #160]	; (8001780 <DpDiag_AddChannelRelDiagBlock+0xac>)
 80016de:	f107 0310 	add.w	r3, r7, #16
 80016e2:	6812      	ldr	r2, [r2, #0]
 80016e4:	4611      	mov	r1, r2
 80016e6:	8019      	strh	r1, [r3, #0]
 80016e8:	3302      	adds	r3, #2
 80016ea:	0c12      	lsrs	r2, r2, #16
 80016ec:	701a      	strb	r2, [r3, #0]
ROMCONST__ uint8_t abChnDiagSlot6[3] = { 0x85, 0xC1, 0x82 };  //module 6
 80016ee:	4a25      	ldr	r2, [pc, #148]	; (8001784 <DpDiag_AddChannelRelDiagBlock+0xb0>)
 80016f0:	f107 030c 	add.w	r3, r7, #12
 80016f4:	6812      	ldr	r2, [r2, #0]
 80016f6:	4611      	mov	r1, r2
 80016f8:	8019      	strh	r1, [r3, #0]
 80016fa:	3302      	adds	r3, #2
 80016fc:	0c12      	lsrs	r2, r2, #16
 80016fe:	701a      	strb	r2, [r3, #0]
// uint8_t bNrOfChannelDiags = 0x00; // UNUSED
uint8_t bLength = 0x00;
 8001700:	2300      	movs	r3, #0
 8001702:	75fb      	strb	r3, [r7, #23]
uint8_t i;

   bLength = 0x00;
 8001704:	2300      	movs	r3, #0
 8001706:	75fb      	strb	r3, [r7, #23]
   for( i = 0; i < ( cSizeOfIdentifierDiagnosis - 1 ); i++ )
 8001708:	2300      	movs	r3, #0
 800170a:	75bb      	strb	r3, [r7, #22]
 800170c:	e030      	b.n	8001770 <DpDiag_AddChannelRelDiagBlock+0x9c>
   {
      if( sIdentRelDiag.abIdentRelDiag[ i ] > 0x00 )
 800170e:	7dbb      	ldrb	r3, [r7, #22]
 8001710:	4a1d      	ldr	r2, [pc, #116]	; (8001788 <DpDiag_AddChannelRelDiagBlock+0xb4>)
 8001712:	4413      	add	r3, r2
 8001714:	785b      	ldrb	r3, [r3, #1]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d027      	beq.n	800176a <DpDiag_AddChannelRelDiagBlock+0x96>
      {
         if( sIdentRelDiag.abIdentRelDiag[ i ] & 0x10 )
 800171a:	7dbb      	ldrb	r3, [r7, #22]
 800171c:	4a1a      	ldr	r2, [pc, #104]	; (8001788 <DpDiag_AddChannelRelDiagBlock+0xb4>)
 800171e:	4413      	add	r3, r2
 8001720:	785b      	ldrb	r3, [r3, #1]
 8001722:	f003 0310 	and.w	r3, r3, #16
 8001726:	2b00      	cmp	r3, #0
 8001728:	d00b      	beq.n	8001742 <DpDiag_AddChannelRelDiagBlock+0x6e>
         {
            memcpy( pbToDiagBuffer+bLength, &abChnDiagSlot5[0], 3 );
 800172a:	7dfb      	ldrb	r3, [r7, #23]
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	4413      	add	r3, r2
 8001730:	f107 0110 	add.w	r1, r7, #16
 8001734:	2203      	movs	r2, #3
 8001736:	4618      	mov	r0, r3
 8001738:	f007 faa4 	bl	8008c84 <memcpy>
            bLength += 3;
 800173c:	7dfb      	ldrb	r3, [r7, #23]
 800173e:	3303      	adds	r3, #3
 8001740:	75fb      	strb	r3, [r7, #23]
         }//if( sIdentRelDiag.abIdentRelDiag[ i ] & 0x10 )

         if( sIdentRelDiag.abIdentRelDiag[ i ] & 0x20 )
 8001742:	7dbb      	ldrb	r3, [r7, #22]
 8001744:	4a10      	ldr	r2, [pc, #64]	; (8001788 <DpDiag_AddChannelRelDiagBlock+0xb4>)
 8001746:	4413      	add	r3, r2
 8001748:	785b      	ldrb	r3, [r3, #1]
 800174a:	f003 0320 	and.w	r3, r3, #32
 800174e:	2b00      	cmp	r3, #0
 8001750:	d00b      	beq.n	800176a <DpDiag_AddChannelRelDiagBlock+0x96>
         {
            memcpy( pbToDiagBuffer+bLength, &abChnDiagSlot6[0], 3 );
 8001752:	7dfb      	ldrb	r3, [r7, #23]
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	4413      	add	r3, r2
 8001758:	f107 010c 	add.w	r1, r7, #12
 800175c:	2203      	movs	r2, #3
 800175e:	4618      	mov	r0, r3
 8001760:	f007 fa90 	bl	8008c84 <memcpy>
            bLength += 3;
 8001764:	7dfb      	ldrb	r3, [r7, #23]
 8001766:	3303      	adds	r3, #3
 8001768:	75fb      	strb	r3, [r7, #23]
   for( i = 0; i < ( cSizeOfIdentifierDiagnosis - 1 ); i++ )
 800176a:	7dbb      	ldrb	r3, [r7, #22]
 800176c:	3301      	adds	r3, #1
 800176e:	75bb      	strb	r3, [r7, #22]
 8001770:	7dbb      	ldrb	r3, [r7, #22]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d0cb      	beq.n	800170e <DpDiag_AddChannelRelDiagBlock+0x3a>
         }//if( sIdentRelDiag.abIdentRelDiag[ i ] & 0x20 )
      }//if( sIdentRelDiag.abIdentRelDiag[ i ] > 0x00 )
   }//for( i = 0; i < SliceBus_GetModuleCount(); i++ )

   return bLength;
 8001776:	7dfb      	ldrb	r3, [r7, #23]
}//static uint8_t DpDiag_AddChannelRelDiagBlock( MEM_UNSIGNED8_PTR pbToDiagBuffer )
 8001778:	4618      	mov	r0, r3
 800177a:	3718      	adds	r7, #24
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	0800b61c 	.word	0x0800b61c
 8001784:	0800b620 	.word	0x0800b620
 8001788:	200004d0 	.word	0x200004d0

0800178c <DpDiag_AddProcessAlarm>:
 * @param[in]psAlarm - pointer to process alarm
 *
 * @return length of process alarm
 */
static uint8_t DpDiag_AddProcessAlarm( MEM_UNSIGNED8_PTR pbToDiagBuffer, ALARM_STATUS_PDU_PTR psAlarm )
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
uint8_t bLength;

   bLength = 0x00;
 8001796:	2300      	movs	r3, #0
 8001798:	73fb      	strb	r3, [r7, #15]
   memcpy( pbToDiagBuffer+bLength, &psAlarm->bHeader, cSizeOfAlarmHeader );
 800179a:	7bfb      	ldrb	r3, [r7, #15]
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	4413      	add	r3, r2
 80017a0:	683a      	ldr	r2, [r7, #0]
 80017a2:	3208      	adds	r2, #8
 80017a4:	6812      	ldr	r2, [r2, #0]
 80017a6:	601a      	str	r2, [r3, #0]
   bLength += cSizeOfAlarmHeader;
 80017a8:	7bfb      	ldrb	r3, [r7, #15]
 80017aa:	3304      	adds	r3, #4
 80017ac:	73fb      	strb	r3, [r7, #15]
   memcpy( pbToDiagBuffer+bLength, psAlarm->pToUserDiagData, psAlarm->bUserDiagLength );
 80017ae:	7bfb      	ldrb	r3, [r7, #15]
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	18d0      	adds	r0, r2, r3
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	f8d3 100e 	ldr.w	r1, [r3, #14]
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	7b1b      	ldrb	r3, [r3, #12]
 80017be:	461a      	mov	r2, r3
 80017c0:	f007 fa60 	bl	8008c84 <memcpy>
   bLength += psAlarm->bUserDiagLength;
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	7b1a      	ldrb	r2, [r3, #12]
 80017c8:	7bfb      	ldrb	r3, [r7, #15]
 80017ca:	4413      	add	r3, r2
 80017cc:	73fb      	strb	r3, [r7, #15]

   return bLength;
 80017ce:	7bfb      	ldrb	r3, [r7, #15]
}//static uint8_t DpDiag_AddProcessAlarm( MEM_UNSIGNED8_PTR pbToDiagBuffer, ALARM_STATUS_PDU_PTR psAlarm )
 80017d0:	4618      	mov	r0, r3
 80017d2:	3710      	adds	r7, #16
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <DpDiag_AddDiagnosticAlarm>:
 * @param[in]psAlarm - pointer to diagnostic alarm
 *
 * @return length of diagnostic alarm
 */
static uint8_t DpDiag_AddDiagnosticAlarm( MEM_UNSIGNED8_PTR pbToDiagBuffer, ALARM_STATUS_PDU_PTR psAlarm )
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
uint8_t bLength;

   bLength = 0x00;
 80017e2:	2300      	movs	r3, #0
 80017e4:	73fb      	strb	r3, [r7, #15]
   memcpy( pbToDiagBuffer+bLength, &psAlarm->bHeader, cSizeOfAlarmHeader );
 80017e6:	7bfb      	ldrb	r3, [r7, #15]
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	4413      	add	r3, r2
 80017ec:	683a      	ldr	r2, [r7, #0]
 80017ee:	3208      	adds	r2, #8
 80017f0:	6812      	ldr	r2, [r2, #0]
 80017f2:	601a      	str	r2, [r3, #0]
   bLength += cSizeOfAlarmHeader;
 80017f4:	7bfb      	ldrb	r3, [r7, #15]
 80017f6:	3304      	adds	r3, #4
 80017f8:	73fb      	strb	r3, [r7, #15]
   memcpy( pbToDiagBuffer+bLength, psAlarm->pToUserDiagData, psAlarm->bUserDiagLength );
 80017fa:	7bfb      	ldrb	r3, [r7, #15]
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	18d0      	adds	r0, r2, r3
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	f8d3 100e 	ldr.w	r1, [r3, #14]
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	7b1b      	ldrb	r3, [r3, #12]
 800180a:	461a      	mov	r2, r3
 800180c:	f007 fa3a 	bl	8008c84 <memcpy>
   bLength += psAlarm->bUserDiagLength;
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	7b1a      	ldrb	r2, [r3, #12]
 8001814:	7bfb      	ldrb	r3, [r7, #15]
 8001816:	4413      	add	r3, r2
 8001818:	73fb      	strb	r3, [r7, #15]

   return bLength;
 800181a:	7bfb      	ldrb	r3, [r7, #15]
}//static uint8_t DpDiag_AddDiagnosticAlarm( MEM_UNSIGNED8_PTR pbToDiagBuffer, ALARM_STATUS_PDU_PTR psAlarm )
 800181c:	4618      	mov	r0, r3
 800181e:	3710      	adds	r7, #16
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <DpDiag_Alarm>:
  \retval DP_DIAG_BUFFER_ERROR - Error, diagnostic header is wrong
  \retval DP_DIAG_SEQUENCE_ERROR - Error, revision will be send in wrong state
  \retval DP_DIAG_NOT_POSSIBLE_ERROR - Error, unknown diagnostic header
*/
DP_ERROR_CODE DpDiag_Alarm( uint8_t bAlarmType, uint8_t bSeqNr, ALARM_STATUS_PDU_PTR psAlarm, uint8_t bCheckDiagFlag )
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0
 800182a:	603a      	str	r2, [r7, #0]
 800182c:	461a      	mov	r2, r3
 800182e:	4603      	mov	r3, r0
 8001830:	71fb      	strb	r3, [r7, #7]
 8001832:	460b      	mov	r3, r1
 8001834:	71bb      	strb	r3, [r7, #6]
 8001836:	4613      	mov	r3, r2
 8001838:	717b      	strb	r3, [r7, #5]
DP_ERROR_CODE     bRetValue;
uint8_t           bExtDiagFlag;
uint8_t           bDiagLength;
uint16_t          wDiagEvent;

   bRetValue = DP_NOK;
 800183a:	2302      	movs	r3, #2
 800183c:	75fb      	strb	r3, [r7, #23]
   
   printf("DEBUG: [DpDiag_Alarm] INICIO - bAlarmType=0x%02X, bSeqNr=0x%02X, bCheckDiagFlag=%d\n", bAlarmType, bSeqNr, bCheckDiagFlag);
 800183e:	79f9      	ldrb	r1, [r7, #7]
 8001840:	79ba      	ldrb	r2, [r7, #6]
 8001842:	797b      	ldrb	r3, [r7, #5]
 8001844:	48b4      	ldr	r0, [pc, #720]	; (8001b18 <DpDiag_Alarm+0x2f4>)
 8001846:	f007 fa33 	bl	8008cb0 <iprintf>
   printf("DEBUG: [DpDiag_Alarm] Constantes: USER_TYPE_CFG_OK=0x%02X, STAT_DIAG_SET=0x%02X, EXT_DIAG_SET=0x%02X\n", USER_TYPE_CFG_OK, STAT_DIAG_SET, EXT_DIAG_SET);
 800184a:	2301      	movs	r3, #1
 800184c:	2202      	movs	r2, #2
 800184e:	21fd      	movs	r1, #253	; 0xfd
 8001850:	48b2      	ldr	r0, [pc, #712]	; (8001b1c <DpDiag_Alarm+0x2f8>)
 8001852:	f007 fa2d 	bl	8008cb0 <iprintf>

   psAlarm = psAlarm; //avoid warning
   wDiagEvent = ( (uint16_t)(bAlarmType << 8) | ((uint16_t)bSeqNr) );
 8001856:	79fb      	ldrb	r3, [r7, #7]
 8001858:	b29b      	uxth	r3, r3
 800185a:	021b      	lsls	r3, r3, #8
 800185c:	b29a      	uxth	r2, r3
 800185e:	79bb      	ldrb	r3, [r7, #6]
 8001860:	b29b      	uxth	r3, r3
 8001862:	4313      	orrs	r3, r2
 8001864:	827b      	strh	r3, [r7, #18]
   printf("DEBUG: [DpDiag_Alarm] wDiagEvent calculado: 0x%04X\n", wDiagEvent);
 8001866:	8a7b      	ldrh	r3, [r7, #18]
 8001868:	4619      	mov	r1, r3
 800186a:	48ad      	ldr	r0, [pc, #692]	; (8001b20 <DpDiag_Alarm+0x2fc>)
 800186c:	f007 fa20 	bl	8008cb0 <iprintf>

   VPC3_CheckDiagBufferChanged();
 8001870:	f002 f998 	bl	8003ba4 <VPC3_CheckDiagBufferChanged>
   printf("DEBUG: [DpDiag_Alarm] VPC3_CheckDiagBufferChanged() completado\n");
 8001874:	48ab      	ldr	r0, [pc, #684]	; (8001b24 <DpDiag_Alarm+0x300>)
 8001876:	f007 fab7 	bl	8008de8 <puts>

   //don't send diagnostic twice! 0x10
   printf("DEBUG: [DpDiag_Alarm] Comparando wDiagEvent (0x%04X) con pDpSystem->wOldDiag (0x%04X)\n", wDiagEvent, pDpSystem->wOldDiag);
 800187a:	8a79      	ldrh	r1, [r7, #18]
 800187c:	4baa      	ldr	r3, [pc, #680]	; (8001b28 <DpDiag_Alarm+0x304>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8001884:	b29b      	uxth	r3, r3
 8001886:	461a      	mov	r2, r3
 8001888:	48a8      	ldr	r0, [pc, #672]	; (8001b2c <DpDiag_Alarm+0x308>)
 800188a:	f007 fa11 	bl	8008cb0 <iprintf>
   if( wDiagEvent != pDpSystem->wOldDiag )
 800188e:	4ba6      	ldr	r3, [pc, #664]	; (8001b28 <DpDiag_Alarm+0x304>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8001896:	b29b      	uxth	r3, r3
 8001898:	8a7a      	ldrh	r2, [r7, #18]
 800189a:	429a      	cmp	r2, r3
 800189c:	f000 8211 	beq.w	8001cc2 <DpDiag_Alarm+0x49e>
   {
      printf("DEBUG: [DpDiag_Alarm] wDiagEvent != wOldDiag, continuando...\n");
 80018a0:	48a3      	ldr	r0, [pc, #652]	; (8001b30 <DpDiag_Alarm+0x30c>)
 80018a2:	f007 faa1 	bl	8008de8 <puts>
      printf("DEBUG: [DpDiag_Alarm] Verificando VPC3_GetDpState(eDpStateDiagActive): %d\n", VPC3_GetDpState( eDpStateDiagActive ));
 80018a6:	4ba0      	ldr	r3, [pc, #640]	; (8001b28 <DpDiag_Alarm+0x304>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	f003 0310 	and.w	r3, r3, #16
 80018b0:	4619      	mov	r1, r3
 80018b2:	48a0      	ldr	r0, [pc, #640]	; (8001b34 <DpDiag_Alarm+0x310>)
 80018b4:	f007 f9fc 	bl	8008cb0 <iprintf>
      if( !( VPC3_GetDpState( eDpStateDiagActive ) ))
 80018b8:	4b9b      	ldr	r3, [pc, #620]	; (8001b28 <DpDiag_Alarm+0x304>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	f003 0310 	and.w	r3, r3, #16
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f040 81f7 	bne.w	8001cb6 <DpDiag_Alarm+0x492>
      {
         printf("DEBUG: [DpDiag_Alarm] Estado diagnóstico NO activo, procediendo...\n");
 80018c8:	489b      	ldr	r0, [pc, #620]	; (8001b38 <DpDiag_Alarm+0x314>)
 80018ca:	f007 fa8d 	bl	8008de8 <puts>
      	memset( &pDpSystem->abUserDiagnostic[0], 0x00, sizeof( pDpSystem->abUserDiagnostic ) );
 80018ce:	4b96      	ldr	r3, [pc, #600]	; (8001b28 <DpDiag_Alarm+0x304>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	330d      	adds	r3, #13
 80018d4:	2210      	movs	r2, #16
 80018d6:	2100      	movs	r1, #0
 80018d8:	4618      	mov	r0, r3
 80018da:	f007 f9e1 	bl	8008ca0 <memset>
      	pbToDiagArray = pDpSystem->abUserDiagnostic;
 80018de:	4b92      	ldr	r3, [pc, #584]	; (8001b28 <DpDiag_Alarm+0x304>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	330d      	adds	r3, #13
 80018e4:	60fb      	str	r3, [r7, #12]
      	
      	bExtDiagFlag = 0x00;
 80018e6:	2300      	movs	r3, #0
 80018e8:	75bb      	strb	r3, [r7, #22]
      	bDiagLength = 0x00;
 80018ea:	2300      	movs	r3, #0
 80018ec:	757b      	strb	r3, [r7, #21]
      	
      	printf("DEBUG: [DpDiag_Alarm] Procesando bAlarmType=0x%02X en switch...\n", bAlarmType);
 80018ee:	79fb      	ldrb	r3, [r7, #7]
 80018f0:	4619      	mov	r1, r3
 80018f2:	4892      	ldr	r0, [pc, #584]	; (8001b3c <DpDiag_Alarm+0x318>)
 80018f4:	f007 f9dc 	bl	8008cb0 <iprintf>
      	switch( bAlarmType )
 80018f8:	79fb      	ldrb	r3, [r7, #7]
 80018fa:	2bff      	cmp	r3, #255	; 0xff
 80018fc:	d043      	beq.n	8001986 <DpDiag_Alarm+0x162>
 80018fe:	2bff      	cmp	r3, #255	; 0xff
 8001900:	f300 8172 	bgt.w	8001be8 <DpDiag_Alarm+0x3c4>
 8001904:	2bfe      	cmp	r3, #254	; 0xfe
 8001906:	f300 816f 	bgt.w	8001be8 <DpDiag_Alarm+0x3c4>
 800190a:	2bfd      	cmp	r3, #253	; 0xfd
 800190c:	da0b      	bge.n	8001926 <DpDiag_Alarm+0x102>
 800190e:	2b81      	cmp	r3, #129	; 0x81
 8001910:	f000 80e8 	beq.w	8001ae4 <DpDiag_Alarm+0x2c0>
 8001914:	2b81      	cmp	r3, #129	; 0x81
 8001916:	f300 8167 	bgt.w	8001be8 <DpDiag_Alarm+0x3c4>
 800191a:	2b01      	cmp	r3, #1
 800191c:	d04d      	beq.n	80019ba <DpDiag_Alarm+0x196>
 800191e:	2b02      	cmp	r3, #2
 8001920:	f000 80a8 	beq.w	8001a74 <DpDiag_Alarm+0x250>
 8001924:	e160      	b.n	8001be8 <DpDiag_Alarm+0x3c4>
      	{
      	   case USER_TYPE_CFG_NOK:
      	   case USER_TYPE_CFG_OK:
      	   {
      	      printf("DEBUG: [DpDiag_Alarm] Caso USER_TYPE_CFG_OK/NOK\n");
 8001926:	4886      	ldr	r0, [pc, #536]	; (8001b40 <DpDiag_Alarm+0x31c>)
 8001928:	f007 fa5e 	bl	8008de8 <puts>
      	      bExtDiagFlag = ( bAlarmType == USER_TYPE_CFG_OK ) ? STAT_DIAG_SET : EXT_DIAG_SET;
 800192c:	79fb      	ldrb	r3, [r7, #7]
 800192e:	2bfd      	cmp	r3, #253	; 0xfd
 8001930:	d101      	bne.n	8001936 <DpDiag_Alarm+0x112>
 8001932:	2302      	movs	r3, #2
 8001934:	e000      	b.n	8001938 <DpDiag_Alarm+0x114>
 8001936:	2301      	movs	r3, #1
 8001938:	75bb      	strb	r3, [r7, #22]
      	      printf("DEBUG: [DpDiag_Alarm] bExtDiagFlag configurado: 0x%02X\n", bExtDiagFlag);
 800193a:	7dbb      	ldrb	r3, [r7, #22]
 800193c:	4619      	mov	r1, r3
 800193e:	4881      	ldr	r0, [pc, #516]	; (8001b44 <DpDiag_Alarm+0x320>)
 8001940:	f007 f9b6 	bl	8008cb0 <iprintf>
      	      bDiagLength += DpDiag_AddIdentRelDiagBlock( pbToDiagArray+bDiagLength );
 8001944:	7d7b      	ldrb	r3, [r7, #21]
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	4413      	add	r3, r2
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff fe68 	bl	8001620 <DpDiag_AddIdentRelDiagBlock>
 8001950:	4603      	mov	r3, r0
 8001952:	461a      	mov	r2, r3
 8001954:	7d7b      	ldrb	r3, [r7, #21]
 8001956:	4413      	add	r3, r2
 8001958:	757b      	strb	r3, [r7, #21]
      	      printf("DEBUG: [DpDiag_Alarm] Después de AddIdentRelDiagBlock: bDiagLength=%d\n", bDiagLength);
 800195a:	7d7b      	ldrb	r3, [r7, #21]
 800195c:	4619      	mov	r1, r3
 800195e:	487a      	ldr	r0, [pc, #488]	; (8001b48 <DpDiag_Alarm+0x324>)
 8001960:	f007 f9a6 	bl	8008cb0 <iprintf>
      	      bDiagLength += DpDiag_AddModuleStatDiagBlock( pbToDiagArray+bDiagLength );
 8001964:	7d7b      	ldrb	r3, [r7, #21]
 8001966:	68fa      	ldr	r2, [r7, #12]
 8001968:	4413      	add	r3, r2
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff fe84 	bl	8001678 <DpDiag_AddModuleStatDiagBlock>
 8001970:	4603      	mov	r3, r0
 8001972:	461a      	mov	r2, r3
 8001974:	7d7b      	ldrb	r3, [r7, #21]
 8001976:	4413      	add	r3, r2
 8001978:	757b      	strb	r3, [r7, #21]
      	      printf("DEBUG: [DpDiag_Alarm] Después de AddModuleStatDiagBlock: bDiagLength=%d\n", bDiagLength);
 800197a:	7d7b      	ldrb	r3, [r7, #21]
 800197c:	4619      	mov	r1, r3
 800197e:	4873      	ldr	r0, [pc, #460]	; (8001b4c <DpDiag_Alarm+0x328>)
 8001980:	f007 f996 	bl	8008cb0 <iprintf>
      	      break;
 8001984:	e138      	b.n	8001bf8 <DpDiag_Alarm+0x3d4>
      	   }//case USER_TYPE_CFG_OK:
      	
      	   case USER_TYPE_APPL_RDY:
      	   {
      	      printf("DEBUG: [DpDiag_Alarm] Caso USER_TYPE_APPL_RDY\n");
 8001986:	4872      	ldr	r0, [pc, #456]	; (8001b50 <DpDiag_Alarm+0x32c>)
 8001988:	f007 fa2e 	bl	8008de8 <puts>
      	      bDiagLength += DpDiag_AddIdentRelDiagBlock( pbToDiagArray+bDiagLength );
 800198c:	7d7b      	ldrb	r3, [r7, #21]
 800198e:	68fa      	ldr	r2, [r7, #12]
 8001990:	4413      	add	r3, r2
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff fe44 	bl	8001620 <DpDiag_AddIdentRelDiagBlock>
 8001998:	4603      	mov	r3, r0
 800199a:	461a      	mov	r2, r3
 800199c:	7d7b      	ldrb	r3, [r7, #21]
 800199e:	4413      	add	r3, r2
 80019a0:	757b      	strb	r3, [r7, #21]
      	      bDiagLength += DpDiag_AddModuleStatDiagBlock( pbToDiagArray+bDiagLength );
 80019a2:	7d7b      	ldrb	r3, [r7, #21]
 80019a4:	68fa      	ldr	r2, [r7, #12]
 80019a6:	4413      	add	r3, r2
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff fe65 	bl	8001678 <DpDiag_AddModuleStatDiagBlock>
 80019ae:	4603      	mov	r3, r0
 80019b0:	461a      	mov	r2, r3
 80019b2:	7d7b      	ldrb	r3, [r7, #21]
 80019b4:	4413      	add	r3, r2
 80019b6:	757b      	strb	r3, [r7, #21]
      	      break;
 80019b8:	e11e      	b.n	8001bf8 <DpDiag_Alarm+0x3d4>
      	   }//case USER_TYPE_CFG_OK:
      	
      	   case ALARM_TYPE_DIAGNOSTIC:
      	   {
      	      printf("DEBUG: [DpDiag_Alarm] Caso ALARM_TYPE_DIAGNOSTIC\n");
 80019ba:	4866      	ldr	r0, [pc, #408]	; (8001b54 <DpDiag_Alarm+0x330>)
 80019bc:	f007 fa14 	bl	8008de8 <puts>
      	      //check alarm appear/disappear?
      	      if( (psAlarm->bSpecifier & SPEC_MASK) == SPEC_APPEARS )
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	7adb      	ldrb	r3, [r3, #11]
 80019c4:	f003 0303 	and.w	r3, r3, #3
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d10f      	bne.n	80019ec <DpDiag_Alarm+0x1c8>
      	      {
      	         //set entry in identifier related diagnostic block
      	         DpDiag_SetIdentRelDiagEntry( (psAlarm->bSlotNr-1) );
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	7a9b      	ldrb	r3, [r3, #10]
 80019d0:	3b01      	subs	r3, #1
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	4618      	mov	r0, r3
 80019d6:	f000 fab3 	bl	8001f40 <DpDiag_SetIdentRelDiagEntry>
      	         //set entry in module status diagnostic block to FAULT
      	         DpDiag_SetModulStatusEntry( (psAlarm->bSlotNr-1), DIAG_MS_FAULT );
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	7a9b      	ldrb	r3, [r3, #10]
 80019de:	3b01      	subs	r3, #1
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2101      	movs	r1, #1
 80019e4:	4618      	mov	r0, r3
 80019e6:	f000 fb11 	bl	800200c <DpDiag_SetModulStatusEntry>
 80019ea:	e00e      	b.n	8001a0a <DpDiag_Alarm+0x1e6>
      	      }//if( (psAlarm->bSpecifier & SPEC_MASK) == SPEC_APPEARS )
      	      else
      	      {
      	         //clear entry in identifier related diagnostic block
      	         DpDiag_ClrIdentRelDiagEntry( (psAlarm->bSlotNr-1) );
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	7a9b      	ldrb	r3, [r3, #10]
 80019f0:	3b01      	subs	r3, #1
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	4618      	mov	r0, r3
 80019f6:	f000 fac7 	bl	8001f88 <DpDiag_ClrIdentRelDiagEntry>
      	         //set entry in module status diagnostic block to OK
      	         DpDiag_SetModulStatusEntry( (psAlarm->bSlotNr-1), DIAG_MS_OK );
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	7a9b      	ldrb	r3, [r3, #10]
 80019fe:	3b01      	subs	r3, #1
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2100      	movs	r1, #0
 8001a04:	4618      	mov	r0, r3
 8001a06:	f000 fb01 	bl	800200c <DpDiag_SetModulStatusEntry>
      	      }//else of if( (psAlarm->bSpecifier & SPEC_MASK) == SPEC_APPEARS )
      	
      	      bExtDiagFlag |= DpDiag_CheckExtDiagBit();
 8001a0a:	f7ff fde9 	bl	80015e0 <DpDiag_CheckExtDiagBit>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	461a      	mov	r2, r3
 8001a12:	7dbb      	ldrb	r3, [r7, #22]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	75bb      	strb	r3, [r7, #22]
      	      bDiagLength += DpDiag_AddIdentRelDiagBlock( pbToDiagArray+bDiagLength );
 8001a18:	7d7b      	ldrb	r3, [r7, #21]
 8001a1a:	68fa      	ldr	r2, [r7, #12]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff fdfe 	bl	8001620 <DpDiag_AddIdentRelDiagBlock>
 8001a24:	4603      	mov	r3, r0
 8001a26:	461a      	mov	r2, r3
 8001a28:	7d7b      	ldrb	r3, [r7, #21]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	757b      	strb	r3, [r7, #21]
      	      bDiagLength += DpDiag_AddModuleStatDiagBlock( pbToDiagArray+bDiagLength );
 8001a2e:	7d7b      	ldrb	r3, [r7, #21]
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	4413      	add	r3, r2
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff fe1f 	bl	8001678 <DpDiag_AddModuleStatDiagBlock>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	7d7b      	ldrb	r3, [r7, #21]
 8001a40:	4413      	add	r3, r2
 8001a42:	757b      	strb	r3, [r7, #21]
      	      bDiagLength += DpDiag_AddChannelRelDiagBlock( pbToDiagArray+bDiagLength );
 8001a44:	7d7b      	ldrb	r3, [r7, #21]
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	4413      	add	r3, r2
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff fe42 	bl	80016d4 <DpDiag_AddChannelRelDiagBlock>
 8001a50:	4603      	mov	r3, r0
 8001a52:	461a      	mov	r2, r3
 8001a54:	7d7b      	ldrb	r3, [r7, #21]
 8001a56:	4413      	add	r3, r2
 8001a58:	757b      	strb	r3, [r7, #21]
      	      bDiagLength += DpDiag_AddDiagnosticAlarm( pbToDiagArray+bDiagLength, psAlarm );
 8001a5a:	7d7b      	ldrb	r3, [r7, #21]
 8001a5c:	68fa      	ldr	r2, [r7, #12]
 8001a5e:	4413      	add	r3, r2
 8001a60:	6839      	ldr	r1, [r7, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff feb8 	bl	80017d8 <DpDiag_AddDiagnosticAlarm>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	7d7b      	ldrb	r3, [r7, #21]
 8001a6e:	4413      	add	r3, r2
 8001a70:	757b      	strb	r3, [r7, #21]
      	      break;
 8001a72:	e0c1      	b.n	8001bf8 <DpDiag_Alarm+0x3d4>
      	   }//ALARM_TYPE_DIAGNOSTIC
      	
      	   case ALARM_TYPE_PROCESS:
      	   {
      	      printf("DEBUG: [DpDiag_Alarm] Caso ALARM_TYPE_PROCESS\n");
 8001a74:	4838      	ldr	r0, [pc, #224]	; (8001b58 <DpDiag_Alarm+0x334>)
 8001a76:	f007 f9b7 	bl	8008de8 <puts>
      	      bExtDiagFlag |= DpDiag_CheckExtDiagBit();
 8001a7a:	f7ff fdb1 	bl	80015e0 <DpDiag_CheckExtDiagBit>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	461a      	mov	r2, r3
 8001a82:	7dbb      	ldrb	r3, [r7, #22]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	75bb      	strb	r3, [r7, #22]
      	      bDiagLength += DpDiag_AddIdentRelDiagBlock( pbToDiagArray+bDiagLength );
 8001a88:	7d7b      	ldrb	r3, [r7, #21]
 8001a8a:	68fa      	ldr	r2, [r7, #12]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff fdc6 	bl	8001620 <DpDiag_AddIdentRelDiagBlock>
 8001a94:	4603      	mov	r3, r0
 8001a96:	461a      	mov	r2, r3
 8001a98:	7d7b      	ldrb	r3, [r7, #21]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	757b      	strb	r3, [r7, #21]
      	      bDiagLength += DpDiag_AddModuleStatDiagBlock( pbToDiagArray+bDiagLength );
 8001a9e:	7d7b      	ldrb	r3, [r7, #21]
 8001aa0:	68fa      	ldr	r2, [r7, #12]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff fde7 	bl	8001678 <DpDiag_AddModuleStatDiagBlock>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	461a      	mov	r2, r3
 8001aae:	7d7b      	ldrb	r3, [r7, #21]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	757b      	strb	r3, [r7, #21]
      	      bDiagLength += DpDiag_AddChannelRelDiagBlock( pbToDiagArray+bDiagLength );
 8001ab4:	7d7b      	ldrb	r3, [r7, #21]
 8001ab6:	68fa      	ldr	r2, [r7, #12]
 8001ab8:	4413      	add	r3, r2
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff fe0a 	bl	80016d4 <DpDiag_AddChannelRelDiagBlock>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	7d7b      	ldrb	r3, [r7, #21]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	757b      	strb	r3, [r7, #21]
      	      bDiagLength += DpDiag_AddProcessAlarm( pbToDiagArray+bDiagLength, psAlarm );
 8001aca:	7d7b      	ldrb	r3, [r7, #21]
 8001acc:	68fa      	ldr	r2, [r7, #12]
 8001ace:	4413      	add	r3, r2
 8001ad0:	6839      	ldr	r1, [r7, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff fe5a 	bl	800178c <DpDiag_AddProcessAlarm>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	461a      	mov	r2, r3
 8001adc:	7d7b      	ldrb	r3, [r7, #21]
 8001ade:	4413      	add	r3, r2
 8001ae0:	757b      	strb	r3, [r7, #21]
      	      break;
 8001ae2:	e089      	b.n	8001bf8 <DpDiag_Alarm+0x3d4>
      	   }//case ALARM_TYPE_PROCESS:
      	
      	   case STATUS_MESSAGE:
      	   {
      	      printf("DEBUG: [DpDiag_Alarm] Caso STATUS_MESSAGE\n");
 8001ae4:	481d      	ldr	r0, [pc, #116]	; (8001b5c <DpDiag_Alarm+0x338>)
 8001ae6:	f007 f97f 	bl	8008de8 <puts>
      	      //DP-V0 diagnostic
      	      //check alarm appear/disappear?
      	      if( (psAlarm->bSpecifier & SPEC_MASK) == SPEC_APPEARS )
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	7adb      	ldrb	r3, [r3, #11]
 8001aee:	f003 0303 	and.w	r3, r3, #3
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d134      	bne.n	8001b60 <DpDiag_Alarm+0x33c>
      	      {
      	         //set entry in identifier related diagnostic block
      	         DpDiag_SetIdentRelDiagEntry( (psAlarm->bSlotNr-1) );
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	7a9b      	ldrb	r3, [r3, #10]
 8001afa:	3b01      	subs	r3, #1
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	4618      	mov	r0, r3
 8001b00:	f000 fa1e 	bl	8001f40 <DpDiag_SetIdentRelDiagEntry>
      	         //set entry in module status diagnostic block to FAULT
      	         DpDiag_SetModulStatusEntry( (psAlarm->bSlotNr-1), DIAG_MS_FAULT );
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	7a9b      	ldrb	r3, [r3, #10]
 8001b08:	3b01      	subs	r3, #1
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f000 fa7c 	bl	800200c <DpDiag_SetModulStatusEntry>
 8001b14:	e033      	b.n	8001b7e <DpDiag_Alarm+0x35a>
 8001b16:	bf00      	nop
 8001b18:	0800b624 	.word	0x0800b624
 8001b1c:	0800b678 	.word	0x0800b678
 8001b20:	0800b6e0 	.word	0x0800b6e0
 8001b24:	0800b714 	.word	0x0800b714
 8001b28:	20000000 	.word	0x20000000
 8001b2c:	0800b754 	.word	0x0800b754
 8001b30:	0800b7ac 	.word	0x0800b7ac
 8001b34:	0800b7ec 	.word	0x0800b7ec
 8001b38:	0800b838 	.word	0x0800b838
 8001b3c:	0800b87c 	.word	0x0800b87c
 8001b40:	0800b8c0 	.word	0x0800b8c0
 8001b44:	0800b8f0 	.word	0x0800b8f0
 8001b48:	0800b928 	.word	0x0800b928
 8001b4c:	0800b970 	.word	0x0800b970
 8001b50:	0800b9bc 	.word	0x0800b9bc
 8001b54:	0800b9ec 	.word	0x0800b9ec
 8001b58:	0800ba20 	.word	0x0800ba20
 8001b5c:	0800ba50 	.word	0x0800ba50
      	      }//if( (psAlarm->bSpecifier & SPEC_MASK) == SPEC_APPEARS )
      	      else
      	      {
      	         //clear entry in identifier related diagnostic block
      	         DpDiag_ClrIdentRelDiagEntry( (psAlarm->bSlotNr-1) );
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	7a9b      	ldrb	r3, [r3, #10]
 8001b64:	3b01      	subs	r3, #1
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f000 fa0d 	bl	8001f88 <DpDiag_ClrIdentRelDiagEntry>
      	         //set entry in module status diagnostic block to OK
      	         DpDiag_SetModulStatusEntry( (psAlarm->bSlotNr-1), DIAG_MS_OK );
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	7a9b      	ldrb	r3, [r3, #10]
 8001b72:	3b01      	subs	r3, #1
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2100      	movs	r1, #0
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f000 fa47 	bl	800200c <DpDiag_SetModulStatusEntry>
      	      }//else of if( (psAlarm->bSpecifier & SPEC_MASK) == SPEC_APPEARS )
      	
      	      bExtDiagFlag |= DpDiag_CheckExtDiagBit();
 8001b7e:	f7ff fd2f 	bl	80015e0 <DpDiag_CheckExtDiagBit>
 8001b82:	4603      	mov	r3, r0
 8001b84:	461a      	mov	r2, r3
 8001b86:	7dbb      	ldrb	r3, [r7, #22]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	75bb      	strb	r3, [r7, #22]
      	      bDiagLength += DpDiag_AddIdentRelDiagBlock( pbToDiagArray+bDiagLength );
 8001b8c:	7d7b      	ldrb	r3, [r7, #21]
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	4413      	add	r3, r2
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff fd44 	bl	8001620 <DpDiag_AddIdentRelDiagBlock>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	7d7b      	ldrb	r3, [r7, #21]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	757b      	strb	r3, [r7, #21]
      	      bDiagLength += DpDiag_AddModuleStatDiagBlock( pbToDiagArray+bDiagLength );
 8001ba2:	7d7b      	ldrb	r3, [r7, #21]
 8001ba4:	68fa      	ldr	r2, [r7, #12]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff fd65 	bl	8001678 <DpDiag_AddModuleStatDiagBlock>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	7d7b      	ldrb	r3, [r7, #21]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	757b      	strb	r3, [r7, #21]
      	      bDiagLength += DpDiag_AddChannelRelDiagBlock( pbToDiagArray+bDiagLength );
 8001bb8:	7d7b      	ldrb	r3, [r7, #21]
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7ff fd88 	bl	80016d4 <DpDiag_AddChannelRelDiagBlock>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	7d7b      	ldrb	r3, [r7, #21]
 8001bca:	4413      	add	r3, r2
 8001bcc:	757b      	strb	r3, [r7, #21]
      	      bDiagLength += DpDiag_AddDiagnosticAlarm( pbToDiagArray+bDiagLength, psAlarm );
 8001bce:	7d7b      	ldrb	r3, [r7, #21]
 8001bd0:	68fa      	ldr	r2, [r7, #12]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	6839      	ldr	r1, [r7, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff fdfe 	bl	80017d8 <DpDiag_AddDiagnosticAlarm>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	461a      	mov	r2, r3
 8001be0:	7d7b      	ldrb	r3, [r7, #21]
 8001be2:	4413      	add	r3, r2
 8001be4:	757b      	strb	r3, [r7, #21]
      	      break;
 8001be6:	e007      	b.n	8001bf8 <DpDiag_Alarm+0x3d4>
      	   case USER_TYPE_RESET_DIAG:
      	   case USER_TYPE_PRM_NOK:
      	   case USER_TYPE_PRM_OK:
      	   default:
      	   {
      	      printf("DEBUG: [DpDiag_Alarm] Caso default/otros\n");
 8001be8:	483d      	ldr	r0, [pc, #244]	; (8001ce0 <DpDiag_Alarm+0x4bc>)
 8001bea:	f007 f8fd 	bl	8008de8 <puts>
      	      bExtDiagFlag = 0x00;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	75bb      	strb	r3, [r7, #22]
      	      bDiagLength = 0x00;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	757b      	strb	r3, [r7, #21]
      	      break;
 8001bf6:	bf00      	nop
      	   }//default:
      	}//switch( bAlarmType )
      	
      	printf("DEBUG: [DpDiag_Alarm] Después del switch: bDiagLength=%d, bExtDiagFlag=0x%02X\n", bDiagLength, bExtDiagFlag);
 8001bf8:	7d7b      	ldrb	r3, [r7, #21]
 8001bfa:	7dba      	ldrb	r2, [r7, #22]
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4839      	ldr	r0, [pc, #228]	; (8001ce4 <DpDiag_Alarm+0x4c0>)
 8001c00:	f007 f856 	bl	8008cb0 <iprintf>
      	VPC3_SetDpState( eDpStateDiagActive );
 8001c04:	4b38      	ldr	r3, [pc, #224]	; (8001ce8 <DpDiag_Alarm+0x4c4>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	781a      	ldrb	r2, [r3, #0]
 8001c0a:	4b37      	ldr	r3, [pc, #220]	; (8001ce8 <DpDiag_Alarm+0x4c4>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f042 0210 	orr.w	r2, r2, #16
 8001c12:	b2d2      	uxtb	r2, r2
 8001c14:	701a      	strb	r2, [r3, #0]
      	printf("DEBUG: [DpDiag_Alarm] Estado diagnóstico activado\n");
 8001c16:	4835      	ldr	r0, [pc, #212]	; (8001cec <DpDiag_Alarm+0x4c8>)
 8001c18:	f007 f8e6 	bl	8008de8 <puts>
      	
      	printf("DEBUG: [DpDiag_Alarm] Llamando VPC3_SetDiagnosis con bDiagLength=%d, bExtDiagFlag=0x%02X, bCheckDiagFlag=%d\n", bDiagLength, bExtDiagFlag, bCheckDiagFlag);
 8001c1c:	7d79      	ldrb	r1, [r7, #21]
 8001c1e:	7dba      	ldrb	r2, [r7, #22]
 8001c20:	797b      	ldrb	r3, [r7, #5]
 8001c22:	4833      	ldr	r0, [pc, #204]	; (8001cf0 <DpDiag_Alarm+0x4cc>)
 8001c24:	f007 f844 	bl	8008cb0 <iprintf>
      	
      	// DEBUG: Mostrar contenido del buffer de diagnóstico
      	printf("DEBUG: [DpDiag_Alarm] Contenido del buffer de diagnóstico (%d bytes): ", bDiagLength);
 8001c28:	7d7b      	ldrb	r3, [r7, #21]
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4831      	ldr	r0, [pc, #196]	; (8001cf4 <DpDiag_Alarm+0x4d0>)
 8001c2e:	f007 f83f 	bl	8008cb0 <iprintf>
      	for (uint8_t i = 0; i < bDiagLength && i < 16; i++) {
 8001c32:	2300      	movs	r3, #0
 8001c34:	753b      	strb	r3, [r7, #20]
 8001c36:	e00b      	b.n	8001c50 <DpDiag_Alarm+0x42c>
      	    printf("0x%02X ", pDpSystem->abUserDiagnostic[i]);
 8001c38:	4b2b      	ldr	r3, [pc, #172]	; (8001ce8 <DpDiag_Alarm+0x4c4>)
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	7d3b      	ldrb	r3, [r7, #20]
 8001c3e:	4413      	add	r3, r2
 8001c40:	7b5b      	ldrb	r3, [r3, #13]
 8001c42:	4619      	mov	r1, r3
 8001c44:	482c      	ldr	r0, [pc, #176]	; (8001cf8 <DpDiag_Alarm+0x4d4>)
 8001c46:	f007 f833 	bl	8008cb0 <iprintf>
      	for (uint8_t i = 0; i < bDiagLength && i < 16; i++) {
 8001c4a:	7d3b      	ldrb	r3, [r7, #20]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	753b      	strb	r3, [r7, #20]
 8001c50:	7d3a      	ldrb	r2, [r7, #20]
 8001c52:	7d7b      	ldrb	r3, [r7, #21]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d202      	bcs.n	8001c5e <DpDiag_Alarm+0x43a>
 8001c58:	7d3b      	ldrb	r3, [r7, #20]
 8001c5a:	2b0f      	cmp	r3, #15
 8001c5c:	d9ec      	bls.n	8001c38 <DpDiag_Alarm+0x414>
      	}
      	printf("\n");
 8001c5e:	200a      	movs	r0, #10
 8001c60:	f007 f83e 	bl	8008ce0 <putchar>
      	
      	bRetValue = VPC3_SetDiagnosis( pDpSystem->abUserDiagnostic, bDiagLength, bExtDiagFlag, bCheckDiagFlag );
 8001c64:	4b20      	ldr	r3, [pc, #128]	; (8001ce8 <DpDiag_Alarm+0x4c4>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f103 000d 	add.w	r0, r3, #13
 8001c6c:	797b      	ldrb	r3, [r7, #5]
 8001c6e:	7dba      	ldrb	r2, [r7, #22]
 8001c70:	7d79      	ldrb	r1, [r7, #21]
 8001c72:	f001 ffc1 	bl	8003bf8 <VPC3_SetDiagnosis>
 8001c76:	4603      	mov	r3, r0
 8001c78:	75fb      	strb	r3, [r7, #23]
      	printf("DEBUG: [DpDiag_Alarm] VPC3_SetDiagnosis retornó: %d\n", bRetValue);
 8001c7a:	7dfb      	ldrb	r3, [r7, #23]
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	481f      	ldr	r0, [pc, #124]	; (8001cfc <DpDiag_Alarm+0x4d8>)
 8001c80:	f007 f816 	bl	8008cb0 <iprintf>
      	
      	if( bRetValue == DP_OK )
 8001c84:	7dfb      	ldrb	r3, [r7, #23]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d108      	bne.n	8001c9c <DpDiag_Alarm+0x478>
      	{
      	   printf("DEBUG: [DpDiag_Alarm] VPC3_SetDiagnosis exitoso, actualizando wOldDiag\n");
 8001c8a:	481d      	ldr	r0, [pc, #116]	; (8001d00 <DpDiag_Alarm+0x4dc>)
 8001c8c:	f007 f8ac 	bl	8008de8 <puts>
      	   pDpSystem->wOldDiag = wDiagEvent;
 8001c90:	4b15      	ldr	r3, [pc, #84]	; (8001ce8 <DpDiag_Alarm+0x4c4>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	8a7a      	ldrh	r2, [r7, #18]
 8001c96:	f8a3 2009 	strh.w	r2, [r3, #9]
 8001c9a:	e017      	b.n	8001ccc <DpDiag_Alarm+0x4a8>
      	}//if( bRetValue == DP_OK )
      	else
      	{
      	   printf("DEBUG: [DpDiag_Alarm] VPC3_SetDiagnosis falló, limpiando estado diagnóstico\n");
 8001c9c:	4819      	ldr	r0, [pc, #100]	; (8001d04 <DpDiag_Alarm+0x4e0>)
 8001c9e:	f007 f8a3 	bl	8008de8 <puts>
      	   VPC3_ClrDpState( eDpStateDiagActive );
 8001ca2:	4b11      	ldr	r3, [pc, #68]	; (8001ce8 <DpDiag_Alarm+0x4c4>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	781a      	ldrb	r2, [r3, #0]
 8001ca8:	4b0f      	ldr	r3, [pc, #60]	; (8001ce8 <DpDiag_Alarm+0x4c4>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 0210 	bic.w	r2, r2, #16
 8001cb0:	b2d2      	uxtb	r2, r2
 8001cb2:	701a      	strb	r2, [r3, #0]
 8001cb4:	e00a      	b.n	8001ccc <DpDiag_Alarm+0x4a8>
      	}//else of if( bRetValue == DP_OK )
   	}//if( !( VPC3_GetDpState( eDpStateDiagActive ) ))
      else
      {
         printf("DEBUG: [DpDiag_Alarm] Estado diagnóstico YA activo, retornando DP_DIAG_ACTIVE_DIAG\n");
 8001cb6:	4814      	ldr	r0, [pc, #80]	; (8001d08 <DpDiag_Alarm+0x4e4>)
 8001cb8:	f007 f896 	bl	8008de8 <puts>
         bRetValue = DP_DIAG_ACTIVE_DIAG;
 8001cbc:	2368      	movs	r3, #104	; 0x68
 8001cbe:	75fb      	strb	r3, [r7, #23]
 8001cc0:	e004      	b.n	8001ccc <DpDiag_Alarm+0x4a8>
      }//else of if( !( VPC3_GetDpState( eDpStateDiagActive ) ))
   }//if( wDiagEvent != pDpSystem->wOldDiag )
   else
   {
      printf("DEBUG: [DpDiag_Alarm] wDiagEvent == wOldDiag, retornando DP_DIAG_SAME_DIAG\n");
 8001cc2:	4812      	ldr	r0, [pc, #72]	; (8001d0c <DpDiag_Alarm+0x4e8>)
 8001cc4:	f007 f890 	bl	8008de8 <puts>
      bRetValue = DP_DIAG_SAME_DIAG;
 8001cc8:	2367      	movs	r3, #103	; 0x67
 8001cca:	75fb      	strb	r3, [r7, #23]
   }//else if( wDiagEvent != pDpSystem->wOldDiag )

   printf("DEBUG: [DpDiag_Alarm] FINAL - Retornando bRetValue=%d\n", bRetValue);
 8001ccc:	7dfb      	ldrb	r3, [r7, #23]
 8001cce:	4619      	mov	r1, r3
 8001cd0:	480f      	ldr	r0, [pc, #60]	; (8001d10 <DpDiag_Alarm+0x4ec>)
 8001cd2:	f006 ffed 	bl	8008cb0 <iprintf>
   return bRetValue;
 8001cd6:	7dfb      	ldrb	r3, [r7, #23]
}//DP_ERROR_CODE DpDiag_Alarm( uint8_t bAlarmType, uint8_t bSeqNr, ALARM_STATUS_PDU_PTR psAlarm, uint8_t bCheckDiagFlag )
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3718      	adds	r7, #24
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	0800ba7c 	.word	0x0800ba7c
 8001ce4:	0800baa8 	.word	0x0800baa8
 8001ce8:	20000000 	.word	0x20000000
 8001cec:	0800baf8 	.word	0x0800baf8
 8001cf0:	0800bb2c 	.word	0x0800bb2c
 8001cf4:	0800bb9c 	.word	0x0800bb9c
 8001cf8:	0800b5d8 	.word	0x0800b5d8
 8001cfc:	0800bbe4 	.word	0x0800bbe4
 8001d00:	0800bc1c 	.word	0x0800bc1c
 8001d04:	0800bc64 	.word	0x0800bc64
 8001d08:	0800bcb4 	.word	0x0800bcb4
 8001d0c:	0800bd08 	.word	0x0800bd08
 8001d10:	0800bd54 	.word	0x0800bd54

08001d14 <DpDiag_SetPrmOk>:
 * @return DP_OK - diagnostic is set
 * @return DP_DIAG_SAME_DIAG - no change necessary
 * @return other - diagnostic is not resettet yet, try again
 */
DP_ERROR_CODE DpDiag_SetPrmOk( DP_ERROR_CODE ePrmError )
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	71fb      	strb	r3, [r7, #7]
DP_ERROR_CODE bRetValue;
DP_ERROR_CODE bDiagRetValue;
uint8_t bLoop;

   bLoop = 0;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	73bb      	strb	r3, [r7, #14]
   bRetValue = DP_PRM_RETRY_ERROR;
 8001d22:	231c      	movs	r3, #28
 8001d24:	73fb      	strb	r3, [r7, #15]
   while( bLoop++ < MAX_DIAG_RETRY )
 8001d26:	e010      	b.n	8001d4a <DpDiag_SetPrmOk+0x36>
   {
      bDiagRetValue = DpDiag_Alarm( USER_TYPE_PRM_OK, 0, (ALARM_STATUS_PDU_PTR) VPC3_NULL_PTR, VPC3_FALSE );
 8001d28:	2300      	movs	r3, #0
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	20fb      	movs	r0, #251	; 0xfb
 8001d30:	f7ff fd78 	bl	8001824 <DpDiag_Alarm>
 8001d34:	4603      	mov	r3, r0
 8001d36:	737b      	strb	r3, [r7, #13]
      if( ( bDiagRetValue == DP_OK ) || ( bDiagRetValue == DP_DIAG_SAME_DIAG ) )
 8001d38:	7b7b      	ldrb	r3, [r7, #13]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d002      	beq.n	8001d44 <DpDiag_SetPrmOk+0x30>
 8001d3e:	7b7b      	ldrb	r3, [r7, #13]
 8001d40:	2b67      	cmp	r3, #103	; 0x67
 8001d42:	d102      	bne.n	8001d4a <DpDiag_SetPrmOk+0x36>
      {
         bRetValue = ePrmError;
 8001d44:	79fb      	ldrb	r3, [r7, #7]
 8001d46:	73fb      	strb	r3, [r7, #15]
         break;
 8001d48:	e004      	b.n	8001d54 <DpDiag_SetPrmOk+0x40>
   while( bLoop++ < MAX_DIAG_RETRY )
 8001d4a:	7bbb      	ldrb	r3, [r7, #14]
 8001d4c:	1c5a      	adds	r2, r3, #1
 8001d4e:	73ba      	strb	r2, [r7, #14]
 8001d50:	2b09      	cmp	r3, #9
 8001d52:	d9e9      	bls.n	8001d28 <DpDiag_SetPrmOk+0x14>
      }
   }

   return bRetValue;
 8001d54:	7bfb      	ldrb	r3, [r7, #15]
}//DP_ERROR_CODE DpDiag_SetPrmOk( DP_ERROR_CODE ePrmError )
 8001d56:	4618      	mov	r0, r3
 8001d58:	3710      	adds	r7, #16
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <DpDiag_SetPrmNotOk>:
 *
 * @return VPC3_TRUE - diagnostic is set
 * @return VPC3_FALSE - diagnostic is not resettet yet, try again
 */
DP_ERROR_CODE DpDiag_SetPrmNotOk( DP_ERROR_CODE ePrmError )
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b084      	sub	sp, #16
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	4603      	mov	r3, r0
 8001d66:	71fb      	strb	r3, [r7, #7]
DP_ERROR_CODE bRetValue;

uint8_t bLoop;

   bLoop = 0;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	73bb      	strb	r3, [r7, #14]
   bRetValue = DP_PRM_RETRY_ERROR;
 8001d6c:	231c      	movs	r3, #28
 8001d6e:	73fb      	strb	r3, [r7, #15]
   while( bLoop++ < MAX_DIAG_RETRY )
 8001d70:	e00b      	b.n	8001d8a <DpDiag_SetPrmNotOk+0x2c>
   {
      if( DpDiag_Alarm( USER_TYPE_PRM_NOK, 0, (ALARM_STATUS_PDU_PTR) VPC3_NULL_PTR, VPC3_FALSE ) == DP_OK )
 8001d72:	2300      	movs	r3, #0
 8001d74:	2200      	movs	r2, #0
 8001d76:	2100      	movs	r1, #0
 8001d78:	20fc      	movs	r0, #252	; 0xfc
 8001d7a:	f7ff fd53 	bl	8001824 <DpDiag_Alarm>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d102      	bne.n	8001d8a <DpDiag_SetPrmNotOk+0x2c>
      {
         bRetValue = ePrmError;
 8001d84:	79fb      	ldrb	r3, [r7, #7]
 8001d86:	73fb      	strb	r3, [r7, #15]
         break;
 8001d88:	e004      	b.n	8001d94 <DpDiag_SetPrmNotOk+0x36>
   while( bLoop++ < MAX_DIAG_RETRY )
 8001d8a:	7bbb      	ldrb	r3, [r7, #14]
 8001d8c:	1c5a      	adds	r2, r3, #1
 8001d8e:	73ba      	strb	r2, [r7, #14]
 8001d90:	2b09      	cmp	r3, #9
 8001d92:	d9ee      	bls.n	8001d72 <DpDiag_SetPrmNotOk+0x14>
      }
   }

   return bRetValue;
 8001d94:	7bfb      	ldrb	r3, [r7, #15]
}//DP_ERROR_CODE DpDiag_SetPrmNotOk( DP_ERROR_CODE ePrmError )
 8001d96:	4618      	mov	r0, r3
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
	...

08001da0 <DpDiag_SetCfgOk>:
 *
 * @return VPC3_TRUE - the static diagnostic is resettet
 * @return VPC3_FALSE - the static diagnostic is not resettet yet, try again
 */
E_DP_CFG_ERROR DpDiag_SetCfgOk( E_DP_CFG_ERROR eCfgError )
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	71fb      	strb	r3, [r7, #7]
E_DP_CFG_ERROR eRetValue;
uint8_t bLoop;

   bLoop = 0;
 8001daa:	2300      	movs	r3, #0
 8001dac:	73fb      	strb	r3, [r7, #15]
   
   //eRetValue = DP_CFG_FAULT;
   eRetValue = eCfgError;  // Preserve the original configuration result
 8001dae:	79fb      	ldrb	r3, [r7, #7]
 8001db0:	73bb      	strb	r3, [r7, #14]
   printf("DEBUG: [DpDiag_SetCfgOk] Entrando con eCfgError=%d\n", eCfgError);
 8001db2:	79fb      	ldrb	r3, [r7, #7]
 8001db4:	4619      	mov	r1, r3
 8001db6:	482e      	ldr	r0, [pc, #184]	; (8001e70 <DpDiag_SetCfgOk+0xd0>)
 8001db8:	f006 ff7a 	bl	8008cb0 <iprintf>
   printf("DEBUG: [DpDiag_SetCfgOk] eRetValue inicializado como eCfgError=%d\n", eRetValue);
 8001dbc:	7bbb      	ldrb	r3, [r7, #14]
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	482c      	ldr	r0, [pc, #176]	; (8001e74 <DpDiag_SetCfgOk+0xd4>)
 8001dc2:	f006 ff75 	bl	8008cb0 <iprintf>
   printf("DEBUG: [DpDiag_SetCfgOk] MAX_DIAG_RETRY=%d\n", MAX_DIAG_RETRY);
 8001dc6:	210a      	movs	r1, #10
 8001dc8:	482b      	ldr	r0, [pc, #172]	; (8001e78 <DpDiag_SetCfgOk+0xd8>)
 8001dca:	f006 ff71 	bl	8008cb0 <iprintf>
   
   while( bLoop++ < MAX_DIAG_RETRY )
 8001dce:	e026      	b.n	8001e1e <DpDiag_SetCfgOk+0x7e>
   {
      printf("DEBUG: [DpDiag_SetCfgOk] Intento %d: Llamando DpDiag_Alarm...\n", bLoop);
 8001dd0:	7bfb      	ldrb	r3, [r7, #15]
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4829      	ldr	r0, [pc, #164]	; (8001e7c <DpDiag_SetCfgOk+0xdc>)
 8001dd6:	f006 ff6b 	bl	8008cb0 <iprintf>
      printf("DEBUG: [DpDiag_SetCfgOk] Parámetros: USER_TYPE_CFG_OK=%d, 0x22, VPC3_NULL_PTR, VPC3_FALSE\n", USER_TYPE_CFG_OK);
 8001dda:	21fd      	movs	r1, #253	; 0xfd
 8001ddc:	4828      	ldr	r0, [pc, #160]	; (8001e80 <DpDiag_SetCfgOk+0xe0>)
 8001dde:	f006 ff67 	bl	8008cb0 <iprintf>
      
      if( DpDiag_Alarm( USER_TYPE_CFG_OK, 0x22, (ALARM_STATUS_PDU_PTR) VPC3_NULL_PTR, VPC3_FALSE ) == DP_OK )
 8001de2:	2300      	movs	r3, #0
 8001de4:	2200      	movs	r2, #0
 8001de6:	2122      	movs	r1, #34	; 0x22
 8001de8:	20fd      	movs	r0, #253	; 0xfd
 8001dea:	f7ff fd1b 	bl	8001824 <DpDiag_Alarm>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d10a      	bne.n	8001e0a <DpDiag_SetCfgOk+0x6a>
      {
         printf("DEBUG: [DpDiag_SetCfgOk] DpDiag_Alarm exitoso en intento %d\n", bLoop);
 8001df4:	7bfb      	ldrb	r3, [r7, #15]
 8001df6:	4619      	mov	r1, r3
 8001df8:	4822      	ldr	r0, [pc, #136]	; (8001e84 <DpDiag_SetCfgOk+0xe4>)
 8001dfa:	f006 ff59 	bl	8008cb0 <iprintf>
         printf("DEBUG: [DpDiag_SetCfgOk] eRetValue ANTES del break: %d\n", eRetValue);
 8001dfe:	7bbb      	ldrb	r3, [r7, #14]
 8001e00:	4619      	mov	r1, r3
 8001e02:	4821      	ldr	r0, [pc, #132]	; (8001e88 <DpDiag_SetCfgOk+0xe8>)
 8001e04:	f006 ff54 	bl	8008cb0 <iprintf>
         break;  // Success - keep the original eCfgError value
 8001e08:	e00e      	b.n	8001e28 <DpDiag_SetCfgOk+0x88>
      }
      printf("DEBUG: [DpDiag_SetCfgOk] DpDiag_Alarm falló en intento %d\n", bLoop);
 8001e0a:	7bfb      	ldrb	r3, [r7, #15]
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	481f      	ldr	r0, [pc, #124]	; (8001e8c <DpDiag_SetCfgOk+0xec>)
 8001e10:	f006 ff4e 	bl	8008cb0 <iprintf>
      printf("DEBUG: [DpDiag_SetCfgOk] eRetValue después del fallo: %d\n", eRetValue);
 8001e14:	7bbb      	ldrb	r3, [r7, #14]
 8001e16:	4619      	mov	r1, r3
 8001e18:	481d      	ldr	r0, [pc, #116]	; (8001e90 <DpDiag_SetCfgOk+0xf0>)
 8001e1a:	f006 ff49 	bl	8008cb0 <iprintf>
   while( bLoop++ < MAX_DIAG_RETRY )
 8001e1e:	7bfb      	ldrb	r3, [r7, #15]
 8001e20:	1c5a      	adds	r2, r3, #1
 8001e22:	73fa      	strb	r2, [r7, #15]
 8001e24:	2b09      	cmp	r3, #9
 8001e26:	d9d3      	bls.n	8001dd0 <DpDiag_SetCfgOk+0x30>
   }
   
   printf("DEBUG: [DpDiag_SetCfgOk] Bucle terminado. bLoop=%d\n", bLoop);
 8001e28:	7bfb      	ldrb	r3, [r7, #15]
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4819      	ldr	r0, [pc, #100]	; (8001e94 <DpDiag_SetCfgOk+0xf4>)
 8001e2e:	f006 ff3f 	bl	8008cb0 <iprintf>
   printf("DEBUG: [DpDiag_SetCfgOk] eRetValue FINAL: %d\n", eRetValue);
 8001e32:	7bbb      	ldrb	r3, [r7, #14]
 8001e34:	4619      	mov	r1, r3
 8001e36:	4818      	ldr	r0, [pc, #96]	; (8001e98 <DpDiag_SetCfgOk+0xf8>)
 8001e38:	f006 ff3a 	bl	8008cb0 <iprintf>
   printf("DEBUG: [DpDiag_SetCfgOk] eCfgError original: %d\n", eCfgError);
 8001e3c:	79fb      	ldrb	r3, [r7, #7]
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4816      	ldr	r0, [pc, #88]	; (8001e9c <DpDiag_SetCfgOk+0xfc>)
 8001e42:	f006 ff35 	bl	8008cb0 <iprintf>
   printf("DEBUG: [DpDiag_SetCfgOk] ¿Debería retornar eCfgError en lugar de eRetValue? %s\n", (eCfgError != eRetValue) ? "SÍ" : "NO");
 8001e46:	79fa      	ldrb	r2, [r7, #7]
 8001e48:	7bbb      	ldrb	r3, [r7, #14]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d001      	beq.n	8001e52 <DpDiag_SetCfgOk+0xb2>
 8001e4e:	4b14      	ldr	r3, [pc, #80]	; (8001ea0 <DpDiag_SetCfgOk+0x100>)
 8001e50:	e000      	b.n	8001e54 <DpDiag_SetCfgOk+0xb4>
 8001e52:	4b14      	ldr	r3, [pc, #80]	; (8001ea4 <DpDiag_SetCfgOk+0x104>)
 8001e54:	4619      	mov	r1, r3
 8001e56:	4814      	ldr	r0, [pc, #80]	; (8001ea8 <DpDiag_SetCfgOk+0x108>)
 8001e58:	f006 ff2a 	bl	8008cb0 <iprintf>
   
   // If all retries failed, still return the original configuration result
   // The diagnostic alarm failure should not override the configuration validation
   printf("DEBUG: [DpDiag_SetCfgOk] Retornando eRetValue=%d\n", eRetValue);
 8001e5c:	7bbb      	ldrb	r3, [r7, #14]
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4812      	ldr	r0, [pc, #72]	; (8001eac <DpDiag_SetCfgOk+0x10c>)
 8001e62:	f006 ff25 	bl	8008cb0 <iprintf>

   return eRetValue;
 8001e66:	7bbb      	ldrb	r3, [r7, #14]
}//E_DP_CFG_ERROR DpDiag_SetCfgOk( E_DP_CFG_ERROR eCfgError )
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3710      	adds	r7, #16
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	0800bd8c 	.word	0x0800bd8c
 8001e74:	0800bdc0 	.word	0x0800bdc0
 8001e78:	0800be04 	.word	0x0800be04
 8001e7c:	0800be30 	.word	0x0800be30
 8001e80:	0800be70 	.word	0x0800be70
 8001e84:	0800becc 	.word	0x0800becc
 8001e88:	0800bf0c 	.word	0x0800bf0c
 8001e8c:	0800bf44 	.word	0x0800bf44
 8001e90:	0800bf80 	.word	0x0800bf80
 8001e94:	0800bfbc 	.word	0x0800bfbc
 8001e98:	0800bff0 	.word	0x0800bff0
 8001e9c:	0800c020 	.word	0x0800c020
 8001ea0:	0800c054 	.word	0x0800c054
 8001ea4:	0800c058 	.word	0x0800c058
 8001ea8:	0800c05c 	.word	0x0800c05c
 8001eac:	0800c0b0 	.word	0x0800c0b0

08001eb0 <DpDiag_SetCfgNotOk>:
 *
 * @return VPC3_TRUE - the static diagnostic bit is set.
 * @return VPC3_FALSE - the static diagnostic bit is not set yet, try again
 */
uint8_t DpDiag_SetCfgNotOk( void )
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
   if( DpDiag_Alarm( USER_TYPE_CFG_NOK,  0x23, (ALARM_STATUS_PDU_PTR) VPC3_NULL_PTR, VPC3_FALSE ) == DP_OK )
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	2123      	movs	r1, #35	; 0x23
 8001eba:	20fe      	movs	r0, #254	; 0xfe
 8001ebc:	f7ff fcb2 	bl	8001824 <DpDiag_Alarm>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d101      	bne.n	8001eca <DpDiag_SetCfgNotOk+0x1a>
   {
      return VPC3_TRUE;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e000      	b.n	8001ecc <DpDiag_SetCfgNotOk+0x1c>
   }

   return VPC3_FALSE;
 8001eca:	2300      	movs	r3, #0
}//uint8_t DpDiag_SetCfgNotOk( void )
 8001ecc:	4618      	mov	r0, r3
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <DpDiag_ResetStatDiag>:
 *
 * @return VPC3_TRUE - the static diagnostic bit is resettet
 * @return VPC3_FALSE - the static diagnostic bit is not resettet yet, try again
 */
uint8_t DpDiag_ResetStatDiag( void )
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
   if( DpDiag_Alarm( USER_TYPE_APPL_RDY, 0, (ALARM_STATUS_PDU_PTR) VPC3_NULL_PTR, VPC3_FALSE ) == DP_OK )
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	2100      	movs	r1, #0
 8001eda:	20ff      	movs	r0, #255	; 0xff
 8001edc:	f7ff fca2 	bl	8001824 <DpDiag_Alarm>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d101      	bne.n	8001eea <DpDiag_ResetStatDiag+0x1a>
   {
      return VPC3_TRUE;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e000      	b.n	8001eec <DpDiag_ResetStatDiag+0x1c>
   }
   return VPC3_FALSE;
 8001eea:	2300      	movs	r3, #0
}//uint8_t DpDiag_ResetStatDiag( void )
 8001eec:	4618      	mov	r0, r3
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <DpDiag_IsrDiagBufferChanged>:
/**
 * @brief The function VPC3_Isr() or VPC3_Poll() calls this function if the VPC3+ has
 * exchanged the diagnostic buffers, and made the old buffer available again to the user.
 */
void DpDiag_IsrDiagBufferChanged( void )
{
 8001ef0:	b598      	push	{r3, r4, r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
   // diagnosis buffer has been changed
   VPC3_ClrDpState( eDpStateDiagActive );
 8001ef4:	4b08      	ldr	r3, [pc, #32]	; (8001f18 <DpDiag_IsrDiagBufferChanged+0x28>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	781a      	ldrb	r2, [r3, #0]
 8001efa:	4b07      	ldr	r3, [pc, #28]	; (8001f18 <DpDiag_IsrDiagBufferChanged+0x28>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f022 0210 	bic.w	r2, r2, #16
 8001f02:	b2d2      	uxtb	r2, r2
 8001f04:	701a      	strb	r2, [r3, #0]
   // Fetch new diagnosis buffer
   pDpSystem->pDiagBuffer = VPC3_GetDiagBufPtr();
 8001f06:	4b04      	ldr	r3, [pc, #16]	; (8001f18 <DpDiag_IsrDiagBufferChanged+0x28>)
 8001f08:	681c      	ldr	r4, [r3, #0]
 8001f0a:	f001 fcf1 	bl	80038f0 <VPC3_GetDiagBufPtr>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	f8c4 305e 	str.w	r3, [r4, #94]	; 0x5e
}//void DpDiag_IsrDiagBufferChanged( void )
 8001f14:	bf00      	nop
 8001f16:	bd98      	pop	{r3, r4, r7, pc}
 8001f18:	20000000 	.word	0x20000000

08001f1c <DpDiag_SetDefIdentRelDiag>:
/*---------------------------------------------------------------------------*/
/**
 * @brief Set identifier related diagnostic block to default values.
 */
void DpDiag_SetDefIdentRelDiag( void )
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
uint8_t abIdentRelDiag[] = { 0x42,0x3F };
 8001f22:	f643 7342 	movw	r3, #16194	; 0x3f42
 8001f26:	80bb      	strh	r3, [r7, #4]
 8001f28:	88bb      	ldrh	r3, [r7, #4]

   memcpy( &sIdentRelDiag.bHeader, &abIdentRelDiag, cSizeOfIdentifierDiagnosis );
 8001f2a:	4a04      	ldr	r2, [pc, #16]	; (8001f3c <DpDiag_SetDefIdentRelDiag+0x20>)
 8001f2c:	8013      	strh	r3, [r2, #0]
}//void DpDiag_SetDefIdentRelDiag( void )
 8001f2e:	bf00      	nop
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	200004d0 	.word	0x200004d0

08001f40 <DpDiag_SetIdentRelDiagEntry>:
 * @brief Set identifier related diagnostic of module on SliceBus.
 *
 * @param[in] bModNr - module number
 */
void DpDiag_SetIdentRelDiagEntry( uint8_t bModNr )
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	71fb      	strb	r3, [r7, #7]
   sIdentRelDiag.abIdentRelDiag[ bModNr/8 ] |= (DIAG_IR_FAULT << (bModNr%8));
 8001f4a:	79fb      	ldrb	r3, [r7, #7]
 8001f4c:	08db      	lsrs	r3, r3, #3
 8001f4e:	b2d8      	uxtb	r0, r3
 8001f50:	4602      	mov	r2, r0
 8001f52:	4b0c      	ldr	r3, [pc, #48]	; (8001f84 <DpDiag_SetIdentRelDiagEntry+0x44>)
 8001f54:	4413      	add	r3, r2
 8001f56:	785b      	ldrb	r3, [r3, #1]
 8001f58:	b25a      	sxtb	r2, r3
 8001f5a:	79fb      	ldrb	r3, [r7, #7]
 8001f5c:	f003 0307 	and.w	r3, r3, #7
 8001f60:	2101      	movs	r1, #1
 8001f62:	fa01 f303 	lsl.w	r3, r1, r3
 8001f66:	b25b      	sxtb	r3, r3
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	b25b      	sxtb	r3, r3
 8001f6c:	4601      	mov	r1, r0
 8001f6e:	b2da      	uxtb	r2, r3
 8001f70:	4b04      	ldr	r3, [pc, #16]	; (8001f84 <DpDiag_SetIdentRelDiagEntry+0x44>)
 8001f72:	440b      	add	r3, r1
 8001f74:	705a      	strb	r2, [r3, #1]
}//void DpDiag_SetIdentRelDiagEntry( uint8_t bModNr )
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	200004d0 	.word	0x200004d0

08001f88 <DpDiag_ClrIdentRelDiagEntry>:
 * @brief Clear identifier related diagnostic of module on SliceBus.
 *
 * @param[in] bModNr - module number
 */
void DpDiag_ClrIdentRelDiagEntry( uint8_t bModNr )
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4603      	mov	r3, r0
 8001f90:	71fb      	strb	r3, [r7, #7]
   sIdentRelDiag.abIdentRelDiag[ bModNr/8 ] &= ~(DIAG_IR_FAULT << (bModNr%8));
 8001f92:	79fb      	ldrb	r3, [r7, #7]
 8001f94:	08db      	lsrs	r3, r3, #3
 8001f96:	b2d8      	uxtb	r0, r3
 8001f98:	4602      	mov	r2, r0
 8001f9a:	4b0d      	ldr	r3, [pc, #52]	; (8001fd0 <DpDiag_ClrIdentRelDiagEntry+0x48>)
 8001f9c:	4413      	add	r3, r2
 8001f9e:	785b      	ldrb	r3, [r3, #1]
 8001fa0:	b25a      	sxtb	r2, r3
 8001fa2:	79fb      	ldrb	r3, [r7, #7]
 8001fa4:	f003 0307 	and.w	r3, r3, #7
 8001fa8:	2101      	movs	r1, #1
 8001faa:	fa01 f303 	lsl.w	r3, r1, r3
 8001fae:	b25b      	sxtb	r3, r3
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	b25b      	sxtb	r3, r3
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	b25b      	sxtb	r3, r3
 8001fb8:	4601      	mov	r1, r0
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	4b04      	ldr	r3, [pc, #16]	; (8001fd0 <DpDiag_ClrIdentRelDiagEntry+0x48>)
 8001fbe:	440b      	add	r3, r1
 8001fc0:	705a      	strb	r2, [r3, #1]
}//void DpDiag_ClrIdentRelDiagEntry( uint8_t bModNr )
 8001fc2:	bf00      	nop
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	200004d0 	.word	0x200004d0

08001fd4 <DpDiag_SetDefModuleStatDiag>:
/*---------------------------------------------------------------------------*/
/**
 * @brief Set moduls status diagnostic block to default values.
 */
void DpDiag_SetDefModuleStatDiag( void )
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
uint8_t abModStatDiag[] = { 0x06,0x82,0x00,0x00,0xAA,0x0A };
 8001fda:	4a0a      	ldr	r2, [pc, #40]	; (8002004 <DpDiag_SetDefModuleStatDiag+0x30>)
 8001fdc:	463b      	mov	r3, r7
 8001fde:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001fe2:	6018      	str	r0, [r3, #0]
 8001fe4:	3304      	adds	r3, #4
 8001fe6:	8019      	strh	r1, [r3, #0]

   memcpy( &sModuleStatDiag.bHeader, &abModStatDiag, cSizeOfModuleStatusDiagnosis );
 8001fe8:	4b07      	ldr	r3, [pc, #28]	; (8002008 <DpDiag_SetDefModuleStatDiag+0x34>)
 8001fea:	461a      	mov	r2, r3
 8001fec:	463b      	mov	r3, r7
 8001fee:	6818      	ldr	r0, [r3, #0]
 8001ff0:	6010      	str	r0, [r2, #0]
 8001ff2:	889b      	ldrh	r3, [r3, #4]
 8001ff4:	8093      	strh	r3, [r2, #4]
}//void DpDiag_SetDefModuleStatDiag( void )
 8001ff6:	bf00      	nop
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	0800c0fc 	.word	0x0800c0fc
 8002008:	200004d4 	.word	0x200004d4

0800200c <DpDiag_SetModulStatusEntry>:
 *
 * @param[in] bModNr - number of module
 * @param[in] eMs - module status type
 */
void DpDiag_SetModulStatusEntry( uint8_t bModNr, E_DP_DIAG_MS eMs )
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	4603      	mov	r3, r0
 8002014:	460a      	mov	r2, r1
 8002016:	71fb      	strb	r3, [r7, #7]
 8002018:	4613      	mov	r3, r2
 800201a:	71bb      	strb	r3, [r7, #6]
   sModuleStatDiag.abModuleStatus[ bModNr/4 ] &= ~(DIAG_MS_NO_MODULE << ((bModNr%4)*2));
 800201c:	79fb      	ldrb	r3, [r7, #7]
 800201e:	089b      	lsrs	r3, r3, #2
 8002020:	b2d8      	uxtb	r0, r3
 8002022:	4602      	mov	r2, r0
 8002024:	4b18      	ldr	r3, [pc, #96]	; (8002088 <DpDiag_SetModulStatusEntry+0x7c>)
 8002026:	4413      	add	r3, r2
 8002028:	791b      	ldrb	r3, [r3, #4]
 800202a:	b25a      	sxtb	r2, r3
 800202c:	79fb      	ldrb	r3, [r7, #7]
 800202e:	f003 0303 	and.w	r3, r3, #3
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	2103      	movs	r1, #3
 8002036:	fa01 f303 	lsl.w	r3, r1, r3
 800203a:	b25b      	sxtb	r3, r3
 800203c:	43db      	mvns	r3, r3
 800203e:	b25b      	sxtb	r3, r3
 8002040:	4013      	ands	r3, r2
 8002042:	b25b      	sxtb	r3, r3
 8002044:	4601      	mov	r1, r0
 8002046:	b2da      	uxtb	r2, r3
 8002048:	4b0f      	ldr	r3, [pc, #60]	; (8002088 <DpDiag_SetModulStatusEntry+0x7c>)
 800204a:	440b      	add	r3, r1
 800204c:	711a      	strb	r2, [r3, #4]
   sModuleStatDiag.abModuleStatus[ bModNr/4 ] |= (eMs << ((bModNr%4)*2));
 800204e:	79fb      	ldrb	r3, [r7, #7]
 8002050:	089b      	lsrs	r3, r3, #2
 8002052:	b2d8      	uxtb	r0, r3
 8002054:	4602      	mov	r2, r0
 8002056:	4b0c      	ldr	r3, [pc, #48]	; (8002088 <DpDiag_SetModulStatusEntry+0x7c>)
 8002058:	4413      	add	r3, r2
 800205a:	791b      	ldrb	r3, [r3, #4]
 800205c:	b25a      	sxtb	r2, r3
 800205e:	79b9      	ldrb	r1, [r7, #6]
 8002060:	79fb      	ldrb	r3, [r7, #7]
 8002062:	f003 0303 	and.w	r3, r3, #3
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	fa01 f303 	lsl.w	r3, r1, r3
 800206c:	b25b      	sxtb	r3, r3
 800206e:	4313      	orrs	r3, r2
 8002070:	b25b      	sxtb	r3, r3
 8002072:	4601      	mov	r1, r0
 8002074:	b2da      	uxtb	r2, r3
 8002076:	4b04      	ldr	r3, [pc, #16]	; (8002088 <DpDiag_SetModulStatusEntry+0x7c>)
 8002078:	440b      	add	r3, r1
 800207a:	711a      	strb	r2, [r3, #4]
}//void DpDiag_SetModulStatusEntry( uint8_t bModNr, E_DP_DIAG_MS eMs )
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	200004d4 	.word	0x200004d4

0800208c <DpDiag_CheckDpv0Diagnosis>:

/*--------------------------------------------------------------------------*/
/* function: DpDiag_CheckDpv0Diagnosis                                      */
/*--------------------------------------------------------------------------*/
void DpDiag_CheckDpv0Diagnosis( void )
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
   // Check for overload alarm
   if (sSystem.sInput.abDi8[0] & 0x01) {
 8002090:	4b18      	ldr	r3, [pc, #96]	; (80020f4 <DpDiag_CheckDpv0Diagnosis+0x68>)
 8002092:	785b      	ldrb	r3, [r3, #1]
 8002094:	f003 0301 	and.w	r3, r3, #1
 8002098:	2b00      	cmp	r3, #0
 800209a:	d005      	beq.n	80020a8 <DpDiag_CheckDpv0Diagnosis+0x1c>
       DpDiag_Alarm(USER_TYPE_DPV0, ALARM_OVERLOAD, NULL, VPC3_TRUE);
 800209c:	2301      	movs	r3, #1
 800209e:	2200      	movs	r2, #0
 80020a0:	2101      	movs	r1, #1
 80020a2:	20fa      	movs	r0, #250	; 0xfa
 80020a4:	f7ff fbbe 	bl	8001824 <DpDiag_Alarm>
   }

   // Check for over temperature alarm
   if (sSystem.sInput.abDi8[0] & 0x02) {
 80020a8:	4b12      	ldr	r3, [pc, #72]	; (80020f4 <DpDiag_CheckDpv0Diagnosis+0x68>)
 80020aa:	785b      	ldrb	r3, [r3, #1]
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d005      	beq.n	80020c0 <DpDiag_CheckDpv0Diagnosis+0x34>
       DpDiag_Alarm(USER_TYPE_DPV0, ALARM_OVER_TEMP, NULL, VPC3_TRUE);
 80020b4:	2301      	movs	r3, #1
 80020b6:	2200      	movs	r2, #0
 80020b8:	2102      	movs	r1, #2
 80020ba:	20fa      	movs	r0, #250	; 0xfa
 80020bc:	f7ff fbb2 	bl	8001824 <DpDiag_Alarm>
   }

   // Check for power loss alarm
   if (sSystem.sInput.abDi8[0] & 0x04) {
 80020c0:	4b0c      	ldr	r3, [pc, #48]	; (80020f4 <DpDiag_CheckDpv0Diagnosis+0x68>)
 80020c2:	785b      	ldrb	r3, [r3, #1]
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d005      	beq.n	80020d8 <DpDiag_CheckDpv0Diagnosis+0x4c>
       DpDiag_Alarm(USER_TYPE_DPV0, ALARM_POWER_LOSS, NULL, VPC3_TRUE);
 80020cc:	2301      	movs	r3, #1
 80020ce:	2200      	movs	r2, #0
 80020d0:	2103      	movs	r1, #3
 80020d2:	20fa      	movs	r0, #250	; 0xfa
 80020d4:	f7ff fba6 	bl	8001824 <DpDiag_Alarm>
   }

   // Check for relay status alarm
   if (sSystem.sInput.abDi8[0] & 0x08) {
 80020d8:	4b06      	ldr	r3, [pc, #24]	; (80020f4 <DpDiag_CheckDpv0Diagnosis+0x68>)
 80020da:	785b      	ldrb	r3, [r3, #1]
 80020dc:	f003 0308 	and.w	r3, r3, #8
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d005      	beq.n	80020f0 <DpDiag_CheckDpv0Diagnosis+0x64>
       DpDiag_Alarm(USER_TYPE_DPV0, ALARM_RELAY_STATUS, NULL, VPC3_TRUE);
 80020e4:	2301      	movs	r3, #1
 80020e6:	2200      	movs	r2, #0
 80020e8:	2104      	movs	r1, #4
 80020ea:	20fa      	movs	r0, #250	; 0xfa
 80020ec:	f7ff fb9a 	bl	8001824 <DpDiag_Alarm>
   }
}
 80020f0:	bf00      	nop
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	20000198 	.word	0x20000198

080020f8 <DpPrm_Init>:
 * @brief Initializes local structures.
 *
 * This function is called during startup and with each received parameter telegram from PROFIBUS-DP master.
 */
void DpPrm_Init( void )
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
   pDpSystem->eDPV1 = DPV0_MODE;
 80020fc:	4b04      	ldr	r3, [pc, #16]	; (8002110 <DpPrm_Init+0x18>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}//void DpPrm_Init( void )
 8002106:	bf00      	nop
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	20000000 	.word	0x20000000

08002114 <DpPrm_ChkDpv1StatusBytes>:
 * @param[in]bDpv1Status3    DP-V1 status byte 3
 * @return DP_OK - The check of DP-V1 status bytes is OK.
 * @return DP_PRM_DPV1_STATUS - The check of DP-V1 status bytes isn't OK. @see DP_ERROR_CODE
 */
static DP_ERROR_CODE DpPrm_ChkDpv1StatusBytes( uint8_t bDpv1Status1, uint8_t bDpv1Status2, uint8_t bDpv1Status3 )
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	4603      	mov	r3, r0
 800211c:	71fb      	strb	r3, [r7, #7]
 800211e:	460b      	mov	r3, r1
 8002120:	71bb      	strb	r3, [r7, #6]
 8002122:	4613      	mov	r3, r2
 8002124:	717b      	strb	r3, [r7, #5]
DP_ERROR_CODE eRetValue;

   eRetValue = DP_OK;
 8002126:	2301      	movs	r3, #1
 8002128:	73fb      	strb	r3, [r7, #15]

   if( pDpSystem->eDPV1 == DPV1_MODE )
 800212a:	4b0e      	ldr	r3, [pc, #56]	; (8002164 <DpPrm_ChkDpv1StatusBytes+0x50>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8002132:	2b01      	cmp	r3, #1
 8002134:	d102      	bne.n	800213c <DpPrm_ChkDpv1StatusBytes+0x28>
   {
      eRetValue = DP_PRM_DPV1_STATUS;
 8002136:	2322      	movs	r3, #34	; 0x22
 8002138:	73fb      	strb	r3, [r7, #15]
 800213a:	e00c      	b.n	8002156 <DpPrm_ChkDpv1StatusBytes+0x42>
   }//if( pDpSystem->eDPV1 == DPV1_MODE )
   else
   {
      //DPV0-Mode
      if(    (( bDpv1Status1 & 0xF8 ) != 0x00 )
 800213c:	79fb      	ldrb	r3, [r7, #7]
 800213e:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8002142:	2b00      	cmp	r3, #0
 8002144:	d105      	bne.n	8002152 <DpPrm_ChkDpv1StatusBytes+0x3e>
          || (( bDpv1Status2 & 0xFF ) != 0x00 )
 8002146:	79bb      	ldrb	r3, [r7, #6]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d102      	bne.n	8002152 <DpPrm_ChkDpv1StatusBytes+0x3e>
          || (( bDpv1Status3 & 0xFF ) != 0x00 )
 800214c:	797b      	ldrb	r3, [r7, #5]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <DpPrm_ChkDpv1StatusBytes+0x42>
        )
      {
         eRetValue = DP_PRM_DPV1_STATUS;
 8002152:	2322      	movs	r3, #34	; 0x22
 8002154:	73fb      	strb	r3, [r7, #15]
      }
   }//else of if( pDpSystem->eDPV1 == DPV1_MODE )

   return eRetValue;
 8002156:	7bfb      	ldrb	r3, [r7, #15]
}//static DP_ERROR_CODE DpPrm_ChkDpv1StatusBytes( uint8_t bDpv1Status1, uint8_t bDpv1Status2, uint8_t bDpv1Status3 )
 8002158:	4618      	mov	r0, r3
 800215a:	3714      	adds	r7, #20
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	20000000 	.word	0x20000000

08002168 <DpPrm_ChkPrmCounterModulePrm>:
 *
 * @return DP_OK - The check of parameter is OK.
 * @return DP_NOK - The check of parameter is not OK.
 */
DP_ERROR_CODE DpPrm_ChkPrmCounterModulePrm( MEM_STRUC_MODULE_PRM_BLOCK_PTR psModuleBlock )
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
DP_ERROR_CODE bRetValue;

   bRetValue = DP_OK;
 8002170:	2301      	movs	r3, #1
 8002172:	73fb      	strb	r3, [r7, #15]

   if( psModuleBlock->bLength == 0x09 )
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	2b09      	cmp	r3, #9
 800217a:	d119      	bne.n	80021b0 <DpPrm_ChkPrmCounterModulePrm+0x48>
   {
      //copy counter parameter data
      memcpy( &sSystem.sPrmCounter, &psModuleBlock->bData, psModuleBlock->bLength-2 );
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	1c99      	adds	r1, r3, #2
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	3b02      	subs	r3, #2
 8002186:	461a      	mov	r2, r3
 8002188:	480d      	ldr	r0, [pc, #52]	; (80021c0 <DpPrm_ChkPrmCounterModulePrm+0x58>)
 800218a:	f006 fd7b 	bl	8008c84 <memcpy>

      //check parameter of counter module
      if(    ( sSystem.sPrmCounter.bAlarm    &  0xFC )        //check alarm
 800218e:	4b0d      	ldr	r3, [pc, #52]	; (80021c4 <DpPrm_ChkPrmCounterModulePrm+0x5c>)
 8002190:	7c9b      	ldrb	r3, [r3, #18]
 8002192:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8002196:	2b00      	cmp	r3, #0
 8002198:	d107      	bne.n	80021aa <DpPrm_ChkPrmCounterModulePrm+0x42>
          || ( sSystem.sPrmCounter.bMode     >  0x01 )        //check counter mode
 800219a:	4b0a      	ldr	r3, [pc, #40]	; (80021c4 <DpPrm_ChkPrmCounterModulePrm+0x5c>)
 800219c:	7cdb      	ldrb	r3, [r3, #19]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d803      	bhi.n	80021aa <DpPrm_ChkPrmCounterModulePrm+0x42>
          || ( sSystem.sPrmCounter.bTimeBase >  0x05 )        //check counter timebase
 80021a2:	4b08      	ldr	r3, [pc, #32]	; (80021c4 <DpPrm_ChkPrmCounterModulePrm+0x5c>)
 80021a4:	7d1b      	ldrb	r3, [r3, #20]
 80021a6:	2b05      	cmp	r3, #5
 80021a8:	d904      	bls.n	80021b4 <DpPrm_ChkPrmCounterModulePrm+0x4c>
        )
      {
         //error
         bRetValue = DP_PRM_ENTRY_ERROR;
 80021aa:	2320      	movs	r3, #32
 80021ac:	73fb      	strb	r3, [r7, #15]
 80021ae:	e001      	b.n	80021b4 <DpPrm_ChkPrmCounterModulePrm+0x4c>
      }//if(    ( sSystem.sPrmCounter.bAlarm     &  0xFC ) ...
   }//if( ( psModuleBlock->bLength + PRM_LEN_DPV1 ) == 0x13 )
   else
   {
      //length error
      bRetValue = DP_PRM_USER_PRM_BLOCK_ERROR;
 80021b0:	232a      	movs	r3, #42	; 0x2a
 80021b2:	73fb      	strb	r3, [r7, #15]
   }//else of if( ( psModuleBlock->bLength + PRM_LEN_DPV1 ) == 0x13 )

   return bRetValue;
 80021b4:	7bfb      	ldrb	r3, [r7, #15]
}//DP_ERROR_CODE DpPrm_ChkPrmCounterModulePrm( MEM_STRUC_MODULE_PRM_BLOCK_PTR psModuleBlock )
 80021b6:	4618      	mov	r0, r3
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	200001aa 	.word	0x200001aa
 80021c4:	20000198 	.word	0x20000198

080021c8 <DpPrm_ChkNewPrmData>:
 *
 * @return DP_OK - The transferred parameterization is OK.
 * @return DP_NOK - The transferred parameterization isn't OK.
 */
DP_ERROR_CODE DpPrm_ChkNewPrmData( MEM_UNSIGNED8_PTR pbPrmData, uint8_t bPrmLength )
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	460b      	mov	r3, r1
 80021d2:	70fb      	strb	r3, [r7, #3]
MEM_STRUC_PRM_PTR psToPrmData;
DP_ERROR_CODE     eRetValue;

   DpPrm_Init();
 80021d4:	f7ff ff90 	bl	80020f8 <DpPrm_Init>

   eRetValue = DP_OK;
 80021d8:	2301      	movs	r3, #1
 80021da:	73fb      	strb	r3, [r7, #15]

   if( bPrmLength == 0x13 )
 80021dc:	78fb      	ldrb	r3, [r7, #3]
 80021de:	2b13      	cmp	r3, #19
 80021e0:	d11f      	bne.n	8002222 <DpPrm_ChkNewPrmData+0x5a>
   {
      psToPrmData = ( MEM_STRUC_PRM_PTR )pbPrmData;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	60bb      	str	r3, [r7, #8]

      //DPV1 Statusbyte 1
      pDpSystem->eDPV1 = ( psToPrmData->bDpv1Status1 & DPV1_STATUS_1_DPV1_ENABLE )? DPV1_MODE : DPV0_MODE;
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	79da      	ldrb	r2, [r3, #7]
 80021ea:	4b20      	ldr	r3, [pc, #128]	; (800226c <DpPrm_ChkNewPrmData+0xa4>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	09d2      	lsrs	r2, r2, #7
 80021f0:	b2d2      	uxtb	r2, r2
 80021f2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

      eRetValue = DpPrm_ChkDpv1StatusBytes( psToPrmData->bDpv1Status1, psToPrmData->bDpv1Status2, psToPrmData->bDpv1Status3 );
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	79d8      	ldrb	r0, [r3, #7]
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	7a19      	ldrb	r1, [r3, #8]
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	7a5b      	ldrb	r3, [r3, #9]
 8002202:	461a      	mov	r2, r3
 8002204:	f7ff ff86 	bl	8002114 <DpPrm_ChkDpv1StatusBytes>
 8002208:	4603      	mov	r3, r0
 800220a:	73fb      	strb	r3, [r7, #15]

      if( eRetValue == DP_OK )
 800220c:	7bfb      	ldrb	r3, [r7, #15]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d109      	bne.n	8002226 <DpPrm_ChkNewPrmData+0x5e>
      {
         //user parameter data
         eRetValue = DpPrm_ChkPrmCounterModulePrm( (MEM_STRUC_MODULE_PRM_BLOCK_PTR)&psToPrmData->bUserPrmData );
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	330a      	adds	r3, #10
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff ffa6 	bl	8002168 <DpPrm_ChkPrmCounterModulePrm>
 800221c:	4603      	mov	r3, r0
 800221e:	73fb      	strb	r3, [r7, #15]
 8002220:	e001      	b.n	8002226 <DpPrm_ChkNewPrmData+0x5e>
      }//if( eRetValue == DP_OK )
   }//if( bPrmLength == 0x13 )
   else
   {
      eRetValue = DP_PRM_LEN_ERROR;
 8002222:	2316      	movs	r3, #22
 8002224:	73fb      	strb	r3, [r7, #15]
   }//else of if( bPrmLength == 0x13 )

   if( ( VPC3_GET_DP_STATE() == DATA_EX ) && ( eRetValue == DP_OK ) )
 8002226:	4b12      	ldr	r3, [pc, #72]	; (8002270 <DpPrm_ChkNewPrmData+0xa8>)
 8002228:	881b      	ldrh	r3, [r3, #0]
 800222a:	3304      	adds	r3, #4
 800222c:	b29b      	uxth	r3, r3
 800222e:	4618      	mov	r0, r3
 8002230:	f003 fe5e 	bl	8005ef0 <Vpc3Read>
 8002234:	4603      	mov	r3, r0
 8002236:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800223a:	2b02      	cmp	r3, #2
 800223c:	d102      	bne.n	8002244 <DpPrm_ChkNewPrmData+0x7c>
 800223e:	7bfb      	ldrb	r3, [r7, #15]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d00e      	beq.n	8002262 <DpPrm_ChkNewPrmData+0x9a>
   {
      //don't send diagnostic here
   }//if( ( VPC3_GET_DP_STATE() == DATA_EX ) && ( eRetValue == DP_OK ) )
   else
   {
      eRetValue = ( eRetValue == DP_OK ) ? DpDiag_SetPrmOk( eRetValue ) : DpDiag_SetPrmNotOk( eRetValue );
 8002244:	7bfb      	ldrb	r3, [r7, #15]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d105      	bne.n	8002256 <DpPrm_ChkNewPrmData+0x8e>
 800224a:	7bfb      	ldrb	r3, [r7, #15]
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff fd61 	bl	8001d14 <DpDiag_SetPrmOk>
 8002252:	4603      	mov	r3, r0
 8002254:	e004      	b.n	8002260 <DpPrm_ChkNewPrmData+0x98>
 8002256:	7bfb      	ldrb	r3, [r7, #15]
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff fd80 	bl	8001d5e <DpDiag_SetPrmNotOk>
 800225e:	4603      	mov	r3, r0
 8002260:	73fb      	strb	r3, [r7, #15]
   }//else of if( ( VPC3_GET_DP_STATE() == DATA_EX ) && ( eRetValue == DP_OK ) )

   return eRetValue;
 8002262:	7bfb      	ldrb	r3, [r7, #15]
}//DP_ERROR_CODE DpPrm_ChkNewPrmData( MEM_UNSIGNED8_PTR pbPrmData, uint8_t bPrmLength )
 8002264:	4618      	mov	r0, r3
 8002266:	3710      	adds	r7, #16
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	20000000 	.word	0x20000000
 8002270:	20000144 	.word	0x20000144

08002274 <VPC3_MemoryTest>:

  \retval DP_OK - memory OK
  \retval DP_VPC3_ERROR - Memory Error
*/
DP_ERROR_CODE VPC3_MemoryTest( void )
{
 8002274:	b590      	push	{r4, r7, lr}
 8002276:	b08b      	sub	sp, #44	; 0x2c
 8002278:	af02      	add	r7, sp, #8
DP_ERROR_CODE  bError;
uint16_t       wTemp;
uint16_t       j;
uint16_t       i;

   printf("DEBUG: [VPC3_MemoryTest] INICIO - Probando memoria VPC3+S\r\n");
 800227a:	48a0      	ldr	r0, [pc, #640]	; (80024fc <VPC3_MemoryTest+0x288>)
 800227c:	f006 fdb4 	bl	8008de8 <puts>
   printf("DEBUG: [VPC3_MemoryTest] ASIC_RAM_LENGTH = 0x%04X\r\n", ASIC_RAM_LENGTH);
 8002280:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002284:	489e      	ldr	r0, [pc, #632]	; (8002500 <VPC3_MemoryTest+0x28c>)
 8002286:	f006 fd13 	bl	8008cb0 <iprintf>

   /* neccessary, if 4Kbyte mode enabled */
   printf("DEBUG: [VPC3_MemoryTest] INIT_VPC3_MODE_REG_2 = 0x%02X\r\n", INIT_VPC3_MODE_REG_2);
 800228a:	2105      	movs	r1, #5
 800228c:	489d      	ldr	r0, [pc, #628]	; (8002504 <VPC3_MemoryTest+0x290>)
 800228e:	f006 fd0f 	bl	8008cb0 <iprintf>
   printf("DEBUG: [VPC3_MemoryTest] 📍 ANTES de VPC3_SET_MODE_REG_2 - Valor actual: 0x%02X\r\n", VPC3_GetModeReg2Shadow());
 8002292:	f003 fcd7 	bl	8005c44 <VPC3_GetModeReg2Shadow>
 8002296:	4603      	mov	r3, r0
 8002298:	4619      	mov	r1, r3
 800229a:	489b      	ldr	r0, [pc, #620]	; (8002508 <VPC3_MemoryTest+0x294>)
 800229c:	f006 fd08 	bl	8008cb0 <iprintf>
   VPC3_SET_MODE_REG_2( INIT_VPC3_MODE_REG_2 );
 80022a0:	4b9a      	ldr	r3, [pc, #616]	; (800250c <VPC3_MemoryTest+0x298>)
 80022a2:	881b      	ldrh	r3, [r3, #0]
 80022a4:	330c      	adds	r3, #12
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	2105      	movs	r1, #5
 80022aa:	4618      	mov	r0, r3
 80022ac:	f003 fd70 	bl	8005d90 <Vpc3Write>
   printf("DEBUG: [VPC3_MemoryTest] 📍 DESPUÉS de VPC3_SET_MODE_REG_2 - Valor configurado: 0x%02X\r\n", VPC3_GetModeReg2Shadow());
 80022b0:	f003 fcc8 	bl	8005c44 <VPC3_GetModeReg2Shadow>
 80022b4:	4603      	mov	r3, r0
 80022b6:	4619      	mov	r1, r3
 80022b8:	4895      	ldr	r0, [pc, #596]	; (8002510 <VPC3_MemoryTest+0x29c>)
 80022ba:	f006 fcf9 	bl	8008cb0 <iprintf>
   
   // Verificar que se configuró correctamente
   uint8_t mode_reg_2 = VPC3_GetModeReg2Shadow();
 80022be:	f003 fcc1 	bl	8005c44 <VPC3_GetModeReg2Shadow>
 80022c2:	4603      	mov	r3, r0
 80022c4:	74fb      	strb	r3, [r7, #19]
   printf("DEBUG: [VPC3_MemoryTest] MODE_REG_2 configurado: 0x%02X\r\n", mode_reg_2);
 80022c6:	7cfb      	ldrb	r3, [r7, #19]
 80022c8:	4619      	mov	r1, r3
 80022ca:	4892      	ldr	r0, [pc, #584]	; (8002514 <VPC3_MemoryTest+0x2a0>)
 80022cc:	f006 fcf0 	bl	8008cb0 <iprintf>

   /*-----------------------------------------------------------------------*/
   /* test and clear vpc3 ram                                               */
   /*-----------------------------------------------------------------------*/
   bError = DP_OK;
 80022d0:	2301      	movs	r3, #1
 80022d2:	777b      	strb	r3, [r7, #29]

   #if VPC3_SERIAL_MODE

      printf("DEBUG: [VPC3_MemoryTest] Iniciando escritura de memoria...\r\n");
 80022d4:	4890      	ldr	r0, [pc, #576]	; (8002518 <VPC3_MemoryTest+0x2a4>)
 80022d6:	f006 fd87 	bl	8008de8 <puts>
      j = 0;
 80022da:	2300      	movs	r3, #0
 80022dc:	837b      	strh	r3, [r7, #26]
      wAddress = bVpc3RwTsAddr;
 80022de:	4b8b      	ldr	r3, [pc, #556]	; (800250c <VPC3_MemoryTest+0x298>)
 80022e0:	881b      	ldrh	r3, [r3, #0]
 80022e2:	3316      	adds	r3, #22
 80022e4:	83fb      	strh	r3, [r7, #30]
      printf("DEBUG: [VPC3_MemoryTest] bVpc3RwTsAddr = 0x%04X\r\n", (unsigned int)bVpc3RwTsAddr);
 80022e6:	4b89      	ldr	r3, [pc, #548]	; (800250c <VPC3_MemoryTest+0x298>)
 80022e8:	881b      	ldrh	r3, [r3, #0]
 80022ea:	3316      	adds	r3, #22
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	4619      	mov	r1, r3
 80022f0:	488a      	ldr	r0, [pc, #552]	; (800251c <VPC3_MemoryTest+0x2a8>)
 80022f2:	f006 fcdd 	bl	8008cb0 <iprintf>
      
      // --- DEFENSIVE PROGRAMMING: Use conservative memory test range ---
      // Instead of testing the full ASIC_RAM_LENGTH, test only the safe range
      // The VPC3+S has reserved areas at the end of RAM that should not be accessed
      uint16_t safe_memory_end = 0x0700; // Conservative end for 2KB mode
 80022f6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80022fa:	823b      	strh	r3, [r7, #16]
      printf("DEBUG: [VPC3_MemoryTest] Using conservative memory test range: 0x%04X to 0x%04X\r\n", 
             (unsigned int)bVpc3RwTsAddr, (unsigned int)safe_memory_end);
 80022fc:	4b83      	ldr	r3, [pc, #524]	; (800250c <VPC3_MemoryTest+0x298>)
 80022fe:	881b      	ldrh	r3, [r3, #0]
 8002300:	3316      	adds	r3, #22
 8002302:	b29b      	uxth	r3, r3
      printf("DEBUG: [VPC3_MemoryTest] Using conservative memory test range: 0x%04X to 0x%04X\r\n", 
 8002304:	4619      	mov	r1, r3
 8002306:	8a3b      	ldrh	r3, [r7, #16]
 8002308:	461a      	mov	r2, r3
 800230a:	4885      	ldr	r0, [pc, #532]	; (8002520 <VPC3_MemoryTest+0x2ac>)
 800230c:	f006 fcd0 	bl	8008cb0 <iprintf>
      
      // Verificar qué hay en las direcciones antes de escribir
      printf("DEBUG: [VPC3_MemoryTest] Contenido inicial de memoria:\r\n");
 8002310:	4884      	ldr	r0, [pc, #528]	; (8002524 <VPC3_MemoryTest+0x2b0>)
 8002312:	f006 fd69 	bl	8008de8 <puts>
      for( int test_addr = 0x0016; test_addr < 0x0020; test_addr += 2 )
 8002316:	2316      	movs	r3, #22
 8002318:	617b      	str	r3, [r7, #20]
 800231a:	e018      	b.n	800234e <VPC3_MemoryTest+0xda>
      {
         uint8_t val1 = Vpc3Read( test_addr );
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	b29b      	uxth	r3, r3
 8002320:	4618      	mov	r0, r3
 8002322:	f003 fde5 	bl	8005ef0 <Vpc3Read>
 8002326:	4603      	mov	r3, r0
 8002328:	70fb      	strb	r3, [r7, #3]
         uint8_t val2 = Vpc3Read( test_addr + 1 );
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	b29b      	uxth	r3, r3
 800232e:	3301      	adds	r3, #1
 8002330:	b29b      	uxth	r3, r3
 8002332:	4618      	mov	r0, r3
 8002334:	f003 fddc 	bl	8005ef0 <Vpc3Read>
 8002338:	4603      	mov	r3, r0
 800233a:	70bb      	strb	r3, [r7, #2]
         printf("DEBUG: [VPC3_MemoryTest] Addr 0x%04X: 0x%02X 0x%02X\r\n", test_addr, val1, val2);
 800233c:	78fa      	ldrb	r2, [r7, #3]
 800233e:	78bb      	ldrb	r3, [r7, #2]
 8002340:	6979      	ldr	r1, [r7, #20]
 8002342:	4879      	ldr	r0, [pc, #484]	; (8002528 <VPC3_MemoryTest+0x2b4>)
 8002344:	f006 fcb4 	bl	8008cb0 <iprintf>
      for( int test_addr = 0x0016; test_addr < 0x0020; test_addr += 2 )
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	3302      	adds	r3, #2
 800234c:	617b      	str	r3, [r7, #20]
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	2b1f      	cmp	r3, #31
 8002352:	dde3      	ble.n	800231c <VPC3_MemoryTest+0xa8>
      }
      
      // Debug: escribir solo los primeros bytes para ver qué pasa
      printf("DEBUG: [VPC3_MemoryTest] Escribiendo primeros 10 bytes como prueba...\r\n");
 8002354:	4875      	ldr	r0, [pc, #468]	; (800252c <VPC3_MemoryTest+0x2b8>)
 8002356:	f006 fd47 	bl	8008de8 <puts>
      for( i = 0x16; i < 0x20; i += 2 )
 800235a:	2316      	movs	r3, #22
 800235c:	833b      	strh	r3, [r7, #24]
 800235e:	e03e      	b.n	80023de <VPC3_MemoryTest+0x16a>
      {
         uint8_t high_byte = (uint8_t)( j >> 8 );
 8002360:	8b7b      	ldrh	r3, [r7, #26]
 8002362:	0a1b      	lsrs	r3, r3, #8
 8002364:	b29b      	uxth	r3, r3
 8002366:	727b      	strb	r3, [r7, #9]
         uint8_t low_byte = (uint8_t)( j );
 8002368:	8b7b      	ldrh	r3, [r7, #26]
 800236a:	723b      	strb	r3, [r7, #8]
         printf("DEBUG: [VPC3_MemoryTest] Escribiendo addr 0x%04X: high=0x%02X, low=0x%02X\r\n", 
 800236c:	8bf9      	ldrh	r1, [r7, #30]
 800236e:	7a7a      	ldrb	r2, [r7, #9]
 8002370:	7a3b      	ldrb	r3, [r7, #8]
 8002372:	486f      	ldr	r0, [pc, #444]	; (8002530 <VPC3_MemoryTest+0x2bc>)
 8002374:	f006 fc9c 	bl	8008cb0 <iprintf>
                (unsigned int)wAddress, high_byte, low_byte);
         Vpc3Write( wAddress++, high_byte );
 8002378:	8bfb      	ldrh	r3, [r7, #30]
 800237a:	1c5a      	adds	r2, r3, #1
 800237c:	83fa      	strh	r2, [r7, #30]
 800237e:	7a7a      	ldrb	r2, [r7, #9]
 8002380:	4611      	mov	r1, r2
 8002382:	4618      	mov	r0, r3
 8002384:	f003 fd04 	bl	8005d90 <Vpc3Write>
         Vpc3Write( wAddress++, low_byte );
 8002388:	8bfb      	ldrh	r3, [r7, #30]
 800238a:	1c5a      	adds	r2, r3, #1
 800238c:	83fa      	strh	r2, [r7, #30]
 800238e:	7a3a      	ldrb	r2, [r7, #8]
 8002390:	4611      	mov	r1, r2
 8002392:	4618      	mov	r0, r3
 8002394:	f003 fcfc 	bl	8005d90 <Vpc3Write>
         
         // Leer inmediatamente para verificar
         VPC3_ADR test_addr = wAddress - 2;
 8002398:	8bfb      	ldrh	r3, [r7, #30]
 800239a:	3b02      	subs	r3, #2
 800239c:	80fb      	strh	r3, [r7, #6]
         uint8_t read_high = Vpc3Read( test_addr );
 800239e:	88fb      	ldrh	r3, [r7, #6]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f003 fda5 	bl	8005ef0 <Vpc3Read>
 80023a6:	4603      	mov	r3, r0
 80023a8:	717b      	strb	r3, [r7, #5]
         uint8_t read_low = Vpc3Read( test_addr + 1 );
 80023aa:	88fb      	ldrh	r3, [r7, #6]
 80023ac:	3301      	adds	r3, #1
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	4618      	mov	r0, r3
 80023b2:	f003 fd9d 	bl	8005ef0 <Vpc3Read>
 80023b6:	4603      	mov	r3, r0
 80023b8:	713b      	strb	r3, [r7, #4]
         printf("DEBUG: [VPC3_MemoryTest] Verificación addr 0x%04X: escrito=(0x%02X,0x%02X), leído=(0x%02X,0x%02X)\r\n", 
 80023ba:	88f9      	ldrh	r1, [r7, #6]
 80023bc:	7a78      	ldrb	r0, [r7, #9]
 80023be:	7a3c      	ldrb	r4, [r7, #8]
 80023c0:	797b      	ldrb	r3, [r7, #5]
 80023c2:	793a      	ldrb	r2, [r7, #4]
 80023c4:	9201      	str	r2, [sp, #4]
 80023c6:	9300      	str	r3, [sp, #0]
 80023c8:	4623      	mov	r3, r4
 80023ca:	4602      	mov	r2, r0
 80023cc:	4859      	ldr	r0, [pc, #356]	; (8002534 <VPC3_MemoryTest+0x2c0>)
 80023ce:	f006 fc6f 	bl	8008cb0 <iprintf>
                (unsigned int)test_addr, high_byte, low_byte, read_high, read_low);
         
         j++;
 80023d2:	8b7b      	ldrh	r3, [r7, #26]
 80023d4:	3301      	adds	r3, #1
 80023d6:	837b      	strh	r3, [r7, #26]
      for( i = 0x16; i < 0x20; i += 2 )
 80023d8:	8b3b      	ldrh	r3, [r7, #24]
 80023da:	3302      	adds	r3, #2
 80023dc:	833b      	strh	r3, [r7, #24]
 80023de:	8b3b      	ldrh	r3, [r7, #24]
 80023e0:	2b1f      	cmp	r3, #31
 80023e2:	d9bd      	bls.n	8002360 <VPC3_MemoryTest+0xec>
      }
      
      // Continuar con el resto usando el rango seguro
      printf("DEBUG: [VPC3_MemoryTest] Continuando escritura del resto de memoria (rango seguro)...\r\n");
 80023e4:	4854      	ldr	r0, [pc, #336]	; (8002538 <VPC3_MemoryTest+0x2c4>)
 80023e6:	f006 fcff 	bl	8008de8 <puts>
      for( i = 0x20; i < safe_memory_end; )
 80023ea:	2320      	movs	r3, #32
 80023ec:	833b      	strh	r3, [r7, #24]
 80023ee:	e02a      	b.n	8002446 <VPC3_MemoryTest+0x1d2>
      {
         uint8_t high_byte = (uint8_t)( j >> 8 );
 80023f0:	8b7b      	ldrh	r3, [r7, #26]
 80023f2:	0a1b      	lsrs	r3, r3, #8
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	72fb      	strb	r3, [r7, #11]
         uint8_t low_byte = (uint8_t)( j );
 80023f8:	8b7b      	ldrh	r3, [r7, #26]
 80023fa:	72bb      	strb	r3, [r7, #10]
         
         // Debug para las direcciones donde falló antes
         if( wAddress >= 0x06C0 && wAddress <= 0x06FE )
 80023fc:	8bfb      	ldrh	r3, [r7, #30]
 80023fe:	f5b3 6fd8 	cmp.w	r3, #1728	; 0x6c0
 8002402:	d30a      	bcc.n	800241a <VPC3_MemoryTest+0x1a6>
 8002404:	8bfb      	ldrh	r3, [r7, #30]
 8002406:	f240 62fe 	movw	r2, #1790	; 0x6fe
 800240a:	4293      	cmp	r3, r2
 800240c:	d805      	bhi.n	800241a <VPC3_MemoryTest+0x1a6>
         {
            printf("DEBUG: [VPC3_MemoryTest] Escribiendo addr 0x%04X: high=0x%02X, low=0x%02X\r\n", 
 800240e:	8bf9      	ldrh	r1, [r7, #30]
 8002410:	7afa      	ldrb	r2, [r7, #11]
 8002412:	7abb      	ldrb	r3, [r7, #10]
 8002414:	4846      	ldr	r0, [pc, #280]	; (8002530 <VPC3_MemoryTest+0x2bc>)
 8002416:	f006 fc4b 	bl	8008cb0 <iprintf>
                   (unsigned int)wAddress, high_byte, low_byte);
         }
         
         Vpc3Write( wAddress++, high_byte );
 800241a:	8bfb      	ldrh	r3, [r7, #30]
 800241c:	1c5a      	adds	r2, r3, #1
 800241e:	83fa      	strh	r2, [r7, #30]
 8002420:	7afa      	ldrb	r2, [r7, #11]
 8002422:	4611      	mov	r1, r2
 8002424:	4618      	mov	r0, r3
 8002426:	f003 fcb3 	bl	8005d90 <Vpc3Write>
         Vpc3Write( wAddress++, low_byte );
 800242a:	8bfb      	ldrh	r3, [r7, #30]
 800242c:	1c5a      	adds	r2, r3, #1
 800242e:	83fa      	strh	r2, [r7, #30]
 8002430:	7aba      	ldrb	r2, [r7, #10]
 8002432:	4611      	mov	r1, r2
 8002434:	4618      	mov	r0, r3
 8002436:	f003 fcab 	bl	8005d90 <Vpc3Write>

         i+=2;
 800243a:	8b3b      	ldrh	r3, [r7, #24]
 800243c:	3302      	adds	r3, #2
 800243e:	833b      	strh	r3, [r7, #24]
         j++;
 8002440:	8b7b      	ldrh	r3, [r7, #26]
 8002442:	3301      	adds	r3, #1
 8002444:	837b      	strh	r3, [r7, #26]
      for( i = 0x20; i < safe_memory_end; )
 8002446:	8b3a      	ldrh	r2, [r7, #24]
 8002448:	8a3b      	ldrh	r3, [r7, #16]
 800244a:	429a      	cmp	r2, r3
 800244c:	d3d0      	bcc.n	80023f0 <VPC3_MemoryTest+0x17c>
      } /* for( i = 0x16; i < safe_memory_end; ) */
      printf("DEBUG: [VPC3_MemoryTest] Escritura completada (rango seguro)\r\n");
 800244e:	483b      	ldr	r0, [pc, #236]	; (800253c <VPC3_MemoryTest+0x2c8>)
 8002450:	f006 fcca 	bl	8008de8 <puts>

      printf("DEBUG: [VPC3_MemoryTest] Iniciando lectura de memoria (rango seguro)...\r\n");
 8002454:	483a      	ldr	r0, [pc, #232]	; (8002540 <VPC3_MemoryTest+0x2cc>)
 8002456:	f006 fcc7 	bl	8008de8 <puts>
      j = 0;
 800245a:	2300      	movs	r3, #0
 800245c:	837b      	strh	r3, [r7, #26]
      wAddress = bVpc3RwTsAddr;
 800245e:	4b2b      	ldr	r3, [pc, #172]	; (800250c <VPC3_MemoryTest+0x298>)
 8002460:	881b      	ldrh	r3, [r3, #0]
 8002462:	3316      	adds	r3, #22
 8002464:	83fb      	strh	r3, [r7, #30]
      for( i = 0x16; i < safe_memory_end; )
 8002466:	2316      	movs	r3, #22
 8002468:	833b      	strh	r3, [r7, #24]
 800246a:	e032      	b.n	80024d2 <VPC3_MemoryTest+0x25e>
      {
         uint8_t read_high = Vpc3Read( wAddress++ );
 800246c:	8bfb      	ldrh	r3, [r7, #30]
 800246e:	1c5a      	adds	r2, r3, #1
 8002470:	83fa      	strh	r2, [r7, #30]
 8002472:	4618      	mov	r0, r3
 8002474:	f003 fd3c 	bl	8005ef0 <Vpc3Read>
 8002478:	4603      	mov	r3, r0
 800247a:	73fb      	strb	r3, [r7, #15]
         uint8_t read_low = Vpc3Read( wAddress++ );
 800247c:	8bfb      	ldrh	r3, [r7, #30]
 800247e:	1c5a      	adds	r2, r3, #1
 8002480:	83fa      	strh	r2, [r7, #30]
 8002482:	4618      	mov	r0, r3
 8002484:	f003 fd34 	bl	8005ef0 <Vpc3Read>
 8002488:	4603      	mov	r3, r0
 800248a:	73bb      	strb	r3, [r7, #14]
         wTemp = (((uint16_t)read_high) << 8 ) + (uint16_t)read_low;
 800248c:	7bfb      	ldrb	r3, [r7, #15]
 800248e:	b29b      	uxth	r3, r3
 8002490:	021b      	lsls	r3, r3, #8
 8002492:	b29a      	uxth	r2, r3
 8002494:	7bbb      	ldrb	r3, [r7, #14]
 8002496:	b29b      	uxth	r3, r3
 8002498:	4413      	add	r3, r2
 800249a:	81bb      	strh	r3, [r7, #12]
         if( wTemp != j )
 800249c:	89ba      	ldrh	r2, [r7, #12]
 800249e:	8b7b      	ldrh	r3, [r7, #26]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d010      	beq.n	80024c6 <VPC3_MemoryTest+0x252>
         {
            printf("DEBUG: [VPC3_MemoryTest] ERROR en addr 0x%04X: esperado=0x%04X, leído=0x%04X (high=0x%02X, low=0x%02X)\r\n", 
                   (unsigned int)(wAddress-2), j, wTemp, read_high, read_low);
 80024a4:	8bfb      	ldrh	r3, [r7, #30]
 80024a6:	3b02      	subs	r3, #2
            printf("DEBUG: [VPC3_MemoryTest] ERROR en addr 0x%04X: esperado=0x%04X, leído=0x%04X (high=0x%02X, low=0x%02X)\r\n", 
 80024a8:	461c      	mov	r4, r3
 80024aa:	8b79      	ldrh	r1, [r7, #26]
 80024ac:	89b8      	ldrh	r0, [r7, #12]
 80024ae:	7bfb      	ldrb	r3, [r7, #15]
 80024b0:	7bba      	ldrb	r2, [r7, #14]
 80024b2:	9201      	str	r2, [sp, #4]
 80024b4:	9300      	str	r3, [sp, #0]
 80024b6:	4603      	mov	r3, r0
 80024b8:	460a      	mov	r2, r1
 80024ba:	4621      	mov	r1, r4
 80024bc:	4821      	ldr	r0, [pc, #132]	; (8002544 <VPC3_MemoryTest+0x2d0>)
 80024be:	f006 fbf7 	bl	8008cb0 <iprintf>
            bError = DP_VPC3_ERROR;
 80024c2:	23f4      	movs	r3, #244	; 0xf4
 80024c4:	777b      	strb	r3, [r7, #29]
         } /* if( wTemp != j ) */

         i+=2;
 80024c6:	8b3b      	ldrh	r3, [r7, #24]
 80024c8:	3302      	adds	r3, #2
 80024ca:	833b      	strh	r3, [r7, #24]
         j++;
 80024cc:	8b7b      	ldrh	r3, [r7, #26]
 80024ce:	3301      	adds	r3, #1
 80024d0:	837b      	strh	r3, [r7, #26]
      for( i = 0x16; i < safe_memory_end; )
 80024d2:	8b3a      	ldrh	r2, [r7, #24]
 80024d4:	8a3b      	ldrh	r3, [r7, #16]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d3c8      	bcc.n	800246c <VPC3_MemoryTest+0x1f8>
      } /* for( i = 0x16; i < safe_memory_end; ) */
      printf("DEBUG: [VPC3_MemoryTest] Lectura completada, bError=%d\r\n", bError);
 80024da:	7f7b      	ldrb	r3, [r7, #29]
 80024dc:	4619      	mov	r1, r3
 80024de:	481a      	ldr	r0, [pc, #104]	; (8002548 <VPC3_MemoryTest+0x2d4>)
 80024e0:	f006 fbe6 	bl	8008cb0 <iprintf>
         j++;
      } /* for( i = 0x16; i < ASIC_RAM_LENGTH; ) */

   #endif /* #if VPC3_SERIAL_MODE */

   printf("DEBUG: [VPC3_MemoryTest] FIN - Resultado: %d (0x%02X)\r\n", bError, bError);
 80024e4:	7f7b      	ldrb	r3, [r7, #29]
 80024e6:	7f7a      	ldrb	r2, [r7, #29]
 80024e8:	4619      	mov	r1, r3
 80024ea:	4818      	ldr	r0, [pc, #96]	; (800254c <VPC3_MemoryTest+0x2d8>)
 80024ec:	f006 fbe0 	bl	8008cb0 <iprintf>
   return bError;
 80024f0:	7f7b      	ldrb	r3, [r7, #29]
} /* DP_ERROR_CODE VPC3_MemoryTest( void ) */
 80024f2:	4618      	mov	r0, r3
 80024f4:	3724      	adds	r7, #36	; 0x24
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd90      	pop	{r4, r7, pc}
 80024fa:	bf00      	nop
 80024fc:	0800c104 	.word	0x0800c104
 8002500:	0800c140 	.word	0x0800c140
 8002504:	0800c174 	.word	0x0800c174
 8002508:	0800c1b0 	.word	0x0800c1b0
 800250c:	20000144 	.word	0x20000144
 8002510:	0800c204 	.word	0x0800c204
 8002514:	0800c260 	.word	0x0800c260
 8002518:	0800c29c 	.word	0x0800c29c
 800251c:	0800c2d8 	.word	0x0800c2d8
 8002520:	0800c30c 	.word	0x0800c30c
 8002524:	0800c360 	.word	0x0800c360
 8002528:	0800c398 	.word	0x0800c398
 800252c:	0800c3d0 	.word	0x0800c3d0
 8002530:	0800c418 	.word	0x0800c418
 8002534:	0800c464 	.word	0x0800c464
 8002538:	0800c4cc 	.word	0x0800c4cc
 800253c:	0800c524 	.word	0x0800c524
 8002540:	0800c564 	.word	0x0800c564
 8002544:	0800c5b0 	.word	0x0800c5b0
 8002548:	0800c61c 	.word	0x0800c61c
 800254c:	0800c658 	.word	0x0800c658

08002550 <VPC3_Initialization>:
  \retval DP_CFG_LEN_ERROR - Error with configuration data length
  \retval DP_LESS_MEM_ERROR - Error Overall, too much memory used
  \retval DP_LESS_MEM_FDL_ERROR - Error Overall, too much memory used
*/
DP_ERROR_CODE VPC3_Initialization( uint8_t bSlaveAddress, uint16_t wIdentNumber, psCFG psCfgData )
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	4603      	mov	r3, r0
 8002558:	603a      	str	r2, [r7, #0]
 800255a:	71fb      	strb	r3, [r7, #7]
 800255c:	460b      	mov	r3, r1
 800255e:	80bb      	strh	r3, [r7, #4]
DP_ERROR_CODE bError;

   printf("DEBUG: VPC3_Initialization - INICIO\r\n");
 8002560:	48af      	ldr	r0, [pc, #700]	; (8002820 <VPC3_Initialization+0x2d0>)
 8002562:	f006 fc41 	bl	8008de8 <puts>
   printf("DEBUG: pVpc3 = 0x%08X\r\n", (unsigned int)pVpc3);
 8002566:	4baf      	ldr	r3, [pc, #700]	; (8002824 <VPC3_Initialization+0x2d4>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4619      	mov	r1, r3
 800256c:	48ae      	ldr	r0, [pc, #696]	; (8002828 <VPC3_Initialization+0x2d8>)
 800256e:	f006 fb9f 	bl	8008cb0 <iprintf>
   printf("DEBUG: Estructura pVpc3 inicializada con ceros? bReadCfgBufPtr=0x%02X\r\n", pVpc3->bReadCfgBufPtr VPC3_EXTENSION);
 8002572:	4bac      	ldr	r3, [pc, #688]	; (8002824 <VPC3_Initialization+0x2d4>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800257a:	4619      	mov	r1, r3
 800257c:	48ab      	ldr	r0, [pc, #684]	; (800282c <VPC3_Initialization+0x2dc>)
 800257e:	f006 fb97 	bl	8008cb0 <iprintf>
   #endif /* #ifdef DP_DEBUG_ENABLE */

   /*-------------------------------------------------------------------*/
   /* Perform hardware reset first for reliable initialization          */
   /*-------------------------------------------------------------------*/
   printf("DEBUG: Realizando reset hardware del VPC3+S...\r\n");
 8002582:	48ab      	ldr	r0, [pc, #684]	; (8002830 <VPC3_Initialization+0x2e0>)
 8002584:	f006 fc30 	bl	8008de8 <puts>
   if (VPC3_HardwareReset() != 0) {
 8002588:	f001 fe7c 	bl	8004284 <VPC3_HardwareReset>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d002      	beq.n	8002598 <VPC3_Initialization+0x48>
      printf("DEBUG: ⚠️ ADVERTENCIA: Reset hardware falló, continuando de todas formas...\r\n");
 8002592:	48a8      	ldr	r0, [pc, #672]	; (8002834 <VPC3_Initialization+0x2e4>)
 8002594:	f006 fc28 	bl	8008de8 <puts>
   }

   /*-------------------------------------------------------------------*/
   /* check VPC3 is in OFFLINE                                          */
   /*-------------------------------------------------------------------*/
   printf("DEBUG: Verificando estado OFFLINE...\r\n");
 8002598:	48a7      	ldr	r0, [pc, #668]	; (8002838 <VPC3_Initialization+0x2e8>)
 800259a:	f006 fc25 	bl	8008de8 <puts>
   uint8_t status_l = Vpc3Read(0x04);
 800259e:	2004      	movs	r0, #4
 80025a0:	f003 fca6 	bl	8005ef0 <Vpc3Read>
 80025a4:	4603      	mov	r3, r0
 80025a6:	73bb      	strb	r3, [r7, #14]
   printf("DEBUG: STATUS_L actual: 0x%02X\r\n", status_l);
 80025a8:	7bbb      	ldrb	r3, [r7, #14]
 80025aa:	4619      	mov	r1, r3
 80025ac:	48a3      	ldr	r0, [pc, #652]	; (800283c <VPC3_Initialization+0x2ec>)
 80025ae:	f006 fb7f 	bl	8008cb0 <iprintf>
   
   if ((status_l & 0x01) != 0) {
 80025b2:	7bbb      	ldrb	r3, [r7, #14]
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d016      	beq.n	80025ea <VPC3_Initialization+0x9a>
      printf("DEBUG: ⚠️ ADVERTENCIA: VPC3 no está en OFFLINE (bit 0 = 1)\r\n");
 80025bc:	48a0      	ldr	r0, [pc, #640]	; (8002840 <VPC3_Initialization+0x2f0>)
 80025be:	f006 fc13 	bl	8008de8 <puts>
      printf("DEBUG: Intentando forzar OFFLINE...\r\n");
 80025c2:	48a0      	ldr	r0, [pc, #640]	; (8002844 <VPC3_Initialization+0x2f4>)
 80025c4:	f006 fc10 	bl	8008de8 <puts>
      
      // Try to force OFFLINE by writing to control register
      Vpc3Write(0x08, 0x04); // GO_OFFLINE command
 80025c8:	2104      	movs	r1, #4
 80025ca:	2008      	movs	r0, #8
 80025cc:	f003 fbe0 	bl	8005d90 <Vpc3Write>
      HAL_Delay(10);
 80025d0:	200a      	movs	r0, #10
 80025d2:	f003 fff3 	bl	80065bc <HAL_Delay>
      
      status_l = Vpc3Read(0x04);
 80025d6:	2004      	movs	r0, #4
 80025d8:	f003 fc8a 	bl	8005ef0 <Vpc3Read>
 80025dc:	4603      	mov	r3, r0
 80025de:	73bb      	strb	r3, [r7, #14]
      printf("DEBUG: STATUS_L después de forzar OFFLINE: 0x%02X\r\n", status_l);
 80025e0:	7bbb      	ldrb	r3, [r7, #14]
 80025e2:	4619      	mov	r1, r3
 80025e4:	4898      	ldr	r0, [pc, #608]	; (8002848 <VPC3_Initialization+0x2f8>)
 80025e6:	f006 fb63 	bl	8008cb0 <iprintf>
   }
   
   if( !VPC3_GET_OFF_PASS() )
 80025ea:	4b98      	ldr	r3, [pc, #608]	; (800284c <VPC3_Initialization+0x2fc>)
 80025ec:	881b      	ldrh	r3, [r3, #0]
 80025ee:	3304      	adds	r3, #4
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	4618      	mov	r0, r3
 80025f4:	f003 fc7c 	bl	8005ef0 <Vpc3Read>
 80025f8:	4603      	mov	r3, r0
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f040 80e7 	bne.w	80027d2 <VPC3_Initialization+0x282>
   {
      printf("DEBUG: VPC3 esta en OFFLINE, continuando...\r\n");
 8002604:	4892      	ldr	r0, [pc, #584]	; (8002850 <VPC3_Initialization+0x300>)
 8002606:	f006 fbef 	bl	8008de8 <puts>
      
      /* neccessary, if 4Kbyte mode enabled */
      printf("DEBUG: Configurando MODE_REG_2...\r\n");
 800260a:	4892      	ldr	r0, [pc, #584]	; (8002854 <VPC3_Initialization+0x304>)
 800260c:	f006 fbec 	bl	8008de8 <puts>
     printf("DEBUG: [VPC3_Initialization] 📍 ANTES de VPC3_SET_MODE_REG_2 - Valor actual: 0x%02X\r\n", VPC3_GetModeReg2Shadow());
 8002610:	f003 fb18 	bl	8005c44 <VPC3_GetModeReg2Shadow>
 8002614:	4603      	mov	r3, r0
 8002616:	4619      	mov	r1, r3
 8002618:	488f      	ldr	r0, [pc, #572]	; (8002858 <VPC3_Initialization+0x308>)
 800261a:	f006 fb49 	bl	8008cb0 <iprintf>
      
      // Use the robust MODE_REG_2 configuration
      if (VPC3_ForceModeReg2() != 0) {
 800261e:	f001 fc5d 	bl	8003edc <VPC3_ForceModeReg2>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d005      	beq.n	8002634 <VPC3_Initialization+0xe4>
         printf("DEBUG: ⚠️ ADVERTENCIA: No se pudo configurar MODE_REG_2 correctamente\r\n");
 8002628:	488c      	ldr	r0, [pc, #560]	; (800285c <VPC3_Initialization+0x30c>)
 800262a:	f006 fbdd 	bl	8008de8 <puts>
         printf("DEBUG: Continuando con el valor actual...\r\n");
 800262e:	488c      	ldr	r0, [pc, #560]	; (8002860 <VPC3_Initialization+0x310>)
 8002630:	f006 fbda 	bl	8008de8 <puts>
      }
      
     printf("DEBUG: [VPC3_Initialization] 📍 DESPUÉS de VPC3_SET_MODE_REG_2 - Valor configurado: 0x%02X\r\n", VPC3_GetModeReg2Shadow());
 8002634:	f003 fb06 	bl	8005c44 <VPC3_GetModeReg2Shadow>
 8002638:	4603      	mov	r3, r0
 800263a:	4619      	mov	r1, r3
 800263c:	4889      	ldr	r0, [pc, #548]	; (8002864 <VPC3_Initialization+0x314>)
 800263e:	f006 fb37 	bl	8008cb0 <iprintf>

      /* clear VPC3 */
      printf("DEBUG: Limpiando memoria VPC3 (conservative range)...\r\n");
 8002642:	4889      	ldr	r0, [pc, #548]	; (8002868 <VPC3_Initialization+0x318>)
 8002644:	f006 fbd0 	bl	8008de8 <puts>
      #if VPC3_SERIAL_MODE
         // Use conservative memory range to avoid reserved areas
         uint16_t safe_memory_size = 0x0700 - 0x16; // Conservative size for 2KB mode
 8002648:	f240 63ea 	movw	r3, #1770	; 0x6ea
 800264c:	81bb      	strh	r3, [r7, #12]
         Vpc3MemSet_( bVpc3RwTsAddr, 0, safe_memory_size );
 800264e:	4b7f      	ldr	r3, [pc, #508]	; (800284c <VPC3_Initialization+0x2fc>)
 8002650:	881b      	ldrh	r3, [r3, #0]
 8002652:	3316      	adds	r3, #22
 8002654:	b29b      	uxth	r3, r3
 8002656:	89ba      	ldrh	r2, [r7, #12]
 8002658:	2100      	movs	r1, #0
 800265a:	4618      	mov	r0, r3
 800265c:	f003 feba 	bl	80063d4 <Vpc3MemSet>
         printf("DEBUG: Memoria VPC3 limpiada (0x%04X bytes)\r\n", safe_memory_size);
 8002660:	89bb      	ldrh	r3, [r7, #12]
 8002662:	4619      	mov	r1, r3
 8002664:	4881      	ldr	r0, [pc, #516]	; (800286c <VPC3_Initialization+0x31c>)
 8002666:	f006 fb23 	bl	8008cb0 <iprintf>
      #else
         Vpc3MemSet_( &pVpc3->bTsAddr VPC3_EXTENSION, 0, (ASIC_RAM_LENGTH-0x16) );
      #endif /* #if VPC3_SERIAL_MODE */
      printf("DEBUG: Memoria VPC3 limpiada exitosamente\r\n");
 800266a:	4881      	ldr	r0, [pc, #516]	; (8002870 <VPC3_Initialization+0x320>)
 800266c:	f006 fbbc 	bl	8008de8 <puts>

      #if DP_INTERRUPT_MASK_8BIT == 0
         pDpSystem->wPollInterruptMask = SM_INTERRUPT_MASK;
 8002670:	4b80      	ldr	r3, [pc, #512]	; (8002874 <VPC3_Initialization+0x324>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2200      	movs	r2, #0
 8002676:	f042 0202 	orr.w	r2, r2, #2
 800267a:	71da      	strb	r2, [r3, #7]
 800267c:	2200      	movs	r2, #0
 800267e:	f042 021d 	orr.w	r2, r2, #29
 8002682:	721a      	strb	r2, [r3, #8]
      #endif /* #if DP_INTERRUPT_MASK_8BIT == 0 */

      /*--------------------------------------------------------------*/
      /* set constant values                                          */
      /*--------------------------------------------------------------*/
      printf("DEBUG: Configurando valores constantes...\r\n");
 8002684:	487c      	ldr	r0, [pc, #496]	; (8002878 <VPC3_Initialization+0x328>)
 8002686:	f006 fbaf 	bl	8008de8 <puts>
      bError = VPC3_SetConstants( bSlaveAddress, wIdentNumber );
 800268a:	88ba      	ldrh	r2, [r7, #4]
 800268c:	79fb      	ldrb	r3, [r7, #7]
 800268e:	4611      	mov	r1, r2
 8002690:	4618      	mov	r0, r3
 8002692:	f000 fa89 	bl	8002ba8 <VPC3_SetConstants>
 8002696:	4603      	mov	r3, r0
 8002698:	73fb      	strb	r3, [r7, #15]
      if( DP_OK == bError )
 800269a:	7bfb      	ldrb	r3, [r7, #15]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d11c      	bne.n	80026da <VPC3_Initialization+0x18a>
      {
         printf("DEBUG: Valores constantes OK, calculando longitudes I/O...\r\n");
 80026a0:	4876      	ldr	r0, [pc, #472]	; (800287c <VPC3_Initialization+0x32c>)
 80026a2:	f006 fba1 	bl	8008de8 <puts>
         /*-----------------------------------------------------------*/
         /* calculate length of input and output data using cfg-data  */
         /*-----------------------------------------------------------*/
         bError = VPC3_CalculateInpOutpLength( &psCfgData->abData[0], psCfgData->bLength );
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	1c5a      	adds	r2, r3, #1
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	4619      	mov	r1, r3
 80026b0:	4610      	mov	r0, r2
 80026b2:	f000 fbe9 	bl	8002e88 <VPC3_CalculateInpOutpLength>
 80026b6:	4603      	mov	r3, r0
 80026b8:	73fb      	strb	r3, [r7, #15]
         if( DP_OK == bError )
 80026ba:	7bfb      	ldrb	r3, [r7, #15]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d10c      	bne.n	80026da <VPC3_Initialization+0x18a>
         {
            printf("DEBUG: Longitudes I/O calculadas OK, inicializando buffers...\r\n");
 80026c0:	486f      	ldr	r0, [pc, #444]	; (8002880 <VPC3_Initialization+0x330>)
 80026c2:	f006 fb91 	bl	8008de8 <puts>
            /*--------------------------------------------------------*/
            /* initialize buffer structure                            */
            /*--------------------------------------------------------*/
            bError = VPC3_InitBufferStructure();
 80026c6:	f000 fcd5 	bl	8003074 <VPC3_InitBufferStructure>
 80026ca:	4603      	mov	r3, r0
 80026cc:	73fb      	strb	r3, [r7, #15]
            if ( DP_OK == bError )
 80026ce:	7bfb      	ldrb	r3, [r7, #15]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d102      	bne.n	80026da <VPC3_Initialization+0x18a>
            {
               printf("DEBUG: Buffers inicializados OK, configurando servicios...\r\n");
 80026d4:	486b      	ldr	r0, [pc, #428]	; (8002884 <VPC3_Initialization+0x334>)
 80026d6:	f006 fb87 	bl	8008de8 <puts>
               #endif /* #if DP_FDL */
            } /* if( DP_OK == bError ) */
         } /* if( DP_OK == bError ) */
      } /* if( DP_OK == bError ) */

      if( DP_OK == bError )
 80026da:	7bfb      	ldrb	r3, [r7, #15]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d17d      	bne.n	80027dc <VPC3_Initialization+0x28c>
      {
         #if VPC3_SERIAL_MODE
                     printf("DEBUG: Copiando estructura de sistema (0x2A bytes)...\r\n");
 80026e0:	4869      	ldr	r0, [pc, #420]	; (8002888 <VPC3_Initialization+0x338>)
 80026e2:	f006 fb81 	bl	8008de8 <puts>
         printf("DEBUG: Desde pVpc3->bTsAddr (0x%08X) hacia VPC3 addr 0x%04X\r\n", 
                (unsigned int)&pVpc3->bTsAddr, (unsigned int)(Vpc3AsicAddress+0x16));
 80026e6:	4b4f      	ldr	r3, [pc, #316]	; (8002824 <VPC3_Initialization+0x2d4>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	3316      	adds	r3, #22
         printf("DEBUG: Desde pVpc3->bTsAddr (0x%08X) hacia VPC3 addr 0x%04X\r\n", 
 80026ec:	4619      	mov	r1, r3
                (unsigned int)&pVpc3->bTsAddr, (unsigned int)(Vpc3AsicAddress+0x16));
 80026ee:	4b57      	ldr	r3, [pc, #348]	; (800284c <VPC3_Initialization+0x2fc>)
 80026f0:	881b      	ldrh	r3, [r3, #0]
 80026f2:	3316      	adds	r3, #22
         printf("DEBUG: Desde pVpc3->bTsAddr (0x%08X) hacia VPC3 addr 0x%04X\r\n", 
 80026f4:	461a      	mov	r2, r3
 80026f6:	4865      	ldr	r0, [pc, #404]	; (800288c <VPC3_Initialization+0x33c>)
 80026f8:	f006 fada 	bl	8008cb0 <iprintf>
         printf("DEBUG: Valor de bReadCfgBufPtr en estructura local: 0x%02X\r\n", 
                pVpc3->bReadCfgBufPtr VPC3_EXTENSION);
 80026fc:	4b49      	ldr	r3, [pc, #292]	; (8002824 <VPC3_Initialization+0x2d4>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
         printf("DEBUG: Valor de bReadCfgBufPtr en estructura local: 0x%02X\r\n", 
 8002704:	4619      	mov	r1, r3
 8002706:	4862      	ldr	r0, [pc, #392]	; (8002890 <VPC3_Initialization+0x340>)
 8002708:	f006 fad2 	bl	8008cb0 <iprintf>
         printf("DEBUG: Offset de bReadCfgBufPtr desde bTsAddr: 0x%02X\r\n", 
 800270c:	211e      	movs	r1, #30
 800270e:	4861      	ldr	r0, [pc, #388]	; (8002894 <VPC3_Initialization+0x344>)
 8002710:	f006 face 	bl	8008cb0 <iprintf>
                (unsigned int)&pVpc3->bReadCfgBufPtr - (unsigned int)&pVpc3->bTsAddr);
         CopyToVpc3_( (VPC3_UNSIGNED8_PTR)(Vpc3AsicAddress+0x16), (MEM_UNSIGNED8_PTR)&pVpc3->bTsAddr VPC3_EXTENSION, 0x2A );
 8002714:	4b4d      	ldr	r3, [pc, #308]	; (800284c <VPC3_Initialization+0x2fc>)
 8002716:	881b      	ldrh	r3, [r3, #0]
 8002718:	3316      	adds	r3, #22
 800271a:	4618      	mov	r0, r3
 800271c:	4b41      	ldr	r3, [pc, #260]	; (8002824 <VPC3_Initialization+0x2d4>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	3316      	adds	r3, #22
 8002722:	222a      	movs	r2, #42	; 0x2a
 8002724:	4619      	mov	r1, r3
 8002726:	f003 fd83 	bl	8006230 <CopyToVpc3>
         printf("DEBUG: Estructura de sistema copiada OK\r\n");
 800272a:	485b      	ldr	r0, [pc, #364]	; (8002898 <VPC3_Initialization+0x348>)
 800272c:	f006 fb5c 	bl	8008de8 <puts>
         #endif /* #if VPC3_SERIAL_MODE */

         /*-----------------------------------------------------------*/
         /* set real configuration data                               */
         /*-----------------------------------------------------------*/
         printf("DEBUG: Configurando longitud de configuracion (%d bytes)...\r\n", psCfgData->bLength);
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	4619      	mov	r1, r3
 8002736:	4859      	ldr	r0, [pc, #356]	; (800289c <VPC3_Initialization+0x34c>)
 8002738:	f006 faba 	bl	8008cb0 <iprintf>
         VPC3_SET_READ_CFG_LEN( psCfgData->bLength );      /* set configuration length */
 800273c:	4b43      	ldr	r3, [pc, #268]	; (800284c <VPC3_Initialization+0x2fc>)
 800273e:	881b      	ldrh	r3, [r3, #0]
 8002740:	3333      	adds	r3, #51	; 0x33
 8002742:	b29a      	uxth	r2, r3
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	4619      	mov	r1, r3
 800274a:	4610      	mov	r0, r2
 800274c:	f003 fb20 	bl	8005d90 <Vpc3Write>
         printf("DEBUG: Longitud configurada OK\r\n");
 8002750:	4853      	ldr	r0, [pc, #332]	; (80028a0 <VPC3_Initialization+0x350>)
 8002752:	f006 fb49 	bl	8008de8 <puts>
         
         printf("DEBUG: Obteniendo puntero del buffer de configuracion...\r\n");
 8002756:	4853      	ldr	r0, [pc, #332]	; (80028a4 <VPC3_Initialization+0x354>)
 8002758:	f006 fb46 	bl	8008de8 <puts>
         printf("DEBUG: Leyendo registro 0x34 del VPC3+: 0x%02X\r\n", Vpc3Read(bVpc3RwReadCfgBufPtr));
 800275c:	4b3b      	ldr	r3, [pc, #236]	; (800284c <VPC3_Initialization+0x2fc>)
 800275e:	881b      	ldrh	r3, [r3, #0]
 8002760:	3334      	adds	r3, #52	; 0x34
 8002762:	b29b      	uxth	r3, r3
 8002764:	4618      	mov	r0, r3
 8002766:	f003 fbc3 	bl	8005ef0 <Vpc3Read>
 800276a:	4603      	mov	r3, r0
 800276c:	4619      	mov	r1, r3
 800276e:	484e      	ldr	r0, [pc, #312]	; (80028a8 <VPC3_Initialization+0x358>)
 8002770:	f006 fa9e 	bl	8008cb0 <iprintf>
         printf("DEBUG: Puntero del buffer: 0x%08X\r\n", (unsigned int)VPC3_GET_READ_CFG_BUF_PTR());
 8002774:	4b35      	ldr	r3, [pc, #212]	; (800284c <VPC3_Initialization+0x2fc>)
 8002776:	881b      	ldrh	r3, [r3, #0]
 8002778:	3334      	adds	r3, #52	; 0x34
 800277a:	b29b      	uxth	r3, r3
 800277c:	4618      	mov	r0, r3
 800277e:	f003 fbb7 	bl	8005ef0 <Vpc3Read>
 8002782:	4603      	mov	r3, r0
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	4a31      	ldr	r2, [pc, #196]	; (800284c <VPC3_Initialization+0x2fc>)
 8002788:	8812      	ldrh	r2, [r2, #0]
 800278a:	4413      	add	r3, r2
 800278c:	4619      	mov	r1, r3
 800278e:	4847      	ldr	r0, [pc, #284]	; (80028ac <VPC3_Initialization+0x35c>)
 8002790:	f006 fa8e 	bl	8008cb0 <iprintf>
         
         printf("DEBUG: Copiando datos de configuracion...\r\n");
 8002794:	4846      	ldr	r0, [pc, #280]	; (80028b0 <VPC3_Initialization+0x360>)
 8002796:	f006 fb27 	bl	8008de8 <puts>
         CopyToVpc3_( VPC3_GET_READ_CFG_BUF_PTR(), &psCfgData->abData[0], psCfgData->bLength );
 800279a:	4b2c      	ldr	r3, [pc, #176]	; (800284c <VPC3_Initialization+0x2fc>)
 800279c:	881b      	ldrh	r3, [r3, #0]
 800279e:	3334      	adds	r3, #52	; 0x34
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	4618      	mov	r0, r3
 80027a4:	f003 fba4 	bl	8005ef0 <Vpc3Read>
 80027a8:	4603      	mov	r3, r0
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	4a27      	ldr	r2, [pc, #156]	; (800284c <VPC3_Initialization+0x2fc>)
 80027ae:	8812      	ldrh	r2, [r2, #0]
 80027b0:	4413      	add	r3, r2
 80027b2:	4618      	mov	r0, r3
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	1c59      	adds	r1, r3, #1
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	b29b      	uxth	r3, r3
 80027be:	461a      	mov	r2, r3
 80027c0:	f003 fd36 	bl	8006230 <CopyToVpc3>
         printf("DEBUG: Datos de configuracion copiados OK\r\n");
 80027c4:	483b      	ldr	r0, [pc, #236]	; (80028b4 <VPC3_Initialization+0x364>)
 80027c6:	f006 fb0f 	bl	8008de8 <puts>
         
         printf("DEBUG: Configuracion final copiada exitosamente\r\n");
 80027ca:	483b      	ldr	r0, [pc, #236]	; (80028b8 <VPC3_Initialization+0x368>)
 80027cc:	f006 fb0c 	bl	8008de8 <puts>
 80027d0:	e004      	b.n	80027dc <VPC3_Initialization+0x28c>
      } /* if( DP_OK == bError ) */
   } /* if( !VPC3_GET_OFF_PASS() ) */
   else
   {
      printf("DEBUG: ERROR - VPC3 no esta en estado OFFLINE\r\n");
 80027d2:	483a      	ldr	r0, [pc, #232]	; (80028bc <VPC3_Initialization+0x36c>)
 80027d4:	f006 fb08 	bl	8008de8 <puts>
      bError = DP_NOT_OFFLINE_ERROR;
 80027d8:	2310      	movs	r3, #16
 80027da:	73fb      	strb	r3, [r7, #15]
   } /* else of if( !VPC3_GET_OFF_PASS() ) */

   printf("DEBUG: VPC3_Initialization - FIN con resultado: 0x%02X\r\n", bError);
 80027dc:	7bfb      	ldrb	r3, [r7, #15]
 80027de:	4619      	mov	r1, r3
 80027e0:	4837      	ldr	r0, [pc, #220]	; (80028c0 <VPC3_Initialization+0x370>)
 80027e2:	f006 fa65 	bl	8008cb0 <iprintf>
   printf("DEBUG: [VPC3_Initialization] Inicializacion completada. Estado final:\r\n");
 80027e6:	4837      	ldr	r0, [pc, #220]	; (80028c4 <VPC3_Initialization+0x374>)
 80027e8:	f006 fafe 	bl	8008de8 <puts>
   printf("DEBUG: [VPC3_Initialization] MODE_REG_2 = 0x%02X\r\n", VPC3_GetModeReg2Shadow());
 80027ec:	f003 fa2a 	bl	8005c44 <VPC3_GetModeReg2Shadow>
 80027f0:	4603      	mov	r3, r0
 80027f2:	4619      	mov	r1, r3
 80027f4:	4834      	ldr	r0, [pc, #208]	; (80028c8 <VPC3_Initialization+0x378>)
 80027f6:	f006 fa5b 	bl	8008cb0 <iprintf>
   
   // --- DEFENSIVE PROGRAMMING: Validate segment pointers after initialization ---
   DP_ERROR_CODE validationStatus = VPC3_ValidateSegmentPointers();
 80027fa:	f001 fc25 	bl	8004048 <VPC3_ValidateSegmentPointers>
 80027fe:	4603      	mov	r3, r0
 8002800:	72fb      	strb	r3, [r7, #11]
   if (validationStatus == DP_NOK) {
 8002802:	7afb      	ldrb	r3, [r7, #11]
 8002804:	2b02      	cmp	r3, #2
 8002806:	d105      	bne.n	8002814 <VPC3_Initialization+0x2c4>
      printf("WARNING: [VPC3_Initialization] Corrupted segment pointers detected after initialization!\r\n");
 8002808:	4830      	ldr	r0, [pc, #192]	; (80028cc <VPC3_Initialization+0x37c>)
 800280a:	f006 faed 	bl	8008de8 <puts>
      printf("WARNING: This may indicate ASIC internal state corruption.\r\n");
 800280e:	4830      	ldr	r0, [pc, #192]	; (80028d0 <VPC3_Initialization+0x380>)
 8002810:	f006 faea 	bl	8008de8 <puts>
   }

   return bError;
 8002814:	7bfb      	ldrb	r3, [r7, #15]
} /* DP_ERROR_CODE VPC3_Initialization( uint8_t bSlaveAddress, uint16_t wIdentNumber, psCFG psCfgData ) */
 8002816:	4618      	mov	r0, r3
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	0800c690 	.word	0x0800c690
 8002824:	200001b4 	.word	0x200001b4
 8002828:	0800c6b8 	.word	0x0800c6b8
 800282c:	0800c6d0 	.word	0x0800c6d0
 8002830:	0800c718 	.word	0x0800c718
 8002834:	0800c748 	.word	0x0800c748
 8002838:	0800c79c 	.word	0x0800c79c
 800283c:	0800c7c4 	.word	0x0800c7c4
 8002840:	0800c7e8 	.word	0x0800c7e8
 8002844:	0800c82c 	.word	0x0800c82c
 8002848:	0800c854 	.word	0x0800c854
 800284c:	20000144 	.word	0x20000144
 8002850:	0800c88c 	.word	0x0800c88c
 8002854:	0800c8bc 	.word	0x0800c8bc
 8002858:	0800c8e0 	.word	0x0800c8e0
 800285c:	0800c938 	.word	0x0800c938
 8002860:	0800c984 	.word	0x0800c984
 8002864:	0800c9b0 	.word	0x0800c9b0
 8002868:	0800ca10 	.word	0x0800ca10
 800286c:	0800ca48 	.word	0x0800ca48
 8002870:	0800ca78 	.word	0x0800ca78
 8002874:	20000000 	.word	0x20000000
 8002878:	0800caa4 	.word	0x0800caa4
 800287c:	0800cad0 	.word	0x0800cad0
 8002880:	0800cb0c 	.word	0x0800cb0c
 8002884:	0800cb4c 	.word	0x0800cb4c
 8002888:	0800cb88 	.word	0x0800cb88
 800288c:	0800cbc0 	.word	0x0800cbc0
 8002890:	0800cc00 	.word	0x0800cc00
 8002894:	0800cc40 	.word	0x0800cc40
 8002898:	0800cc78 	.word	0x0800cc78
 800289c:	0800cca4 	.word	0x0800cca4
 80028a0:	0800cce4 	.word	0x0800cce4
 80028a4:	0800cd04 	.word	0x0800cd04
 80028a8:	0800cd40 	.word	0x0800cd40
 80028ac:	0800cd74 	.word	0x0800cd74
 80028b0:	0800cd98 	.word	0x0800cd98
 80028b4:	0800cdc4 	.word	0x0800cdc4
 80028b8:	0800cdf0 	.word	0x0800cdf0
 80028bc:	0800ce24 	.word	0x0800ce24
 80028c0:	0800ce54 	.word	0x0800ce54
 80028c4:	0800ce90 	.word	0x0800ce90
 80028c8:	0800ced8 	.word	0x0800ced8
 80028cc:	0800cf0c 	.word	0x0800cf0c
 80028d0:	0800cf68 	.word	0x0800cf68

080028d4 <VPC3_Start>:
  - VPC3+ generates DX_OUT event, all outputs will be cleared
  - VPC3+ generates BAUDRATE_DETECT event, if master connected
  - master sends FDL-Status.req --> slave answers with FDL-Status.resp ( RTS signal! )
*/
void VPC3_Start( void )
{
 80028d4:	b590      	push	{r4, r7, lr}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
   printf("DEBUG: VPC3_Start - INICIO\r\n");
 80028da:	488f      	ldr	r0, [pc, #572]	; (8002b18 <VPC3_Start+0x244>)
 80028dc:	f006 fa84 	bl	8008de8 <puts>
   #endif /* #if DP_MSAC_C2 */

   /*-----------------------------------------------------------------------*/
   /* start vpc3                                                            */
   /*-----------------------------------------------------------------------*/
   printf("DEBUG: Verificando estado antes del START...\r\n");
 80028e0:	488e      	ldr	r0, [pc, #568]	; (8002b1c <VPC3_Start+0x248>)
 80028e2:	f006 fa81 	bl	8008de8 <puts>
   uint8_t status_before = VPC3_GET_STATUS_L();
 80028e6:	4b8e      	ldr	r3, [pc, #568]	; (8002b20 <VPC3_Start+0x24c>)
 80028e8:	881b      	ldrh	r3, [r3, #0]
 80028ea:	3304      	adds	r3, #4
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	4618      	mov	r0, r3
 80028f0:	f003 fafe 	bl	8005ef0 <Vpc3Read>
 80028f4:	4603      	mov	r3, r0
 80028f6:	71fb      	strb	r3, [r7, #7]
   printf("DEBUG: STATUS_L pre-START: 0x%02X\r\n", status_before);
 80028f8:	79fb      	ldrb	r3, [r7, #7]
 80028fa:	4619      	mov	r1, r3
 80028fc:	4889      	ldr	r0, [pc, #548]	; (8002b24 <VPC3_Start+0x250>)
 80028fe:	f006 f9d7 	bl	8008cb0 <iprintf>
   
   if( ( status_before & VPC3_PASS_IDLE ) == 0x00 )
 8002902:	79fb      	ldrb	r3, [r7, #7]
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	2b00      	cmp	r3, #0
 800290a:	d103      	bne.n	8002914 <VPC3_Start+0x40>
   {
      printf("DEBUG: OK - Chip está en OFFLINE (bit 0 = 0)\r\n");
 800290c:	4886      	ldr	r0, [pc, #536]	; (8002b28 <VPC3_Start+0x254>)
 800290e:	f006 fa6b 	bl	8008de8 <puts>
 8002912:	e002      	b.n	800291a <VPC3_Start+0x46>
   }
   else
   {
      printf("DEBUG: WARNING - Chip NO está en OFFLINE (bit 0 = 1)\r\n");
 8002914:	4885      	ldr	r0, [pc, #532]	; (8002b2c <VPC3_Start+0x258>)
 8002916:	f006 fa67 	bl	8008de8 <puts>
   }

   printf("DEBUG: Enviando comando START (0x01) al registro de control (0x08)...\r\n");
 800291a:	4885      	ldr	r0, [pc, #532]	; (8002b30 <VPC3_Start+0x25c>)
 800291c:	f006 fa64 	bl	8008de8 <puts>
   VPC3_Start__();
 8002920:	4b7f      	ldr	r3, [pc, #508]	; (8002b20 <VPC3_Start+0x24c>)
 8002922:	881b      	ldrh	r3, [r3, #0]
 8002924:	3308      	adds	r3, #8
 8002926:	b29b      	uxth	r3, r3
 8002928:	2101      	movs	r1, #1
 800292a:	4618      	mov	r0, r3
 800292c:	f003 fa30 	bl	8005d90 <Vpc3Write>

   printf("DEBUG: Esperando que el chip procese el comando START...\r\n");
 8002930:	4880      	ldr	r0, [pc, #512]	; (8002b34 <VPC3_Start+0x260>)
 8002932:	f006 fa59 	bl	8008de8 <puts>
   HAL_Delay(50); // Allow time for the chip to process
 8002936:	2032      	movs	r0, #50	; 0x32
 8002938:	f003 fe40 	bl	80065bc <HAL_Delay>

   // DEBUG: Agregar delay adicional para estabilización
   printf("DEBUG: Esperando estabilización adicional del chip...\r\n");
 800293c:	487e      	ldr	r0, [pc, #504]	; (8002b38 <VPC3_Start+0x264>)
 800293e:	f006 fa53 	bl	8008de8 <puts>
   HAL_Delay(500); // Increased stabilization time to 500ms
 8002942:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002946:	f003 fe39 	bl	80065bc <HAL_Delay>

   // DEBUG: Reconfigurar registros de modo después del START (ya que se resetean)
   printf("DEBUG: Reconfigurando registros de modo después del START...\r\n");
 800294a:	487c      	ldr	r0, [pc, #496]	; (8002b3c <VPC3_Start+0x268>)
 800294c:	f006 fa4c 	bl	8008de8 <puts>
   Vpc3Write( bVpc3RwModeReg0_H, INIT_VPC3_MODE_REG_H );
 8002950:	4b73      	ldr	r3, [pc, #460]	; (8002b20 <VPC3_Start+0x24c>)
 8002952:	881b      	ldrh	r3, [r3, #0]
 8002954:	3307      	adds	r3, #7
 8002956:	b29b      	uxth	r3, r3
 8002958:	2125      	movs	r1, #37	; 0x25
 800295a:	4618      	mov	r0, r3
 800295c:	f003 fa18 	bl	8005d90 <Vpc3Write>
   Vpc3Write( bVpc3RwModeReg0_L, INIT_VPC3_MODE_REG_L );
 8002960:	4b6f      	ldr	r3, [pc, #444]	; (8002b20 <VPC3_Start+0x24c>)
 8002962:	881b      	ldrh	r3, [r3, #0]
 8002964:	3306      	adds	r3, #6
 8002966:	b29b      	uxth	r3, r3
 8002968:	21c0      	movs	r1, #192	; 0xc0
 800296a:	4618      	mov	r0, r3
 800296c:	f003 fa10 	bl	8005d90 <Vpc3Write>
   
   // Forzar MODE_REG_2 al valor correcto
   if (!VPC3_ForceModeReg2()) {
 8002970:	f001 fab4 	bl	8003edc <VPC3_ForceModeReg2>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d102      	bne.n	8002980 <VPC3_Start+0xac>
      printf("DEBUG: [VPC3_Start] ADVERTENCIA - No se pudo forzar MODE_REG_2 correctamente\r\n");
 800297a:	4871      	ldr	r0, [pc, #452]	; (8002b40 <VPC3_Start+0x26c>)
 800297c:	f006 fa34 	bl	8008de8 <puts>
   }
   
   Vpc3Write( bVpc3WoModeReg3, INIT_VPC3_MODE_REG_3 );
 8002980:	4b67      	ldr	r3, [pc, #412]	; (8002b20 <VPC3_Start+0x24c>)
 8002982:	881b      	ldrh	r3, [r3, #0]
 8002984:	3312      	adds	r3, #18
 8002986:	b29b      	uxth	r3, r3
 8002988:	2100      	movs	r1, #0
 800298a:	4618      	mov	r0, r3
 800298c:	f003 fa00 	bl	8005d90 <Vpc3Write>
   
   // DEBUG: Esperar a que los registros se procesen
   printf("DEBUG: Esperando a que los registros de modo se procesen...\r\n");
 8002990:	486c      	ldr	r0, [pc, #432]	; (8002b44 <VPC3_Start+0x270>)
 8002992:	f006 fa29 	bl	8008de8 <puts>
   HAL_Delay(100); // Allow time for mode registers to be processed
 8002996:	2064      	movs	r0, #100	; 0x64
 8002998:	f003 fe10 	bl	80065bc <HAL_Delay>
   
   // Verificar que MODE_REG_2 se configuró correctamente
   uint8_t mode_reg2_after = VPC3_GetModeReg2Shadow();
 800299c:	f003 f952 	bl	8005c44 <VPC3_GetModeReg2Shadow>
 80029a0:	4603      	mov	r3, r0
 80029a2:	71bb      	strb	r3, [r7, #6]
   printf("DEBUG: [VPC3_Start] MODE_REG_2 después de reconfiguración: 0x%02X (esperado: 0x%02X)\r\n", 
 80029a4:	79bb      	ldrb	r3, [r7, #6]
 80029a6:	2205      	movs	r2, #5
 80029a8:	4619      	mov	r1, r3
 80029aa:	4867      	ldr	r0, [pc, #412]	; (8002b48 <VPC3_Start+0x274>)
 80029ac:	f006 f980 	bl	8008cb0 <iprintf>
          mode_reg2_after, INIT_VPC3_MODE_REG_2);

   printf("DEBUG: Verificando estado después del comando START...\r\n");
 80029b0:	4866      	ldr	r0, [pc, #408]	; (8002b4c <VPC3_Start+0x278>)
 80029b2:	f006 fa19 	bl	8008de8 <puts>
   uint8_t status_after = VPC3_GET_STATUS_L();
 80029b6:	4b5a      	ldr	r3, [pc, #360]	; (8002b20 <VPC3_Start+0x24c>)
 80029b8:	881b      	ldrh	r3, [r3, #0]
 80029ba:	3304      	adds	r3, #4
 80029bc:	b29b      	uxth	r3, r3
 80029be:	4618      	mov	r0, r3
 80029c0:	f003 fa96 	bl	8005ef0 <Vpc3Read>
 80029c4:	4603      	mov	r3, r0
 80029c6:	717b      	strb	r3, [r7, #5]
   printf("DEBUG: STATUS_L post-START: 0x%02X\r\n", status_after);
 80029c8:	797b      	ldrb	r3, [r7, #5]
 80029ca:	4619      	mov	r1, r3
 80029cc:	4860      	ldr	r0, [pc, #384]	; (8002b50 <VPC3_Start+0x27c>)
 80029ce:	f006 f96f 	bl	8008cb0 <iprintf>
   
   if( ( status_after & VPC3_PASS_IDLE ) != 0x00 )
 80029d2:	797b      	ldrb	r3, [r7, #5]
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d003      	beq.n	80029e4 <VPC3_Start+0x110>
   {
      printf("DEBUG: EXITO - Chip ha entrado en Passive_Idle (bit 0 = 1)\r\n");
 80029dc:	485d      	ldr	r0, [pc, #372]	; (8002b54 <VPC3_Start+0x280>)
 80029de:	f006 fa03 	bl	8008de8 <puts>
 80029e2:	e046      	b.n	8002a72 <VPC3_Start+0x19e>
   }
   else
   {
      printf("DEBUG: FALLO - Chip no ha cambiado a Passive_Idle\r\n");
 80029e4:	485c      	ldr	r0, [pc, #368]	; (8002b58 <VPC3_Start+0x284>)
 80029e6:	f006 f9ff 	bl	8008de8 <puts>
      printf("DEBUG: Posible causa: Inicialización incompleta de estructuras internas\r\n");
 80029ea:	485c      	ldr	r0, [pc, #368]	; (8002b5c <VPC3_Start+0x288>)
 80029ec:	f006 f9fc 	bl	8008de8 <puts>
      
      // DEBUG: Verificar registros de modo después del START
      printf("DEBUG: [VPC3_Start] Verificando registros de modo después del START...\r\n");
 80029f0:	485b      	ldr	r0, [pc, #364]	; (8002b60 <VPC3_Start+0x28c>)
 80029f2:	f006 f9f9 	bl	8008de8 <puts>
      printf("DEBUG: [VPC3_Start] MODE_REG_0_H: 0x%02X\r\n", Vpc3Read(bVpc3RwModeReg0_H));
 80029f6:	4b4a      	ldr	r3, [pc, #296]	; (8002b20 <VPC3_Start+0x24c>)
 80029f8:	881b      	ldrh	r3, [r3, #0]
 80029fa:	3307      	adds	r3, #7
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	4618      	mov	r0, r3
 8002a00:	f003 fa76 	bl	8005ef0 <Vpc3Read>
 8002a04:	4603      	mov	r3, r0
 8002a06:	4619      	mov	r1, r3
 8002a08:	4856      	ldr	r0, [pc, #344]	; (8002b64 <VPC3_Start+0x290>)
 8002a0a:	f006 f951 	bl	8008cb0 <iprintf>
      printf("DEBUG: [VPC3_Start] MODE_REG_0_L: 0x%02X\r\n", Vpc3Read(bVpc3RwModeReg0_L));
 8002a0e:	4b44      	ldr	r3, [pc, #272]	; (8002b20 <VPC3_Start+0x24c>)
 8002a10:	881b      	ldrh	r3, [r3, #0]
 8002a12:	3306      	adds	r3, #6
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	4618      	mov	r0, r3
 8002a18:	f003 fa6a 	bl	8005ef0 <Vpc3Read>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	4619      	mov	r1, r3
 8002a20:	4851      	ldr	r0, [pc, #324]	; (8002b68 <VPC3_Start+0x294>)
 8002a22:	f006 f945 	bl	8008cb0 <iprintf>
     printf("DEBUG: [VPC3_Start] MODE_REG_2: 0x%02X\r\n", VPC3_GetModeReg2Shadow());
 8002a26:	f003 f90d 	bl	8005c44 <VPC3_GetModeReg2Shadow>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	484f      	ldr	r0, [pc, #316]	; (8002b6c <VPC3_Start+0x298>)
 8002a30:	f006 f93e 	bl	8008cb0 <iprintf>
      printf("DEBUG: [VPC3_Start] MODE_REG_3: 0x%02X\r\n", Vpc3Read(bVpc3WoModeReg3));
 8002a34:	4b3a      	ldr	r3, [pc, #232]	; (8002b20 <VPC3_Start+0x24c>)
 8002a36:	881b      	ldrh	r3, [r3, #0]
 8002a38:	3312      	adds	r3, #18
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f003 fa57 	bl	8005ef0 <Vpc3Read>
 8002a42:	4603      	mov	r3, r0
 8002a44:	4619      	mov	r1, r3
 8002a46:	484a      	ldr	r0, [pc, #296]	; (8002b70 <VPC3_Start+0x29c>)
 8002a48:	f006 f932 	bl	8008cb0 <iprintf>
      
      // DEBUG: Verificar otros registros importantes
      printf("DEBUG: [VPC3_Start] Verificando otros registros...\r\n");
 8002a4c:	4849      	ldr	r0, [pc, #292]	; (8002b74 <VPC3_Start+0x2a0>)
 8002a4e:	f006 f9cb 	bl	8008de8 <puts>
      printf("DEBUG: [VPC3_Start] STATUS_H: 0x%02X\r\n", Vpc3Read(0x05));
 8002a52:	2005      	movs	r0, #5
 8002a54:	f003 fa4c 	bl	8005ef0 <Vpc3Read>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	4846      	ldr	r0, [pc, #280]	; (8002b78 <VPC3_Start+0x2a4>)
 8002a5e:	f006 f927 	bl	8008cb0 <iprintf>
      printf("DEBUG: [VPC3_Start] CONTROL_REG: 0x%02X\r\n", Vpc3Read(0x08));
 8002a62:	2008      	movs	r0, #8
 8002a64:	f003 fa44 	bl	8005ef0 <Vpc3Read>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	4843      	ldr	r0, [pc, #268]	; (8002b7c <VPC3_Start+0x2a8>)
 8002a6e:	f006 f91f 	bl	8008cb0 <iprintf>
   }

   /* Fetch the first diagnosis buffer */
   printf("DEBUG: Obteniendo puntero del buffer de diagnostico...\r\n");
 8002a72:	4843      	ldr	r0, [pc, #268]	; (8002b80 <VPC3_Start+0x2ac>)
 8002a74:	f006 f9b8 	bl	8008de8 <puts>
   pDpSystem->pDiagBuffer = VPC3_GetDiagBufPtr();
 8002a78:	4b42      	ldr	r3, [pc, #264]	; (8002b84 <VPC3_Start+0x2b0>)
 8002a7a:	681c      	ldr	r4, [r3, #0]
 8002a7c:	f000 ff38 	bl	80038f0 <VPC3_GetDiagBufPtr>
 8002a80:	4603      	mov	r3, r0
 8002a82:	f8c4 305e 	str.w	r3, [r4, #94]	; 0x5e
   printf("DEBUG: Puntero del buffer de diagnostico: 0x%08X\r\n", (unsigned int)pDpSystem->pDiagBuffer);
 8002a86:	4b3f      	ldr	r3, [pc, #252]	; (8002b84 <VPC3_Start+0x2b0>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f8d3 305e 	ldr.w	r3, [r3, #94]	; 0x5e
 8002a8e:	4619      	mov	r1, r3
 8002a90:	483d      	ldr	r0, [pc, #244]	; (8002b88 <VPC3_Start+0x2b4>)
 8002a92:	f006 f90d 	bl	8008cb0 <iprintf>

   // DEBUG: Verificar estado final después de la inicialización
   printf("DEBUG: [VPC3_Start] Verificando estado final después del START...\r\n");
 8002a96:	483d      	ldr	r0, [pc, #244]	; (8002b8c <VPC3_Start+0x2b8>)
 8002a98:	f006 f9a6 	bl	8008de8 <puts>
   uint8_t final_status_l = VPC3_GET_STATUS_L();
 8002a9c:	4b20      	ldr	r3, [pc, #128]	; (8002b20 <VPC3_Start+0x24c>)
 8002a9e:	881b      	ldrh	r3, [r3, #0]
 8002aa0:	3304      	adds	r3, #4
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f003 fa23 	bl	8005ef0 <Vpc3Read>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	713b      	strb	r3, [r7, #4]
   uint8_t final_status_h = VPC3_GET_STATUS_H();
 8002aae:	4b1c      	ldr	r3, [pc, #112]	; (8002b20 <VPC3_Start+0x24c>)
 8002ab0:	881b      	ldrh	r3, [r3, #0]
 8002ab2:	3305      	adds	r3, #5
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f003 fa1a 	bl	8005ef0 <Vpc3Read>
 8002abc:	4603      	mov	r3, r0
 8002abe:	70fb      	strb	r3, [r7, #3]
   uint8_t final_mode_reg1 = Vpc3Read(bVpc3RwModeReg0_H);
 8002ac0:	4b17      	ldr	r3, [pc, #92]	; (8002b20 <VPC3_Start+0x24c>)
 8002ac2:	881b      	ldrh	r3, [r3, #0]
 8002ac4:	3307      	adds	r3, #7
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f003 fa11 	bl	8005ef0 <Vpc3Read>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	70bb      	strb	r3, [r7, #2]
   printf("DEBUG: [VPC3_Start] STATUS_L final: 0x%02X\r\n", final_status_l);
 8002ad2:	793b      	ldrb	r3, [r7, #4]
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	482e      	ldr	r0, [pc, #184]	; (8002b90 <VPC3_Start+0x2bc>)
 8002ad8:	f006 f8ea 	bl	8008cb0 <iprintf>
   printf("DEBUG: [VPC3_Start] STATUS_H final: 0x%02X\r\n", final_status_h);
 8002adc:	78fb      	ldrb	r3, [r7, #3]
 8002ade:	4619      	mov	r1, r3
 8002ae0:	482c      	ldr	r0, [pc, #176]	; (8002b94 <VPC3_Start+0x2c0>)
 8002ae2:	f006 f8e5 	bl	8008cb0 <iprintf>
   printf("DEBUG: [VPC3_Start] MODE_REG_1 final: 0x%02X\r\n", final_mode_reg1);
 8002ae6:	78bb      	ldrb	r3, [r7, #2]
 8002ae8:	4619      	mov	r1, r3
 8002aea:	482b      	ldr	r0, [pc, #172]	; (8002b98 <VPC3_Start+0x2c4>)
 8002aec:	f006 f8e0 	bl	8008cb0 <iprintf>
   
   if( ( final_status_l & VPC3_PASS_IDLE ) != 0x00 )
 8002af0:	793b      	ldrb	r3, [r7, #4]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <VPC3_Start+0x22e>
   {
      printf("DEBUG: [VPC3_Start] PASS_IDLE check: OK\r\n");
 8002afa:	4828      	ldr	r0, [pc, #160]	; (8002b9c <VPC3_Start+0x2c8>)
 8002afc:	f006 f974 	bl	8008de8 <puts>
 8002b00:	e002      	b.n	8002b08 <VPC3_Start+0x234>
   }
   else
   {
      printf("DEBUG: [VPC3_Start] PASS_IDLE check: FAILED\r\n");
 8002b02:	4827      	ldr	r0, [pc, #156]	; (8002ba0 <VPC3_Start+0x2cc>)
 8002b04:	f006 f970 	bl	8008de8 <puts>
   }
   
   printf("DEBUG: VPC3_Start - FIN\r\n");
 8002b08:	4826      	ldr	r0, [pc, #152]	; (8002ba4 <VPC3_Start+0x2d0>)
 8002b0a:	f006 f96d 	bl	8008de8 <puts>
} /* void VPC3_Start( void ) */
 8002b0e:	bf00      	nop
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd90      	pop	{r4, r7, pc}
 8002b16:	bf00      	nop
 8002b18:	0800cfa4 	.word	0x0800cfa4
 8002b1c:	0800cfc0 	.word	0x0800cfc0
 8002b20:	20000144 	.word	0x20000144
 8002b24:	0800cff0 	.word	0x0800cff0
 8002b28:	0800d014 	.word	0x0800d014
 8002b2c:	0800d044 	.word	0x0800d044
 8002b30:	0800d07c 	.word	0x0800d07c
 8002b34:	0800d0c4 	.word	0x0800d0c4
 8002b38:	0800d100 	.word	0x0800d100
 8002b3c:	0800d138 	.word	0x0800d138
 8002b40:	0800d178 	.word	0x0800d178
 8002b44:	0800d1c8 	.word	0x0800d1c8
 8002b48:	0800d208 	.word	0x0800d208
 8002b4c:	0800d264 	.word	0x0800d264
 8002b50:	0800d2a0 	.word	0x0800d2a0
 8002b54:	0800d2c8 	.word	0x0800d2c8
 8002b58:	0800d304 	.word	0x0800d304
 8002b5c:	0800d338 	.word	0x0800d338
 8002b60:	0800d384 	.word	0x0800d384
 8002b64:	0800d3d0 	.word	0x0800d3d0
 8002b68:	0800d3fc 	.word	0x0800d3fc
 8002b6c:	0800d428 	.word	0x0800d428
 8002b70:	0800d454 	.word	0x0800d454
 8002b74:	0800d480 	.word	0x0800d480
 8002b78:	0800d4b4 	.word	0x0800d4b4
 8002b7c:	0800d4dc 	.word	0x0800d4dc
 8002b80:	0800d508 	.word	0x0800d508
 8002b84:	20000000 	.word	0x20000000
 8002b88:	0800d540 	.word	0x0800d540
 8002b8c:	0800d574 	.word	0x0800d574
 8002b90:	0800d5b8 	.word	0x0800d5b8
 8002b94:	0800d5e8 	.word	0x0800d5e8
 8002b98:	0800d618 	.word	0x0800d618
 8002b9c:	0800d648 	.word	0x0800d648
 8002ba0:	0800d674 	.word	0x0800d674
 8002ba4:	0800d6a4 	.word	0x0800d6a4

08002ba8 <VPC3_SetConstants>:

  \retval DP_OK - Initialization OK
  \retval DP_ADDRESS_ERROR - Error, DP Slave address
*/
static DP_ERROR_CODE VPC3_SetConstants( uint8_t bSlaveAddress, uint16_t wIdentNumber )
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	4603      	mov	r3, r0
 8002bb0:	460a      	mov	r2, r1
 8002bb2:	71fb      	strb	r3, [r7, #7]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	80bb      	strh	r3, [r7, #4]
DP_ERROR_CODE bError;

   bError = DP_OK;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	73fb      	strb	r3, [r7, #15]

   pDpSystem->bDinBufsize  = DIN_BUFSIZE;
 8002bbc:	4ba5      	ldr	r3, [pc, #660]	; (8002e54 <VPC3_SetConstants+0x2ac>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2202      	movs	r2, #2
 8002bc2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
   pDpSystem->bDoutBufsize = DOUT_BUFSIZE;
 8002bc6:	4ba3      	ldr	r3, [pc, #652]	; (8002e54 <VPC3_SetConstants+0x2ac>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2202      	movs	r2, #2
 8002bcc:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
   pDpSystem->bPrmBufsize  = PRM_BUFSIZE;
 8002bd0:	4ba0      	ldr	r3, [pc, #640]	; (8002e54 <VPC3_SetConstants+0x2ac>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2210      	movs	r2, #16
 8002bd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
   pDpSystem->bDiagBufsize = DIAG_BUFSIZE;
 8002bda:	4b9e      	ldr	r3, [pc, #632]	; (8002e54 <VPC3_SetConstants+0x2ac>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2210      	movs	r2, #16
 8002be0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
   pDpSystem->bCfgBufsize  = CFG_BUFSIZE;
 8002be4:	4b9b      	ldr	r3, [pc, #620]	; (8002e54 <VPC3_SetConstants+0x2ac>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2202      	movs	r2, #2
 8002bea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
   pDpSystem->bSsaBufsize  = SSA_BUFSIZE;
 8002bee:	4b99      	ldr	r3, [pc, #612]	; (8002e54 <VPC3_SetConstants+0x2ac>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

   pDpSystem->wAsicUserRam = ASIC_USER_RAM;
 8002bf8:	4b96      	ldr	r3, [pc, #600]	; (8002e54 <VPC3_SetConstants+0x2ac>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f062 025f 	orn	r2, r2, #95	; 0x5f
 8002c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002c06:	2200      	movs	r2, #0
 8002c08:	f042 0207 	orr.w	r2, r2, #7
 8002c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

   /*-----------------------------------------------------------------------*/
   /* initialize  control logic                                             */
   /*-----------------------------------------------------------------------*/
   pVpc3->bIntReqReg_L VPC3_EXTENSION                = 0x00;
 8002c10:	4b91      	ldr	r3, [pc, #580]	; (8002e58 <VPC3_SetConstants+0x2b0>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2200      	movs	r2, #0
 8002c16:	701a      	strb	r2, [r3, #0]
   pVpc3->bIntReqReg_H VPC3_EXTENSION                = 0x00;
 8002c18:	4b8f      	ldr	r3, [pc, #572]	; (8002e58 <VPC3_SetConstants+0x2b0>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	705a      	strb	r2, [r3, #1]
   pVpc3->sReg.sWrite.bIntAck_L VPC3_EXTENSION       = 0xFF;
 8002c20:	4b8d      	ldr	r3, [pc, #564]	; (8002e58 <VPC3_SetConstants+0x2b0>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	22ff      	movs	r2, #255	; 0xff
 8002c26:	709a      	strb	r2, [r3, #2]
   pVpc3->sReg.sWrite.bIntAck_H VPC3_EXTENSION       = 0xFF;
 8002c28:	4b8b      	ldr	r3, [pc, #556]	; (8002e58 <VPC3_SetConstants+0x2b0>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	22ff      	movs	r2, #255	; 0xff
 8002c2e:	70da      	strb	r2, [r3, #3]
   pVpc3->sCtrlPrm.sWrite.bModeReg1_R VPC3_EXTENSION = 0xFF;
 8002c30:	4b89      	ldr	r3, [pc, #548]	; (8002e58 <VPC3_SetConstants+0x2b0>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	22ff      	movs	r2, #255	; 0xff
 8002c36:	725a      	strb	r2, [r3, #9]

   #if VPC3_SERIAL_MODE
      Vpc3Write( bVpc3RwIntReqReg_L, 0x00 );
 8002c38:	4b88      	ldr	r3, [pc, #544]	; (8002e5c <VPC3_SetConstants+0x2b4>)
 8002c3a:	881b      	ldrh	r3, [r3, #0]
 8002c3c:	2100      	movs	r1, #0
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f003 f8a6 	bl	8005d90 <Vpc3Write>
      Vpc3Write( bVpc3RwIntReqReg_H, 0x00 );
 8002c44:	4b85      	ldr	r3, [pc, #532]	; (8002e5c <VPC3_SetConstants+0x2b4>)
 8002c46:	881b      	ldrh	r3, [r3, #0]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f003 f89e 	bl	8005d90 <Vpc3Write>

      Vpc3Write( bVpc3WoIntAck_L,    0xFF );
 8002c54:	4b81      	ldr	r3, [pc, #516]	; (8002e5c <VPC3_SetConstants+0x2b4>)
 8002c56:	881b      	ldrh	r3, [r3, #0]
 8002c58:	3302      	adds	r3, #2
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	21ff      	movs	r1, #255	; 0xff
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f003 f896 	bl	8005d90 <Vpc3Write>
      Vpc3Write( bVpc3WoIntAck_H,    0xFF );
 8002c64:	4b7d      	ldr	r3, [pc, #500]	; (8002e5c <VPC3_SetConstants+0x2b4>)
 8002c66:	881b      	ldrh	r3, [r3, #0]
 8002c68:	3303      	adds	r3, #3
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	21ff      	movs	r1, #255	; 0xff
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f003 f88e 	bl	8005d90 <Vpc3Write>
      Vpc3Write( bVpc3WoModeReg1_R,  0xFF );
 8002c74:	4b79      	ldr	r3, [pc, #484]	; (8002e5c <VPC3_SetConstants+0x2b4>)
 8002c76:	881b      	ldrh	r3, [r3, #0]
 8002c78:	3309      	adds	r3, #9
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	21ff      	movs	r1, #255	; 0xff
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f003 f886 	bl	8005d90 <Vpc3Write>
   #endif /* #if VPC3_SERIAL_MODE */

   /*-----------------------------------------------------------------------*/
   /* set modes of vpc3                                                     */
   /*-----------------------------------------------------------------------*/
   pVpc3->bModeReg0_H VPC3_EXTENSION = INIT_VPC3_MODE_REG_H;
 8002c84:	4b74      	ldr	r3, [pc, #464]	; (8002e58 <VPC3_SetConstants+0x2b0>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2225      	movs	r2, #37	; 0x25
 8002c8a:	71da      	strb	r2, [r3, #7]
   pVpc3->bModeReg0_L VPC3_EXTENSION = INIT_VPC3_MODE_REG_L;
 8002c8c:	4b72      	ldr	r3, [pc, #456]	; (8002e58 <VPC3_SetConstants+0x2b0>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	22c0      	movs	r2, #192	; 0xc0
 8002c92:	719a      	strb	r2, [r3, #6]

   pVpc3->sCtrlPrm.sWrite.bModeReg2 VPC3_EXTENSION = INIT_VPC3_MODE_REG_2;
 8002c94:	4b70      	ldr	r3, [pc, #448]	; (8002e58 <VPC3_SetConstants+0x2b0>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2205      	movs	r2, #5
 8002c9a:	731a      	strb	r2, [r3, #12]
   pVpc3->sCtrlPrm.sWrite.bModeReg3 VPC3_EXTENSION = INIT_VPC3_MODE_REG_3;
 8002c9c:	4b6e      	ldr	r3, [pc, #440]	; (8002e58 <VPC3_SetConstants+0x2b0>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	749a      	strb	r2, [r3, #18]

   #if VPC3_SERIAL_MODE
      printf("DEBUG: [VPC3_SetConstants] Escribiendo registros de modo...\r\n");
 8002ca4:	486e      	ldr	r0, [pc, #440]	; (8002e60 <VPC3_SetConstants+0x2b8>)
 8002ca6:	f006 f89f 	bl	8008de8 <puts>
      printf("DEBUG: [VPC3_SetConstants] Escribiendo MODE_REG_0_H: 0x%02X\r\n", INIT_VPC3_MODE_REG_H);
 8002caa:	2125      	movs	r1, #37	; 0x25
 8002cac:	486d      	ldr	r0, [pc, #436]	; (8002e64 <VPC3_SetConstants+0x2bc>)
 8002cae:	f005 ffff 	bl	8008cb0 <iprintf>
      Vpc3Write( bVpc3RwModeReg0_H, INIT_VPC3_MODE_REG_H );
 8002cb2:	4b6a      	ldr	r3, [pc, #424]	; (8002e5c <VPC3_SetConstants+0x2b4>)
 8002cb4:	881b      	ldrh	r3, [r3, #0]
 8002cb6:	3307      	adds	r3, #7
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	2125      	movs	r1, #37	; 0x25
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f003 f867 	bl	8005d90 <Vpc3Write>
      printf("DEBUG: [VPC3_SetConstants] Escribiendo MODE_REG_0_L: 0x%02X\r\n", INIT_VPC3_MODE_REG_L);
 8002cc2:	21c0      	movs	r1, #192	; 0xc0
 8002cc4:	4868      	ldr	r0, [pc, #416]	; (8002e68 <VPC3_SetConstants+0x2c0>)
 8002cc6:	f005 fff3 	bl	8008cb0 <iprintf>
      Vpc3Write( bVpc3RwModeReg0_L, INIT_VPC3_MODE_REG_L );
 8002cca:	4b64      	ldr	r3, [pc, #400]	; (8002e5c <VPC3_SetConstants+0x2b4>)
 8002ccc:	881b      	ldrh	r3, [r3, #0]
 8002cce:	3306      	adds	r3, #6
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	21c0      	movs	r1, #192	; 0xc0
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f003 f85b 	bl	8005d90 <Vpc3Write>

      printf("DEBUG: [VPC3_SetConstants] Escribiendo MODE_REG_2: 0x%02X\r\n", INIT_VPC3_MODE_REG_2);
 8002cda:	2105      	movs	r1, #5
 8002cdc:	4863      	ldr	r0, [pc, #396]	; (8002e6c <VPC3_SetConstants+0x2c4>)
 8002cde:	f005 ffe7 	bl	8008cb0 <iprintf>
      Vpc3Write( bVpc3WoModeReg2, INIT_VPC3_MODE_REG_2 );
 8002ce2:	4b5e      	ldr	r3, [pc, #376]	; (8002e5c <VPC3_SetConstants+0x2b4>)
 8002ce4:	881b      	ldrh	r3, [r3, #0]
 8002ce6:	330c      	adds	r3, #12
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	2105      	movs	r1, #5
 8002cec:	4618      	mov	r0, r3
 8002cee:	f003 f84f 	bl	8005d90 <Vpc3Write>
      printf("DEBUG: [VPC3_SetConstants] Escribiendo MODE_REG_3: 0x%02X\r\n", INIT_VPC3_MODE_REG_3);
 8002cf2:	2100      	movs	r1, #0
 8002cf4:	485e      	ldr	r0, [pc, #376]	; (8002e70 <VPC3_SetConstants+0x2c8>)
 8002cf6:	f005 ffdb 	bl	8008cb0 <iprintf>
      Vpc3Write( bVpc3WoModeReg3, INIT_VPC3_MODE_REG_3 );
 8002cfa:	4b58      	ldr	r3, [pc, #352]	; (8002e5c <VPC3_SetConstants+0x2b4>)
 8002cfc:	881b      	ldrh	r3, [r3, #0]
 8002cfe:	3312      	adds	r3, #18
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	2100      	movs	r1, #0
 8002d04:	4618      	mov	r0, r3
 8002d06:	f003 f843 	bl	8005d90 <Vpc3Write>
      
      // DEBUG: Verificar que los registros se configuraron correctamente
      printf("DEBUG: [VPC3_SetConstants] Verificando configuración de registros de modo...\r\n");
 8002d0a:	485a      	ldr	r0, [pc, #360]	; (8002e74 <VPC3_SetConstants+0x2cc>)
 8002d0c:	f006 f86c 	bl	8008de8 <puts>
      printf("DEBUG: [VPC3_SetConstants] MODE_REG_0_H configurado: 0x%02X (esperado: 0x%02X)\r\n", Vpc3Read(bVpc3RwModeReg0_H), INIT_VPC3_MODE_REG_H);
 8002d10:	4b52      	ldr	r3, [pc, #328]	; (8002e5c <VPC3_SetConstants+0x2b4>)
 8002d12:	881b      	ldrh	r3, [r3, #0]
 8002d14:	3307      	adds	r3, #7
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f003 f8e9 	bl	8005ef0 <Vpc3Read>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2225      	movs	r2, #37	; 0x25
 8002d22:	4619      	mov	r1, r3
 8002d24:	4854      	ldr	r0, [pc, #336]	; (8002e78 <VPC3_SetConstants+0x2d0>)
 8002d26:	f005 ffc3 	bl	8008cb0 <iprintf>
      printf("DEBUG: [VPC3_SetConstants] MODE_REG_0_L configurado: 0x%02X (esperado: 0x%02X)\r\n", Vpc3Read(bVpc3RwModeReg0_L), INIT_VPC3_MODE_REG_L);
 8002d2a:	4b4c      	ldr	r3, [pc, #304]	; (8002e5c <VPC3_SetConstants+0x2b4>)
 8002d2c:	881b      	ldrh	r3, [r3, #0]
 8002d2e:	3306      	adds	r3, #6
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	4618      	mov	r0, r3
 8002d34:	f003 f8dc 	bl	8005ef0 <Vpc3Read>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	22c0      	movs	r2, #192	; 0xc0
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	484f      	ldr	r0, [pc, #316]	; (8002e7c <VPC3_SetConstants+0x2d4>)
 8002d40:	f005 ffb6 	bl	8008cb0 <iprintf>
     printf("DEBUG: [VPC3_SetConstants] MODE_REG_2 configurado: 0x%02X (esperado: 0x%02X)\r\n", VPC3_GetModeReg2Shadow(), INIT_VPC3_MODE_REG_2);
 8002d44:	f002 ff7e 	bl	8005c44 <VPC3_GetModeReg2Shadow>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2205      	movs	r2, #5
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	484c      	ldr	r0, [pc, #304]	; (8002e80 <VPC3_SetConstants+0x2d8>)
 8002d50:	f005 ffae 	bl	8008cb0 <iprintf>
      printf("DEBUG: [VPC3_SetConstants] MODE_REG_3 configurado: 0x%02X (esperado: 0x%02X)\r\n", Vpc3Read(bVpc3WoModeReg3), INIT_VPC3_MODE_REG_3);
 8002d54:	4b41      	ldr	r3, [pc, #260]	; (8002e5c <VPC3_SetConstants+0x2b4>)
 8002d56:	881b      	ldrh	r3, [r3, #0]
 8002d58:	3312      	adds	r3, #18
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f003 f8c7 	bl	8005ef0 <Vpc3Read>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2200      	movs	r2, #0
 8002d66:	4619      	mov	r1, r3
 8002d68:	4846      	ldr	r0, [pc, #280]	; (8002e84 <VPC3_SetConstants+0x2dc>)
 8002d6a:	f005 ffa1 	bl	8008cb0 <iprintf>
   #endif /* #if VPC3_SERIAL_MODE */

   /*-----------------------------------------------------------------------*/
   /* set interrupt triggers                                                */
   /*-----------------------------------------------------------------------*/
   pVpc3->sReg.sWrite.bIntMask_H VPC3_EXTENSION = (uint8_t)(~(INIT_VPC3_IND_H));
 8002d6e:	4b3a      	ldr	r3, [pc, #232]	; (8002e58 <VPC3_SetConstants+0x2b0>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	22e2      	movs	r2, #226	; 0xe2
 8002d74:	715a      	strb	r2, [r3, #5]
   pVpc3->sReg.sWrite.bIntMask_L VPC3_EXTENSION = (uint8_t)(~(INIT_VPC3_IND_L));
 8002d76:	4b38      	ldr	r3, [pc, #224]	; (8002e58 <VPC3_SetConstants+0x2b0>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	22fd      	movs	r2, #253	; 0xfd
 8002d7c:	711a      	strb	r2, [r3, #4]

   pDpSystem->bIntIndHigh = (uint8_t)(~(INIT_VPC3_IND_H));
 8002d7e:	4b35      	ldr	r3, [pc, #212]	; (8002e54 <VPC3_SetConstants+0x2ac>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	22e2      	movs	r2, #226	; 0xe2
 8002d84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
   pDpSystem->bIntIndLow  = (uint8_t)(~(INIT_VPC3_IND_L));
 8002d88:	4b32      	ldr	r3, [pc, #200]	; (8002e54 <VPC3_SetConstants+0x2ac>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	22fd      	movs	r2, #253	; 0xfd
 8002d8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

   #if VPC3_SERIAL_MODE
      Vpc3Write( bVpc3WoIntMask_H, (uint8_t)(~(INIT_VPC3_IND_H)) );
 8002d92:	4b32      	ldr	r3, [pc, #200]	; (8002e5c <VPC3_SetConstants+0x2b4>)
 8002d94:	881b      	ldrh	r3, [r3, #0]
 8002d96:	3305      	adds	r3, #5
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	21e2      	movs	r1, #226	; 0xe2
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f002 fff7 	bl	8005d90 <Vpc3Write>
      Vpc3Write( bVpc3WoIntMask_L, (uint8_t)(~(INIT_VPC3_IND_L)) );
 8002da2:	4b2e      	ldr	r3, [pc, #184]	; (8002e5c <VPC3_SetConstants+0x2b4>)
 8002da4:	881b      	ldrh	r3, [r3, #0]
 8002da6:	3304      	adds	r3, #4
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	21fd      	movs	r1, #253	; 0xfd
 8002dac:	4618      	mov	r0, r3
 8002dae:	f002 ffef 	bl	8005d90 <Vpc3Write>
   #endif /* #if VPC3_SERIAL_MODE */

   /*-----------------------------------------------------------------------*/
   /* set time-variables                                                    */
   /*-----------------------------------------------------------------------*/
   pVpc3->sCtrlPrm.sWrite.bWdBaudControlVal VPC3_EXTENSION = 0x10;
 8002db2:	4b29      	ldr	r3, [pc, #164]	; (8002e58 <VPC3_SetConstants+0x2b0>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2210      	movs	r2, #16
 8002db8:	729a      	strb	r2, [r3, #10]
   pVpc3->sCtrlPrm.sWrite.bMinTsdrVal VPC3_EXTENSION       = 0x0B;
 8002dba:	4b27      	ldr	r3, [pc, #156]	; (8002e58 <VPC3_SetConstants+0x2b0>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	220b      	movs	r2, #11
 8002dc0:	72da      	strb	r2, [r3, #11]

   #if VPC3_SERIAL_MODE
      Vpc3Write( bVpc3WoWdBaudControlVal, 0x10 );
 8002dc2:	4b26      	ldr	r3, [pc, #152]	; (8002e5c <VPC3_SetConstants+0x2b4>)
 8002dc4:	881b      	ldrh	r3, [r3, #0]
 8002dc6:	330a      	adds	r3, #10
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	2110      	movs	r1, #16
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f002 ffdf 	bl	8005d90 <Vpc3Write>
      Vpc3Write( bVpc3WoMinTsdrVal, 0x0B );
 8002dd2:	4b22      	ldr	r3, [pc, #136]	; (8002e5c <VPC3_SetConstants+0x2b4>)
 8002dd4:	881b      	ldrh	r3, [r3, #0]
 8002dd6:	330b      	adds	r3, #11
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	210b      	movs	r1, #11
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f002 ffd7 	bl	8005d90 <Vpc3Write>
   #endif /* #if DP_ISOCHRONOUS_MODE */

   /*-----------------------------------------------------------------------*/
   /* set user watchdog (dataexchange telegram counter)                     */
   /*-----------------------------------------------------------------------*/
   pVpc3->abUserWdValue[1] VPC3_EXTENSION = (uint8_t)(USER_WD >> 8);
 8002de2:	4b1d      	ldr	r3, [pc, #116]	; (8002e58 <VPC3_SetConstants+0x2b0>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2201      	movs	r2, #1
 8002de8:	765a      	strb	r2, [r3, #25]
   pVpc3->abUserWdValue[0] VPC3_EXTENSION = (uint8_t)(USER_WD);
 8002dea:	4b1b      	ldr	r3, [pc, #108]	; (8002e58 <VPC3_SetConstants+0x2b0>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	22ff      	movs	r2, #255	; 0xff
 8002df0:	761a      	strb	r2, [r3, #24]

   /*-----------------------------------------------------------------------*/
   /* set pointer to FF                                                     */
   /*-----------------------------------------------------------------------*/
   pVpc3->bFdlSapListPtr   VPC3_EXTENSION = VPC3_SAP_CTRL_LIST_START;
 8002df2:	4b19      	ldr	r3, [pc, #100]	; (8002e58 <VPC3_SetConstants+0x2b0>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2208      	movs	r2, #8
 8002df8:	75da      	strb	r2, [r3, #23]
   VPC3_SET_EMPTY_SAP_LIST();
 8002dfa:	4b18      	ldr	r3, [pc, #96]	; (8002e5c <VPC3_SetConstants+0x2b4>)
 8002dfc:	881b      	ldrh	r3, [r3, #0]
 8002dfe:	3340      	adds	r3, #64	; 0x40
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	21ff      	movs	r1, #255	; 0xff
 8002e04:	4618      	mov	r0, r3
 8002e06:	f002 ffc3 	bl	8005d90 <Vpc3Write>

   /*-----------------------------------------------------------------------*/
   /* ssa support                                                           */
   /*-----------------------------------------------------------------------*/
   pVpc3->bRealNoAddChange VPC3_EXTENSION = ( SSA_BUFSIZE == 0 ) ? 0xFF : 0x00;
 8002e0a:	4b13      	ldr	r3, [pc, #76]	; (8002e58 <VPC3_SetConstants+0x2b0>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	22ff      	movs	r2, #255	; 0xff
 8002e10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

   /*-----------------------------------------------------------------------*/
   /* set profibus ident number                                             */
   /*-----------------------------------------------------------------------*/
   pVpc3->bIdentHigh VPC3_EXTENSION = (uint8_t)(wIdentNumber >> 8);
 8002e14:	88bb      	ldrh	r3, [r7, #4]
 8002e16:	0a1b      	lsrs	r3, r3, #8
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	4b0f      	ldr	r3, [pc, #60]	; (8002e58 <VPC3_SetConstants+0x2b0>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	b2d2      	uxtb	r2, r2
 8002e20:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
   pVpc3->bIdentLow  VPC3_EXTENSION = (uint8_t)(wIdentNumber);
 8002e24:	4b0c      	ldr	r3, [pc, #48]	; (8002e58 <VPC3_SetConstants+0x2b0>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	88ba      	ldrh	r2, [r7, #4]
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

   /*-----------------------------------------------------------------------*/
   /* set and check slave address                                           */
   /*-----------------------------------------------------------------------*/
   if( bSlaveAddress < 127 && bSlaveAddress != 0 )
 8002e30:	79fb      	ldrb	r3, [r7, #7]
 8002e32:	2b7e      	cmp	r3, #126	; 0x7e
 8002e34:	d807      	bhi.n	8002e46 <VPC3_SetConstants+0x29e>
 8002e36:	79fb      	ldrb	r3, [r7, #7]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d004      	beq.n	8002e46 <VPC3_SetConstants+0x29e>
   {
      pVpc3->bTsAddr VPC3_EXTENSION = bSlaveAddress;
 8002e3c:	4b06      	ldr	r3, [pc, #24]	; (8002e58 <VPC3_SetConstants+0x2b0>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	79fa      	ldrb	r2, [r7, #7]
 8002e42:	759a      	strb	r2, [r3, #22]
 8002e44:	e001      	b.n	8002e4a <VPC3_SetConstants+0x2a2>
   } /* if( bSlaveAddress < 127 && bSlaveAddress != 0 ) */
   else
   {
      bError = DP_ADDRESS_ERROR;
 8002e46:	2311      	movs	r3, #17
 8002e48:	73fb      	strb	r3, [r7, #15]
   } /* else of if( bSlaveAddress < 127 && bSlaveAddress != 0 ) */

   return bError;
 8002e4a:	7bfb      	ldrb	r3, [r7, #15]
} /* static DP_ERROR_CODE VPC3_SetConstants( uint8_t bSlaveAddress, uint16_t wIdentNumber ) */
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3710      	adds	r7, #16
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	20000000 	.word	0x20000000
 8002e58:	200001b4 	.word	0x200001b4
 8002e5c:	20000144 	.word	0x20000144
 8002e60:	0800d6c0 	.word	0x0800d6c0
 8002e64:	0800d700 	.word	0x0800d700
 8002e68:	0800d740 	.word	0x0800d740
 8002e6c:	0800d780 	.word	0x0800d780
 8002e70:	0800d7bc 	.word	0x0800d7bc
 8002e74:	0800d7f8 	.word	0x0800d7f8
 8002e78:	0800d848 	.word	0x0800d848
 8002e7c:	0800d89c 	.word	0x0800d89c
 8002e80:	0800d8f0 	.word	0x0800d8f0
 8002e84:	0800d940 	.word	0x0800d940

08002e88 <VPC3_CalculateInpOutpLength>:
   \retval DP_CFG_LEN_ERROR - Error with CFG length
   \retval DP_CALCULATE_IO_ERROR - Error with DIN or DOUT length
   \retval DP_CFG_FORMAT_ERROR - Error in special configuration format
*/
DP_ERROR_CODE VPC3_CalculateInpOutpLength( MEM_UNSIGNED8_PTR pToCfgData, uint8_t bCfgLength )
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	460b      	mov	r3, r1
 8002e92:	70fb      	strb	r3, [r7, #3]
uint8_t       bTempOutputDataLength;
uint8_t       bTempInputDataLength;
uint8_t       bLength;
uint8_t       bCount;

   bError = DP_OK;
 8002e94:	2301      	movs	r3, #1
 8002e96:	73fb      	strb	r3, [r7, #15]
   bTempOutputDataLength = 0;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	73bb      	strb	r3, [r7, #14]
   bTempInputDataLength  = 0;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	737b      	strb	r3, [r7, #13]

   if( ( bCfgLength > 0 ) && ( bCfgLength <= CFG_BUFSIZE ) )
 8002ea0:	78fb      	ldrb	r3, [r7, #3]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	f000 80d0 	beq.w	8003048 <VPC3_CalculateInpOutpLength+0x1c0>
 8002ea8:	78fb      	ldrb	r3, [r7, #3]
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	f200 80cc 	bhi.w	8003048 <VPC3_CalculateInpOutpLength+0x1c0>
   {
      for( ; bCfgLength > 0; bCfgLength -= bCount )
 8002eb0:	e0a3      	b.n	8002ffa <VPC3_CalculateInpOutpLength+0x172>
      {
         bCount = 0;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	733b      	strb	r3, [r7, #12]

         if( *pToCfgData & VPC3_CFG_IS_BYTE_FORMAT )
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d035      	beq.n	8002f2e <VPC3_CalculateInpOutpLength+0xa6>
         {
            /* general identifier format */
            bCount++;
 8002ec2:	7b3b      	ldrb	r3, [r7, #12]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	733b      	strb	r3, [r7, #12]
            /* pToCfgData points to "Configurationbyte", CFG_BF means "CFG_IS_BYTE_FORMAT" */
            bLength = (uint8_t)( ( *pToCfgData & VPC3_CFG_BF_LENGTH) + 1 );
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	f003 030f 	and.w	r3, r3, #15
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	72fb      	strb	r3, [r7, #11]

            if( *pToCfgData & VPC3_CFG_BF_OUTP_EXIST )
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	f003 0320 	and.w	r3, r3, #32
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00d      	beq.n	8002efe <VPC3_CalculateInpOutpLength+0x76>
            {
               bTempOutputDataLength += ( *pToCfgData & VPC3_CFG_LENGTH_IS_WORD_FORMAT ) ? ( 2 * bLength ) : bLength;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d003      	beq.n	8002ef6 <VPC3_CalculateInpOutpLength+0x6e>
 8002eee:	7afb      	ldrb	r3, [r7, #11]
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	e000      	b.n	8002ef8 <VPC3_CalculateInpOutpLength+0x70>
 8002ef6:	7afb      	ldrb	r3, [r7, #11]
 8002ef8:	7bba      	ldrb	r2, [r7, #14]
 8002efa:	4413      	add	r3, r2
 8002efc:	73bb      	strb	r3, [r7, #14]
            } /* if( *pToCfgData & VPC3_CFG_BF_OUTP_EXIST ) */

            if( *pToCfgData & VPC3_CFG_BF_INP_EXIST )
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	f003 0310 	and.w	r3, r3, #16
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00d      	beq.n	8002f26 <VPC3_CalculateInpOutpLength+0x9e>
            {
               bTempInputDataLength += ( *pToCfgData & VPC3_CFG_LENGTH_IS_WORD_FORMAT ) ? ( 2 * bLength ) : bLength;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d003      	beq.n	8002f1e <VPC3_CalculateInpOutpLength+0x96>
 8002f16:	7afb      	ldrb	r3, [r7, #11]
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	e000      	b.n	8002f20 <VPC3_CalculateInpOutpLength+0x98>
 8002f1e:	7afb      	ldrb	r3, [r7, #11]
 8002f20:	7b7a      	ldrb	r2, [r7, #13]
 8002f22:	4413      	add	r3, r2
 8002f24:	737b      	strb	r3, [r7, #13]
            } /* if( *pToCfgData & VPC3_CFG_BF_INP_EXIST ) */

            pToCfgData++;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	3301      	adds	r3, #1
 8002f2a:	607b      	str	r3, [r7, #4]
 8002f2c:	e061      	b.n	8002ff2 <VPC3_CalculateInpOutpLength+0x16a>
         } /* if( *pToCfgData & VPC3_CFG_IS_BYTE_FORMAT ) */
         else
         {
            /* pToCfgData points to the headerbyte of "special identifier format */
            /* CFG_SF means "CFG_IS_SPECIAL_FORMAT" */
            if( *pToCfgData & VPC3_CFG_SF_OUTP_EXIST )
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	b25b      	sxtb	r3, r3
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	da1b      	bge.n	8002f70 <VPC3_CalculateInpOutpLength+0xe8>
            {
               bCount++;    /* next byte contains the length of outp_data */
 8002f38:	7b3b      	ldrb	r3, [r7, #12]
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	733b      	strb	r3, [r7, #12]
               bLength = (uint8_t)( ( *( pToCfgData + bCount ) & VPC3_CFG_SF_LENGTH ) + 1 );
 8002f3e:	7b3b      	ldrb	r3, [r7, #12]
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	4413      	add	r3, r2
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	72fb      	strb	r3, [r7, #11]

               bTempOutputDataLength += ( *( pToCfgData + bCount ) & VPC3_CFG_LENGTH_IS_WORD_FORMAT ) ? ( 2 * bLength ) : bLength;
 8002f50:	7b3b      	ldrb	r3, [r7, #12]
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	4413      	add	r3, r2
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d003      	beq.n	8002f68 <VPC3_CalculateInpOutpLength+0xe0>
 8002f60:	7afb      	ldrb	r3, [r7, #11]
 8002f62:	005b      	lsls	r3, r3, #1
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	e000      	b.n	8002f6a <VPC3_CalculateInpOutpLength+0xe2>
 8002f68:	7afb      	ldrb	r3, [r7, #11]
 8002f6a:	7bba      	ldrb	r2, [r7, #14]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	73bb      	strb	r3, [r7, #14]
            } /* if( *pToCfgData & VPC3_CFG_SF_OUTP_EXIST ) */

            if( *pToCfgData & VPC3_CFG_SF_INP_EXIST )
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d01b      	beq.n	8002fb4 <VPC3_CalculateInpOutpLength+0x12c>
            {
               bCount++;  /* next byte contains the length of inp_data */
 8002f7c:	7b3b      	ldrb	r3, [r7, #12]
 8002f7e:	3301      	adds	r3, #1
 8002f80:	733b      	strb	r3, [r7, #12]
               bLength = (uint8_t)( ( *( pToCfgData + bCount ) & VPC3_CFG_SF_LENGTH ) + 1 );
 8002f82:	7b3b      	ldrb	r3, [r7, #12]
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	4413      	add	r3, r2
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	3301      	adds	r3, #1
 8002f92:	72fb      	strb	r3, [r7, #11]

               bTempInputDataLength += ( *( pToCfgData + bCount ) & VPC3_CFG_LENGTH_IS_WORD_FORMAT ) ? ( 2 * bLength ) : bLength;
 8002f94:	7b3b      	ldrb	r3, [r7, #12]
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	4413      	add	r3, r2
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d003      	beq.n	8002fac <VPC3_CalculateInpOutpLength+0x124>
 8002fa4:	7afb      	ldrb	r3, [r7, #11]
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	e000      	b.n	8002fae <VPC3_CalculateInpOutpLength+0x126>
 8002fac:	7afb      	ldrb	r3, [r7, #11]
 8002fae:	7b7a      	ldrb	r2, [r7, #13]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	737b      	strb	r3, [r7, #13]
            } /* if( *pToCfgData & VPC3_CFG_SF_INP_EXIST ) */

            bSpecificDataLength = (uint8_t)( *pToCfgData & VPC3_CFG_BF_LENGTH );
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	f003 030f 	and.w	r3, r3, #15
 8002fbc:	72bb      	strb	r3, [r7, #10]

            if( bSpecificDataLength != 15 )
 8002fbe:	7abb      	ldrb	r3, [r7, #10]
 8002fc0:	2b0f      	cmp	r3, #15
 8002fc2:	d00a      	beq.n	8002fda <VPC3_CalculateInpOutpLength+0x152>
            {
               bCount = (uint8_t)( bCount + 1 + bSpecificDataLength );
 8002fc4:	7b3a      	ldrb	r2, [r7, #12]
 8002fc6:	7abb      	ldrb	r3, [r7, #10]
 8002fc8:	4413      	add	r3, r2
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	3301      	adds	r3, #1
 8002fce:	733b      	strb	r3, [r7, #12]
               pToCfgData = pToCfgData + bCount;
 8002fd0:	7b3b      	ldrb	r3, [r7, #12]
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	607b      	str	r3, [r7, #4]
 8002fd8:	e00b      	b.n	8002ff2 <VPC3_CalculateInpOutpLength+0x16a>
            } /* if( bSpecificDataLength != 15 ) */
            else
            {
               /* specific data length = 15 not allowed */
               pDpSystem->bInputDataLength  = 0xFF;
 8002fda:	4b25      	ldr	r3, [pc, #148]	; (8003070 <VPC3_CalculateInpOutpLength+0x1e8>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	22ff      	movs	r2, #255	; 0xff
 8002fe0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
               pDpSystem->bOutputDataLength = 0xFF;
 8002fe4:	4b22      	ldr	r3, [pc, #136]	; (8003070 <VPC3_CalculateInpOutpLength+0x1e8>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	22ff      	movs	r2, #255	; 0xff
 8002fea:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
               bError = DP_CFG_FORMAT_ERROR;
 8002fee:	2319      	movs	r3, #25
 8002ff0:	73fb      	strb	r3, [r7, #15]
      for( ; bCfgLength > 0; bCfgLength -= bCount )
 8002ff2:	78fa      	ldrb	r2, [r7, #3]
 8002ff4:	7b3b      	ldrb	r3, [r7, #12]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	70fb      	strb	r3, [r7, #3]
 8002ffa:	78fb      	ldrb	r3, [r7, #3]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f47f af58 	bne.w	8002eb2 <VPC3_CalculateInpOutpLength+0x2a>
            } /* else of if( bSpecificDataLength != 15 ) */
         } /* else of if( *pToCfgData & VPC3_CFG_IS_BYTE_FORMAT ) */
      } /* for( ; bCfgLength > 0; bCfgLength -= bCount ) */

      if( ( bCfgLength != 0 ) || ( bTempInputDataLength > DIN_BUFSIZE ) || ( bTempOutputDataLength > DOUT_BUFSIZE ) )
 8003002:	78fb      	ldrb	r3, [r7, #3]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d105      	bne.n	8003014 <VPC3_CalculateInpOutpLength+0x18c>
 8003008:	7b7b      	ldrb	r3, [r7, #13]
 800300a:	2b02      	cmp	r3, #2
 800300c:	d802      	bhi.n	8003014 <VPC3_CalculateInpOutpLength+0x18c>
 800300e:	7bbb      	ldrb	r3, [r7, #14]
 8003010:	2b02      	cmp	r3, #2
 8003012:	d90c      	bls.n	800302e <VPC3_CalculateInpOutpLength+0x1a6>
      {
         pDpSystem->bInputDataLength  = 0xFF;
 8003014:	4b16      	ldr	r3, [pc, #88]	; (8003070 <VPC3_CalculateInpOutpLength+0x1e8>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	22ff      	movs	r2, #255	; 0xff
 800301a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
         pDpSystem->bOutputDataLength = 0xFF;
 800301e:	4b14      	ldr	r3, [pc, #80]	; (8003070 <VPC3_CalculateInpOutpLength+0x1e8>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	22ff      	movs	r2, #255	; 0xff
 8003024:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

         bError = DP_CALCULATE_IO_ERROR;
 8003028:	2312      	movs	r3, #18
 800302a:	73fb      	strb	r3, [r7, #15]
      if( ( bCfgLength != 0 ) || ( bTempInputDataLength > DIN_BUFSIZE ) || ( bTempOutputDataLength > DOUT_BUFSIZE ) )
 800302c:	e018      	b.n	8003060 <VPC3_CalculateInpOutpLength+0x1d8>
      } /* if( ( bCfgLength != 0 ) || ( bTempInputDataLength > DIN_BUFSIZE ) || ( bTempOutputDataLength > DOUT_BUFSIZE ) ) */
      else
      {
         pDpSystem->bInputDataLength  = bTempInputDataLength;
 800302e:	4b10      	ldr	r3, [pc, #64]	; (8003070 <VPC3_CalculateInpOutpLength+0x1e8>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	7b7a      	ldrb	r2, [r7, #13]
 8003034:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
         pDpSystem->bOutputDataLength = bTempOutputDataLength;
 8003038:	4b0d      	ldr	r3, [pc, #52]	; (8003070 <VPC3_CalculateInpOutpLength+0x1e8>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	7bba      	ldrb	r2, [r7, #14]
 800303e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
         bError = DP_OK;
 8003042:	2301      	movs	r3, #1
 8003044:	73fb      	strb	r3, [r7, #15]
      if( ( bCfgLength != 0 ) || ( bTempInputDataLength > DIN_BUFSIZE ) || ( bTempOutputDataLength > DOUT_BUFSIZE ) )
 8003046:	e00b      	b.n	8003060 <VPC3_CalculateInpOutpLength+0x1d8>
      } /* else of if( ( bCfgLength != 0 ) || ( bTempInputDataLength > DIN_BUFSIZE ) || ( bTempOutputDataLength > DOUT_BUFSIZE ) ) */
   } /* if( ( bCfgLength > 0 ) && ( bCfgLength <= CFG_BUFSIZE ) ) */
   else
   {
      pDpSystem->bInputDataLength  = 0xFF;
 8003048:	4b09      	ldr	r3, [pc, #36]	; (8003070 <VPC3_CalculateInpOutpLength+0x1e8>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	22ff      	movs	r2, #255	; 0xff
 800304e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
      pDpSystem->bOutputDataLength = 0xFF;
 8003052:	4b07      	ldr	r3, [pc, #28]	; (8003070 <VPC3_CalculateInpOutpLength+0x1e8>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	22ff      	movs	r2, #255	; 0xff
 8003058:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
      bError = DP_CFG_LEN_ERROR;
 800305c:	2318      	movs	r3, #24
 800305e:	73fb      	strb	r3, [r7, #15]
   } /* else of if( ( bCfgLength > 0 ) && ( bCfgLength <= CFG_BUFSIZE ) ) */

   return bError;
 8003060:	7bfb      	ldrb	r3, [r7, #15]
} /* DP_ERROR_CODE VPC3_CalculateInpOutpLength( MEM_UNSIGNED8_PTR pToCfgData, uint8_t bCfgLength ) */
 8003062:	4618      	mov	r0, r3
 8003064:	3714      	adds	r7, #20
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	20000000 	.word	0x20000000

08003074 <VPC3_InitBufferStructure>:
  \retval DP_SSA_LEN_ERROR - Error with address data length
  \retval DP_CFG_LEN_ERROR - Error with configuration data length
  \retval DP_LESS_MEM_ERROR - Error Overall, too much memory used
*/
static DP_ERROR_CODE VPC3_InitBufferStructure( void )
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b086      	sub	sp, #24
 8003078:	af00      	add	r7, sp, #0
uint16_t       wPrmBufferLength;    /**< calculated length of parameter buffer */
uint16_t       wCfgBufferLength;    /**< calculated length of check-config buffer */
uint16_t       wSsaBufferLength;    /**< calculated length of set-slave-address buffer */
uint16_t       wAux2BufferLength;   /**< calculated length of aux buffer 2*/

   bError = DP_OK;
 800307a:	2301      	movs	r3, #1
 800307c:	75fb      	strb	r3, [r7, #23]

   /*-----------------------------------------------------------------------*/
   /* check buffer length                                                   */
   /*-----------------------------------------------------------------------*/
   if( pDpSystem->bDoutBufsize > 244 )
 800307e:	4b86      	ldr	r3, [pc, #536]	; (8003298 <VPC3_InitBufferStructure+0x224>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8003086:	2bf4      	cmp	r3, #244	; 0xf4
 8003088:	d902      	bls.n	8003090 <VPC3_InitBufferStructure+0x1c>
   {
      bError = DP_DOUT_LEN_ERROR;
 800308a:	2313      	movs	r3, #19
 800308c:	75fb      	strb	r3, [r7, #23]
 800308e:	e049      	b.n	8003124 <VPC3_InitBufferStructure+0xb0>
   } /* if( pDpSystem->bDoutBufsize > 244 ) */

   else
   if( pDpSystem->bDinBufsize > 244 )
 8003090:	4b81      	ldr	r3, [pc, #516]	; (8003298 <VPC3_InitBufferStructure+0x224>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003098:	2bf4      	cmp	r3, #244	; 0xf4
 800309a:	d902      	bls.n	80030a2 <VPC3_InitBufferStructure+0x2e>
   {
      bError = DP_DIN_LEN_ERROR;
 800309c:	2314      	movs	r3, #20
 800309e:	75fb      	strb	r3, [r7, #23]
 80030a0:	e040      	b.n	8003124 <VPC3_InitBufferStructure+0xb0>
   } /* if( pDpSystem->bDinBufsize > 244 ) */

   else
   if( ( pDpSystem->bDiagBufsize < 6 ) || ( pDpSystem->bDiagBufsize > 244 ) )
 80030a2:	4b7d      	ldr	r3, [pc, #500]	; (8003298 <VPC3_InitBufferStructure+0x224>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80030aa:	2b05      	cmp	r3, #5
 80030ac:	d905      	bls.n	80030ba <VPC3_InitBufferStructure+0x46>
 80030ae:	4b7a      	ldr	r3, [pc, #488]	; (8003298 <VPC3_InitBufferStructure+0x224>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80030b6:	2bf4      	cmp	r3, #244	; 0xf4
 80030b8:	d902      	bls.n	80030c0 <VPC3_InitBufferStructure+0x4c>
   {
      bError = DP_DIAG_LEN_ERROR;
 80030ba:	2315      	movs	r3, #21
 80030bc:	75fb      	strb	r3, [r7, #23]
 80030be:	e031      	b.n	8003124 <VPC3_InitBufferStructure+0xb0>
   } /* if( ( pDpSystem->bDiagBufsize < 6 ) || ( pDpSystem->bDiagBufsize > 244 ) */

   else
   if( ( pDpSystem->bPrmBufsize < 7 ) || ( pDpSystem->bPrmBufsize > 244 ) )
 80030c0:	4b75      	ldr	r3, [pc, #468]	; (8003298 <VPC3_InitBufferStructure+0x224>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80030c8:	2b06      	cmp	r3, #6
 80030ca:	d905      	bls.n	80030d8 <VPC3_InitBufferStructure+0x64>
 80030cc:	4b72      	ldr	r3, [pc, #456]	; (8003298 <VPC3_InitBufferStructure+0x224>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80030d4:	2bf4      	cmp	r3, #244	; 0xf4
 80030d6:	d902      	bls.n	80030de <VPC3_InitBufferStructure+0x6a>
   {
      bError = DP_PRM_LEN_ERROR;
 80030d8:	2316      	movs	r3, #22
 80030da:	75fb      	strb	r3, [r7, #23]
 80030dc:	e022      	b.n	8003124 <VPC3_InitBufferStructure+0xb0>
   } /* if( ( pDpSystem->bPrmBufsize < 7 ) || ( pDpSystem->bPrmBufsize > 244 ) ) */

   else
   if( ( pDpSystem->bCfgBufsize < 1 ) || ( pDpSystem->bCfgBufsize > 244 ) )
 80030de:	4b6e      	ldr	r3, [pc, #440]	; (8003298 <VPC3_InitBufferStructure+0x224>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d005      	beq.n	80030f6 <VPC3_InitBufferStructure+0x82>
 80030ea:	4b6b      	ldr	r3, [pc, #428]	; (8003298 <VPC3_InitBufferStructure+0x224>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80030f2:	2bf4      	cmp	r3, #244	; 0xf4
 80030f4:	d902      	bls.n	80030fc <VPC3_InitBufferStructure+0x88>
   {
      bError = DP_CFG_LEN_ERROR;
 80030f6:	2318      	movs	r3, #24
 80030f8:	75fb      	strb	r3, [r7, #23]
 80030fa:	e013      	b.n	8003124 <VPC3_InitBufferStructure+0xb0>
   } /* if( ( pDpSystem->bCfgBufsize < 1 ) || ( pDpSystem->bCfgBufsize > 244 ) ) */

   else
   if( pDpSystem->bSsaBufsize != 0 && ( ( pDpSystem->bSsaBufsize < 4 ) || ( pDpSystem->bSsaBufsize > 244 ) ) )
 80030fc:	4b66      	ldr	r3, [pc, #408]	; (8003298 <VPC3_InitBufferStructure+0x224>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8003104:	2b00      	cmp	r3, #0
 8003106:	d00d      	beq.n	8003124 <VPC3_InitBufferStructure+0xb0>
 8003108:	4b63      	ldr	r3, [pc, #396]	; (8003298 <VPC3_InitBufferStructure+0x224>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8003110:	2b03      	cmp	r3, #3
 8003112:	d905      	bls.n	8003120 <VPC3_InitBufferStructure+0xac>
 8003114:	4b60      	ldr	r3, [pc, #384]	; (8003298 <VPC3_InitBufferStructure+0x224>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800311c:	2bf4      	cmp	r3, #244	; 0xf4
 800311e:	d901      	bls.n	8003124 <VPC3_InitBufferStructure+0xb0>
   {
      bError = DP_SSA_LEN_ERROR;
 8003120:	2317      	movs	r3, #23
 8003122:	75fb      	strb	r3, [r7, #23]
   } /* if( pDpSystem->bSsaBufsize != 0 && ( ( pDpSystem->bSsaBufsize < 4 ) || ( pDpSystem->bSsaBufsize > 244 ) ) ) */

   /* prm buffer */
   if( pVpc3->bModeReg0_H VPC3_EXTENSION & VPC3_SPEC_PRM_BUF_MODE )
 8003124:	4b5d      	ldr	r3, [pc, #372]	; (800329c <VPC3_InitBufferStructure+0x228>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	79db      	ldrb	r3, [r3, #7]
 800312a:	f003 0310 	and.w	r3, r3, #16
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <VPC3_InitBufferStructure+0xc2>
   {
      /* Spec_Prm_Buf_Mode: Is no longer supported by the software, 4kByte memory is enough to handle Set-Prm-telegram via auxiliary buffer. */
      bError = DP_SPEC_PRM_NOT_SUPP_ERROR;
 8003132:	231d      	movs	r3, #29
 8003134:	75fb      	strb	r3, [r7, #23]
   } /* if( pVpc3->bModeReg0_H VPC3_EXTENSION & VPC3_SPEC_PRM_BUF_MODE ) */
   pVpc3->bLenSpecPrmBuf VPC3_EXTENSION = 0;
 8003136:	4b59      	ldr	r3, [pc, #356]	; (800329c <VPC3_InitBufferStructure+0x228>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

   if( bError == DP_OK )
 8003140:	7dfb      	ldrb	r3, [r7, #23]
 8003142:	2b01      	cmp	r3, #1
 8003144:	f040 8329 	bne.w	800379a <VPC3_InitBufferStructure+0x726>
   {
      /*-------------------------------------------------------------------*/
      /* length of buffers ok, check memory consumption                    */
      /*-------------------------------------------------------------------*/
      /* length of output buffer */
      wOutBufferLength =  ( ( pDpSystem->bDoutBufsize + SEG_OFFSET ) & SEG_ADDWORD );
 8003148:	4b53      	ldr	r3, [pc, #332]	; (8003298 <VPC3_InitBufferStructure+0x224>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8003150:	b29b      	uxth	r3, r3
 8003152:	3307      	adds	r3, #7
 8003154:	b29b      	uxth	r3, r3
 8003156:	f023 0307 	bic.w	r3, r3, #7
 800315a:	82bb      	strh	r3, [r7, #20]
      /* length of input buffer */
      wInBufferLength =   ( ( pDpSystem->bDinBufsize  + SEG_OFFSET ) & SEG_ADDWORD );
 800315c:	4b4e      	ldr	r3, [pc, #312]	; (8003298 <VPC3_InitBufferStructure+0x224>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003164:	b29b      	uxth	r3, r3
 8003166:	3307      	adds	r3, #7
 8003168:	b29b      	uxth	r3, r3
 800316a:	f023 0307 	bic.w	r3, r3, #7
 800316e:	827b      	strh	r3, [r7, #18]
      /* length of diagnostic buffer */
      wDiagBufferLength = ( ( pDpSystem->bDiagBufsize + SEG_OFFSET ) & SEG_ADDWORD );
 8003170:	4b49      	ldr	r3, [pc, #292]	; (8003298 <VPC3_InitBufferStructure+0x224>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003178:	b29b      	uxth	r3, r3
 800317a:	3307      	adds	r3, #7
 800317c:	b29b      	uxth	r3, r3
 800317e:	f023 0307 	bic.w	r3, r3, #7
 8003182:	823b      	strh	r3, [r7, #16]
      /* length of prm buffer */
      wPrmBufferLength =  ( ( pDpSystem->bPrmBufsize  + SEG_OFFSET ) & SEG_ADDWORD );
 8003184:	4b44      	ldr	r3, [pc, #272]	; (8003298 <VPC3_InitBufferStructure+0x224>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800318c:	b29b      	uxth	r3, r3
 800318e:	3307      	adds	r3, #7
 8003190:	b29b      	uxth	r3, r3
 8003192:	f023 0307 	bic.w	r3, r3, #7
 8003196:	81fb      	strh	r3, [r7, #14]
      /* length of cfg buffer */
      wCfgBufferLength =  ( ( pDpSystem->bCfgBufsize  + SEG_OFFSET ) & SEG_ADDWORD );
 8003198:	4b3f      	ldr	r3, [pc, #252]	; (8003298 <VPC3_InitBufferStructure+0x224>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	3307      	adds	r3, #7
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	f023 0307 	bic.w	r3, r3, #7
 80031aa:	81bb      	strh	r3, [r7, #12]
      /* length of ssa buffer */
      wSsaBufferLength =  ( ( pDpSystem->bSsaBufsize  + SEG_OFFSET ) & SEG_ADDWORD );
 80031ac:	4b3a      	ldr	r3, [pc, #232]	; (8003298 <VPC3_InitBufferStructure+0x224>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	3307      	adds	r3, #7
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	f023 0307 	bic.w	r3, r3, #7
 80031be:	817b      	strh	r3, [r7, #10]
      /* length of aux buffer 2 2*/
      wAux2BufferLength = ( wCfgBufferLength > wSsaBufferLength ) ? wCfgBufferLength : wSsaBufferLength;
 80031c0:	897a      	ldrh	r2, [r7, #10]
 80031c2:	89bb      	ldrh	r3, [r7, #12]
 80031c4:	4293      	cmp	r3, r2
 80031c6:	bf38      	it	cc
 80031c8:	4613      	movcc	r3, r2
 80031ca:	813b      	strh	r3, [r7, #8]

      /*-------------------------------------------------------------------*/
      /* check memory consumption                                          */
      /*-------------------------------------------------------------------*/
      pDpSystem->wVpc3UsedDPV0BufferMemory = 0;
 80031cc:	4b32      	ldr	r3, [pc, #200]	; (8003298 <VPC3_InitBufferStructure+0x224>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      /* add input and output buffer */
      pDpSystem->wVpc3UsedDPV0BufferMemory += ( wOutBufferLength + wInBufferLength ) * 3;
 80031dc:	4b2e      	ldr	r3, [pc, #184]	; (8003298 <VPC3_InitBufferStructure+0x224>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80031e2:	b299      	uxth	r1, r3
 80031e4:	8aba      	ldrh	r2, [r7, #20]
 80031e6:	8a7b      	ldrh	r3, [r7, #18]
 80031e8:	4413      	add	r3, r2
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	461a      	mov	r2, r3
 80031ee:	0052      	lsls	r2, r2, #1
 80031f0:	4413      	add	r3, r2
 80031f2:	b29a      	uxth	r2, r3
 80031f4:	4b28      	ldr	r3, [pc, #160]	; (8003298 <VPC3_InitBufferStructure+0x224>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	440a      	add	r2, r1
 80031fa:	b292      	uxth	r2, r2
 80031fc:	861a      	strh	r2, [r3, #48]	; 0x30
      /* add diagnostic buffer */
      pDpSystem->wVpc3UsedDPV0BufferMemory += wDiagBufferLength * 2;
 80031fe:	4b26      	ldr	r3, [pc, #152]	; (8003298 <VPC3_InitBufferStructure+0x224>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003204:	b299      	uxth	r1, r3
 8003206:	8a3b      	ldrh	r3, [r7, #16]
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	b29a      	uxth	r2, r3
 800320c:	4b22      	ldr	r3, [pc, #136]	; (8003298 <VPC3_InitBufferStructure+0x224>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	440a      	add	r2, r1
 8003212:	b292      	uxth	r2, r2
 8003214:	861a      	strh	r2, [r3, #48]	; 0x30
      /* add prm buffer, add aux buffer 1 */
      pDpSystem->wVpc3UsedDPV0BufferMemory += wPrmBufferLength * 2;
 8003216:	4b20      	ldr	r3, [pc, #128]	; (8003298 <VPC3_InitBufferStructure+0x224>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800321c:	b299      	uxth	r1, r3
 800321e:	89fb      	ldrh	r3, [r7, #14]
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	b29a      	uxth	r2, r3
 8003224:	4b1c      	ldr	r3, [pc, #112]	; (8003298 <VPC3_InitBufferStructure+0x224>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	440a      	add	r2, r1
 800322a:	b292      	uxth	r2, r2
 800322c:	861a      	strh	r2, [r3, #48]	; 0x30
      /* add Read Config fuffer, add Check Config buffer */
      pDpSystem->wVpc3UsedDPV0BufferMemory += wCfgBufferLength * 2;
 800322e:	4b1a      	ldr	r3, [pc, #104]	; (8003298 <VPC3_InitBufferStructure+0x224>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003234:	b299      	uxth	r1, r3
 8003236:	89bb      	ldrh	r3, [r7, #12]
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	b29a      	uxth	r2, r3
 800323c:	4b16      	ldr	r3, [pc, #88]	; (8003298 <VPC3_InitBufferStructure+0x224>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	440a      	add	r2, r1
 8003242:	b292      	uxth	r2, r2
 8003244:	861a      	strh	r2, [r3, #48]	; 0x30
      /* add SSA buffer */
      pDpSystem->wVpc3UsedDPV0BufferMemory += wSsaBufferLength;
 8003246:	4b14      	ldr	r3, [pc, #80]	; (8003298 <VPC3_InitBufferStructure+0x224>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800324c:	b299      	uxth	r1, r3
 800324e:	4b12      	ldr	r3, [pc, #72]	; (8003298 <VPC3_InitBufferStructure+0x224>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	897a      	ldrh	r2, [r7, #10]
 8003254:	440a      	add	r2, r1
 8003256:	b292      	uxth	r2, r2
 8003258:	861a      	strh	r2, [r3, #48]	; 0x30
      /* add aux buffer 2 */
      pDpSystem->wVpc3UsedDPV0BufferMemory += wAux2BufferLength;
 800325a:	4b0f      	ldr	r3, [pc, #60]	; (8003298 <VPC3_InitBufferStructure+0x224>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003260:	b299      	uxth	r1, r3
 8003262:	4b0d      	ldr	r3, [pc, #52]	; (8003298 <VPC3_InitBufferStructure+0x224>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	893a      	ldrh	r2, [r7, #8]
 8003268:	440a      	add	r2, r1
 800326a:	b292      	uxth	r2, r2
 800326c:	861a      	strh	r2, [r3, #48]	; 0x30

      if( pDpSystem->wVpc3UsedDPV0BufferMemory > pDpSystem->wAsicUserRam )
 800326e:	4b0a      	ldr	r3, [pc, #40]	; (8003298 <VPC3_InitBufferStructure+0x224>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003274:	b29a      	uxth	r2, r3
 8003276:	4b08      	ldr	r3, [pc, #32]	; (8003298 <VPC3_InitBufferStructure+0x224>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800327c:	b29b      	uxth	r3, r3
 800327e:	429a      	cmp	r2, r3
 8003280:	d90e      	bls.n	80032a0 <VPC3_InitBufferStructure+0x22c>
      {
         /* Error: user needs too much memory */
         pDpSystem->wVpc3UsedDPV0BufferMemory = 0;
 8003282:	4b05      	ldr	r3, [pc, #20]	; (8003298 <VPC3_InitBufferStructure+0x224>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800328c:	2200      	movs	r2, #0
 800328e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
         bError = DP_LESS_MEM_ERROR;
 8003292:	231a      	movs	r3, #26
 8003294:	75fb      	strb	r3, [r7, #23]
 8003296:	e280      	b.n	800379a <VPC3_InitBufferStructure+0x726>
 8003298:	20000000 	.word	0x20000000
 800329c:	200001b4 	.word	0x200001b4
      else
      {
         /*---------------------------------------------------------------*/
         /* set buffer pointer                                            */
         /*---------------------------------------------------------------*/
         printf("DEBUG: === CADENA DE ASIGNACIONES DE PUNTEROS ===\r\n");
 80032a0:	48a5      	ldr	r0, [pc, #660]	; (8003538 <VPC3_InitBufferStructure+0x4c4>)
 80032a2:	f005 fda1 	bl	8008de8 <puts>
         printf("DEBUG: VPC3_DP_BUF_START=%d\r\n", VPC3_DP_BUF_START);
 80032a6:	210a      	movs	r1, #10
 80032a8:	48a4      	ldr	r0, [pc, #656]	; (800353c <VPC3_InitBufferStructure+0x4c8>)
 80032aa:	f005 fd01 	bl	8008cb0 <iprintf>
         printf("DEBUG: wOutBufferLength=%d, wInBufferLength=%d, wDiagBufferLength=%d\r\n", 
 80032ae:	8ab9      	ldrh	r1, [r7, #20]
 80032b0:	8a7a      	ldrh	r2, [r7, #18]
 80032b2:	8a3b      	ldrh	r3, [r7, #16]
 80032b4:	48a2      	ldr	r0, [pc, #648]	; (8003540 <VPC3_InitBufferStructure+0x4cc>)
 80032b6:	f005 fcfb 	bl	8008cb0 <iprintf>
                wOutBufferLength, wInBufferLength, wDiagBufferLength);
         
         pVpc3->abDoutBufPtr[0] VPC3_EXTENSION  = VPC3_DP_BUF_START;
 80032ba:	4ba2      	ldr	r3, [pc, #648]	; (8003544 <VPC3_InitBufferStructure+0x4d0>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	220a      	movs	r2, #10
 80032c0:	76da      	strb	r2, [r3, #27]
         printf("DEBUG: abDoutBufPtr[0]=0x%02X\r\n", pVpc3->abDoutBufPtr[0] VPC3_EXTENSION);
 80032c2:	4ba0      	ldr	r3, [pc, #640]	; (8003544 <VPC3_InitBufferStructure+0x4d0>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	7edb      	ldrb	r3, [r3, #27]
 80032c8:	4619      	mov	r1, r3
 80032ca:	489f      	ldr	r0, [pc, #636]	; (8003548 <VPC3_InitBufferStructure+0x4d4>)
 80032cc:	f005 fcf0 	bl	8008cb0 <iprintf>
         
         pVpc3->abDoutBufPtr[1] VPC3_EXTENSION  = pVpc3->abDoutBufPtr[0] VPC3_EXTENSION  + ( wOutBufferLength  >> SEG_MULDIV );
 80032d0:	4b9c      	ldr	r3, [pc, #624]	; (8003544 <VPC3_InitBufferStructure+0x4d0>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	7ed9      	ldrb	r1, [r3, #27]
 80032d6:	8abb      	ldrh	r3, [r7, #20]
 80032d8:	08db      	lsrs	r3, r3, #3
 80032da:	b29b      	uxth	r3, r3
 80032dc:	b2da      	uxtb	r2, r3
 80032de:	4b99      	ldr	r3, [pc, #612]	; (8003544 <VPC3_InitBufferStructure+0x4d0>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	440a      	add	r2, r1
 80032e4:	b2d2      	uxtb	r2, r2
 80032e6:	771a      	strb	r2, [r3, #28]
         printf("DEBUG: abDoutBufPtr[1]=0x%02X\r\n", pVpc3->abDoutBufPtr[1] VPC3_EXTENSION);
 80032e8:	4b96      	ldr	r3, [pc, #600]	; (8003544 <VPC3_InitBufferStructure+0x4d0>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	7f1b      	ldrb	r3, [r3, #28]
 80032ee:	4619      	mov	r1, r3
 80032f0:	4896      	ldr	r0, [pc, #600]	; (800354c <VPC3_InitBufferStructure+0x4d8>)
 80032f2:	f005 fcdd 	bl	8008cb0 <iprintf>
         
         pVpc3->abDoutBufPtr[2] VPC3_EXTENSION  = pVpc3->abDoutBufPtr[1] VPC3_EXTENSION  + ( wOutBufferLength  >> SEG_MULDIV );
 80032f6:	4b93      	ldr	r3, [pc, #588]	; (8003544 <VPC3_InitBufferStructure+0x4d0>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	7f19      	ldrb	r1, [r3, #28]
 80032fc:	8abb      	ldrh	r3, [r7, #20]
 80032fe:	08db      	lsrs	r3, r3, #3
 8003300:	b29b      	uxth	r3, r3
 8003302:	b2da      	uxtb	r2, r3
 8003304:	4b8f      	ldr	r3, [pc, #572]	; (8003544 <VPC3_InitBufferStructure+0x4d0>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	440a      	add	r2, r1
 800330a:	b2d2      	uxtb	r2, r2
 800330c:	775a      	strb	r2, [r3, #29]
         printf("DEBUG: abDoutBufPtr[2]=0x%02X\r\n", pVpc3->abDoutBufPtr[2] VPC3_EXTENSION);
 800330e:	4b8d      	ldr	r3, [pc, #564]	; (8003544 <VPC3_InitBufferStructure+0x4d0>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	7f5b      	ldrb	r3, [r3, #29]
 8003314:	4619      	mov	r1, r3
 8003316:	488e      	ldr	r0, [pc, #568]	; (8003550 <VPC3_InitBufferStructure+0x4dc>)
 8003318:	f005 fcca 	bl	8008cb0 <iprintf>

         pVpc3->abDinBufPtr[0] VPC3_EXTENSION   = pVpc3->abDoutBufPtr[2] VPC3_EXTENSION  + ( wOutBufferLength  >> SEG_MULDIV );
 800331c:	4b89      	ldr	r3, [pc, #548]	; (8003544 <VPC3_InitBufferStructure+0x4d0>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	7f59      	ldrb	r1, [r3, #29]
 8003322:	8abb      	ldrh	r3, [r7, #20]
 8003324:	08db      	lsrs	r3, r3, #3
 8003326:	b29b      	uxth	r3, r3
 8003328:	b2da      	uxtb	r2, r3
 800332a:	4b86      	ldr	r3, [pc, #536]	; (8003544 <VPC3_InitBufferStructure+0x4d0>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	440a      	add	r2, r1
 8003330:	b2d2      	uxtb	r2, r2
 8003332:	77da      	strb	r2, [r3, #31]
         printf("DEBUG: abDinBufPtr[0]=0x%02X\r\n", pVpc3->abDinBufPtr[0] VPC3_EXTENSION);
 8003334:	4b83      	ldr	r3, [pc, #524]	; (8003544 <VPC3_InitBufferStructure+0x4d0>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	7fdb      	ldrb	r3, [r3, #31]
 800333a:	4619      	mov	r1, r3
 800333c:	4885      	ldr	r0, [pc, #532]	; (8003554 <VPC3_InitBufferStructure+0x4e0>)
 800333e:	f005 fcb7 	bl	8008cb0 <iprintf>
         
         pVpc3->abDinBufPtr[1] VPC3_EXTENSION   = pVpc3->abDinBufPtr[0]  VPC3_EXTENSION  + ( wInBufferLength   >> SEG_MULDIV );
 8003342:	4b80      	ldr	r3, [pc, #512]	; (8003544 <VPC3_InitBufferStructure+0x4d0>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	7fd9      	ldrb	r1, [r3, #31]
 8003348:	8a7b      	ldrh	r3, [r7, #18]
 800334a:	08db      	lsrs	r3, r3, #3
 800334c:	b29b      	uxth	r3, r3
 800334e:	b2da      	uxtb	r2, r3
 8003350:	4b7c      	ldr	r3, [pc, #496]	; (8003544 <VPC3_InitBufferStructure+0x4d0>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	440a      	add	r2, r1
 8003356:	b2d2      	uxtb	r2, r2
 8003358:	f883 2020 	strb.w	r2, [r3, #32]
         printf("DEBUG: abDinBufPtr[1]=0x%02X\r\n", pVpc3->abDinBufPtr[1] VPC3_EXTENSION);
 800335c:	4b79      	ldr	r3, [pc, #484]	; (8003544 <VPC3_InitBufferStructure+0x4d0>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003364:	4619      	mov	r1, r3
 8003366:	487c      	ldr	r0, [pc, #496]	; (8003558 <VPC3_InitBufferStructure+0x4e4>)
 8003368:	f005 fca2 	bl	8008cb0 <iprintf>
         
         pVpc3->abDinBufPtr[2] VPC3_EXTENSION   = pVpc3->abDinBufPtr[1]  VPC3_EXTENSION  + ( wInBufferLength   >> SEG_MULDIV );
 800336c:	4b75      	ldr	r3, [pc, #468]	; (8003544 <VPC3_InitBufferStructure+0x4d0>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f893 1020 	ldrb.w	r1, [r3, #32]
 8003374:	8a7b      	ldrh	r3, [r7, #18]
 8003376:	08db      	lsrs	r3, r3, #3
 8003378:	b29b      	uxth	r3, r3
 800337a:	b2da      	uxtb	r2, r3
 800337c:	4b71      	ldr	r3, [pc, #452]	; (8003544 <VPC3_InitBufferStructure+0x4d0>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	440a      	add	r2, r1
 8003382:	b2d2      	uxtb	r2, r2
 8003384:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
         printf("DEBUG: abDinBufPtr[2]=0x%02X\r\n", pVpc3->abDinBufPtr[2] VPC3_EXTENSION);
 8003388:	4b6e      	ldr	r3, [pc, #440]	; (8003544 <VPC3_InitBufferStructure+0x4d0>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003390:	4619      	mov	r1, r3
 8003392:	4872      	ldr	r0, [pc, #456]	; (800355c <VPC3_InitBufferStructure+0x4e8>)
 8003394:	f005 fc8c 	bl	8008cb0 <iprintf>

         pVpc3->abDiagBufPtr[0] VPC3_EXTENSION  = pVpc3->abDinBufPtr[2]  VPC3_EXTENSION  + ( wInBufferLength   >> SEG_MULDIV );
 8003398:	4b6a      	ldr	r3, [pc, #424]	; (8003544 <VPC3_InitBufferStructure+0x4d0>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
 80033a0:	8a7b      	ldrh	r3, [r7, #18]
 80033a2:	08db      	lsrs	r3, r3, #3
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	b2da      	uxtb	r2, r3
 80033a8:	4b66      	ldr	r3, [pc, #408]	; (8003544 <VPC3_InitBufferStructure+0x4d0>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	440a      	add	r2, r1
 80033ae:	b2d2      	uxtb	r2, r2
 80033b0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
         printf("DEBUG: abDiagBufPtr[0]=0x%02X\r\n", pVpc3->abDiagBufPtr[0] VPC3_EXTENSION);
 80033b4:	4b63      	ldr	r3, [pc, #396]	; (8003544 <VPC3_InitBufferStructure+0x4d0>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80033bc:	4619      	mov	r1, r3
 80033be:	4868      	ldr	r0, [pc, #416]	; (8003560 <VPC3_InitBufferStructure+0x4ec>)
 80033c0:	f005 fc76 	bl	8008cb0 <iprintf>
         
         pVpc3->abDiagBufPtr[1] VPC3_EXTENSION  = pVpc3->abDiagBufPtr[0] VPC3_EXTENSION  + ( wDiagBufferLength >> SEG_MULDIV );
 80033c4:	4b5f      	ldr	r3, [pc, #380]	; (8003544 <VPC3_InitBufferStructure+0x4d0>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f893 1026 	ldrb.w	r1, [r3, #38]	; 0x26
 80033cc:	8a3b      	ldrh	r3, [r7, #16]
 80033ce:	08db      	lsrs	r3, r3, #3
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	b2da      	uxtb	r2, r3
 80033d4:	4b5b      	ldr	r3, [pc, #364]	; (8003544 <VPC3_InitBufferStructure+0x4d0>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	440a      	add	r2, r1
 80033da:	b2d2      	uxtb	r2, r2
 80033dc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
         printf("DEBUG: abDiagBufPtr[1]=0x%02X\r\n", pVpc3->abDiagBufPtr[1] VPC3_EXTENSION);
 80033e0:	4b58      	ldr	r3, [pc, #352]	; (8003544 <VPC3_InitBufferStructure+0x4d0>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80033e8:	4619      	mov	r1, r3
 80033ea:	485e      	ldr	r0, [pc, #376]	; (8003564 <VPC3_InitBufferStructure+0x4f0>)
 80033ec:	f005 fc60 	bl	8008cb0 <iprintf>

         pVpc3->bCfgBufPtr VPC3_EXTENSION       = pVpc3->abDiagBufPtr[1] VPC3_EXTENSION  + ( wDiagBufferLength >> SEG_MULDIV );
 80033f0:	4b54      	ldr	r3, [pc, #336]	; (8003544 <VPC3_InitBufferStructure+0x4d0>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f893 1027 	ldrb.w	r1, [r3, #39]	; 0x27
 80033f8:	8a3b      	ldrh	r3, [r7, #16]
 80033fa:	08db      	lsrs	r3, r3, #3
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	b2da      	uxtb	r2, r3
 8003400:	4b50      	ldr	r3, [pc, #320]	; (8003544 <VPC3_InitBufferStructure+0x4d0>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	440a      	add	r2, r1
 8003406:	b2d2      	uxtb	r2, r2
 8003408:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
         printf("DEBUG: wCfgBufferLength=%d, SEG_MULDIV=%d, (wCfgBufferLength >> SEG_MULDIV)=%d\r\n", 
 800340c:	89b9      	ldrh	r1, [r7, #12]
 800340e:	89bb      	ldrh	r3, [r7, #12]
 8003410:	08db      	lsrs	r3, r3, #3
 8003412:	b29b      	uxth	r3, r3
 8003414:	2203      	movs	r2, #3
 8003416:	4854      	ldr	r0, [pc, #336]	; (8003568 <VPC3_InitBufferStructure+0x4f4>)
 8003418:	f005 fc4a 	bl	8008cb0 <iprintf>
                wCfgBufferLength, SEG_MULDIV, (wCfgBufferLength >> SEG_MULDIV));
         printf("DEBUG: bCfgBufPtr=0x%02X\r\n", pVpc3->bCfgBufPtr VPC3_EXTENSION);
 800341c:	4b49      	ldr	r3, [pc, #292]	; (8003544 <VPC3_InitBufferStructure+0x4d0>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003424:	4619      	mov	r1, r3
 8003426:	4851      	ldr	r0, [pc, #324]	; (800356c <VPC3_InitBufferStructure+0x4f8>)
 8003428:	f005 fc42 	bl	8008cb0 <iprintf>
         printf("DEBUG: ANTES de asignacion: bReadCfgBufPtr=0x%02X\r\n", pVpc3->bReadCfgBufPtr VPC3_EXTENSION);
 800342c:	4b45      	ldr	r3, [pc, #276]	; (8003544 <VPC3_InitBufferStructure+0x4d0>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003434:	4619      	mov	r1, r3
 8003436:	484e      	ldr	r0, [pc, #312]	; (8003570 <VPC3_InitBufferStructure+0x4fc>)
 8003438:	f005 fc3a 	bl	8008cb0 <iprintf>
         printf("DEBUG: Calculando: 0x%02X + %d = 0x%02X\r\n", 
                pVpc3->bCfgBufPtr VPC3_EXTENSION, 
 800343c:	4b41      	ldr	r3, [pc, #260]	; (8003544 <VPC3_InitBufferStructure+0x4d0>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
         printf("DEBUG: Calculando: 0x%02X + %d = 0x%02X\r\n", 
 8003444:	4619      	mov	r1, r3
 8003446:	89bb      	ldrh	r3, [r7, #12]
 8003448:	08db      	lsrs	r3, r3, #3
 800344a:	b29b      	uxth	r3, r3
 800344c:	4618      	mov	r0, r3
                (wCfgBufferLength >> SEG_MULDIV),
                pVpc3->bCfgBufPtr VPC3_EXTENSION + (wCfgBufferLength >> SEG_MULDIV));
 800344e:	4b3d      	ldr	r3, [pc, #244]	; (8003544 <VPC3_InitBufferStructure+0x4d0>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003456:	461a      	mov	r2, r3
 8003458:	89bb      	ldrh	r3, [r7, #12]
 800345a:	08db      	lsrs	r3, r3, #3
 800345c:	b29b      	uxth	r3, r3
         printf("DEBUG: Calculando: 0x%02X + %d = 0x%02X\r\n", 
 800345e:	4413      	add	r3, r2
 8003460:	4602      	mov	r2, r0
 8003462:	4844      	ldr	r0, [pc, #272]	; (8003574 <VPC3_InitBufferStructure+0x500>)
 8003464:	f005 fc24 	bl	8008cb0 <iprintf>
         pVpc3->bReadCfgBufPtr VPC3_EXTENSION   = pVpc3->bCfgBufPtr      VPC3_EXTENSION  + ( wCfgBufferLength  >> SEG_MULDIV );
 8003468:	4b36      	ldr	r3, [pc, #216]	; (8003544 <VPC3_InitBufferStructure+0x4d0>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
 8003470:	89bb      	ldrh	r3, [r7, #12]
 8003472:	08db      	lsrs	r3, r3, #3
 8003474:	b29b      	uxth	r3, r3
 8003476:	b2da      	uxtb	r2, r3
 8003478:	4b32      	ldr	r3, [pc, #200]	; (8003544 <VPC3_InitBufferStructure+0x4d0>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	440a      	add	r2, r1
 800347e:	b2d2      	uxtb	r2, r2
 8003480:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
         printf("DEBUG: DESPUES de asignacion: bReadCfgBufPtr=0x%02X\r\n", pVpc3->bReadCfgBufPtr VPC3_EXTENSION);
 8003484:	4b2f      	ldr	r3, [pc, #188]	; (8003544 <VPC3_InitBufferStructure+0x4d0>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800348c:	4619      	mov	r1, r3
 800348e:	483a      	ldr	r0, [pc, #232]	; (8003578 <VPC3_InitBufferStructure+0x504>)
 8003490:	f005 fc0e 	bl	8008cb0 <iprintf>
         printf("DEBUG: Verificando direccion: &(pVpc3->bReadCfgBufPtr)=0x%08X\r\n", (unsigned int)&(pVpc3->bReadCfgBufPtr));
 8003494:	4b2b      	ldr	r3, [pc, #172]	; (8003544 <VPC3_InitBufferStructure+0x4d0>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	3334      	adds	r3, #52	; 0x34
 800349a:	4619      	mov	r1, r3
 800349c:	4837      	ldr	r0, [pc, #220]	; (800357c <VPC3_InitBufferStructure+0x508>)
 800349e:	f005 fc07 	bl	8008cb0 <iprintf>
         printf("DEBUG: Valor directo en direccion: *(&(pVpc3->bReadCfgBufPtr))=0x%02X\r\n", *(&(pVpc3->bReadCfgBufPtr)));
 80034a2:	4b28      	ldr	r3, [pc, #160]	; (8003544 <VPC3_InitBufferStructure+0x4d0>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80034aa:	4619      	mov	r1, r3
 80034ac:	4834      	ldr	r0, [pc, #208]	; (8003580 <VPC3_InitBufferStructure+0x50c>)
 80034ae:	f005 fbff 	bl	8008cb0 <iprintf>

         pVpc3->bPrmBufPtr VPC3_EXTENSION       = pVpc3->bReadCfgBufPtr  VPC3_EXTENSION  + ( wCfgBufferLength  >> SEG_MULDIV );
 80034b2:	4b24      	ldr	r3, [pc, #144]	; (8003544 <VPC3_InitBufferStructure+0x4d0>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
 80034ba:	89bb      	ldrh	r3, [r7, #12]
 80034bc:	08db      	lsrs	r3, r3, #3
 80034be:	b29b      	uxth	r3, r3
 80034c0:	b2da      	uxtb	r2, r3
 80034c2:	4b20      	ldr	r3, [pc, #128]	; (8003544 <VPC3_InitBufferStructure+0x4d0>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	440a      	add	r2, r1
 80034c8:	b2d2      	uxtb	r2, r2
 80034ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

         pVpc3->bAuxBufSel VPC3_EXTENSION       = 0x06; /* SetPrm via Aux1, ChkCfg and SSA via Aux2 */
 80034ce:	4b1d      	ldr	r3, [pc, #116]	; (8003544 <VPC3_InitBufferStructure+0x4d0>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2206      	movs	r2, #6
 80034d4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
         pVpc3->abAuxBufPtr[0] VPC3_EXTENSION   = pVpc3->bPrmBufPtr VPC3_EXTENSION       + ( wPrmBufferLength  >> SEG_MULDIV );
 80034d8:	4b1a      	ldr	r3, [pc, #104]	; (8003544 <VPC3_InitBufferStructure+0x4d0>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 80034e0:	89fb      	ldrh	r3, [r7, #14]
 80034e2:	08db      	lsrs	r3, r3, #3
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	b2da      	uxtb	r2, r3
 80034e8:	4b16      	ldr	r3, [pc, #88]	; (8003544 <VPC3_InitBufferStructure+0x4d0>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	440a      	add	r2, r1
 80034ee:	b2d2      	uxtb	r2, r2
 80034f0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
         pVpc3->abAuxBufPtr[1] VPC3_EXTENSION   = pVpc3->abAuxBufPtr[0] VPC3_EXTENSION   + ( wPrmBufferLength  >> SEG_MULDIV );
 80034f4:	4b13      	ldr	r3, [pc, #76]	; (8003544 <VPC3_InitBufferStructure+0x4d0>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f893 102b 	ldrb.w	r1, [r3, #43]	; 0x2b
 80034fc:	89fb      	ldrh	r3, [r7, #14]
 80034fe:	08db      	lsrs	r3, r3, #3
 8003500:	b29b      	uxth	r3, r3
 8003502:	b2da      	uxtb	r2, r3
 8003504:	4b0f      	ldr	r3, [pc, #60]	; (8003544 <VPC3_InitBufferStructure+0x4d0>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	440a      	add	r2, r1
 800350a:	b2d2      	uxtb	r2, r2
 800350c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

         pVpc3->bSsaBufPtr VPC3_EXTENSION = 0;
 8003510:	4b0c      	ldr	r3, [pc, #48]	; (8003544 <VPC3_InitBufferStructure+0x4d0>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
         if( wSsaBufferLength != 0 )
 800351a:	897b      	ldrh	r3, [r7, #10]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d034      	beq.n	800358a <VPC3_InitBufferStructure+0x516>
         {
             pVpc3->bSsaBufPtr VPC3_EXTENSION   = pVpc3->abAuxBufPtr[1] VPC3_EXTENSION   + ( wAux2BufferLength >> SEG_MULDIV );
 8003520:	4b08      	ldr	r3, [pc, #32]	; (8003544 <VPC3_InitBufferStructure+0x4d0>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 8003528:	893b      	ldrh	r3, [r7, #8]
 800352a:	08db      	lsrs	r3, r3, #3
 800352c:	b29b      	uxth	r3, r3
 800352e:	b2da      	uxtb	r2, r3
 8003530:	4b04      	ldr	r3, [pc, #16]	; (8003544 <VPC3_InitBufferStructure+0x4d0>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	440a      	add	r2, r1
 8003536:	e025      	b.n	8003584 <VPC3_InitBufferStructure+0x510>
 8003538:	0800d990 	.word	0x0800d990
 800353c:	0800d9c4 	.word	0x0800d9c4
 8003540:	0800d9e4 	.word	0x0800d9e4
 8003544:	200001b4 	.word	0x200001b4
 8003548:	0800da2c 	.word	0x0800da2c
 800354c:	0800da4c 	.word	0x0800da4c
 8003550:	0800da6c 	.word	0x0800da6c
 8003554:	0800da8c 	.word	0x0800da8c
 8003558:	0800daac 	.word	0x0800daac
 800355c:	0800dacc 	.word	0x0800dacc
 8003560:	0800daec 	.word	0x0800daec
 8003564:	0800db0c 	.word	0x0800db0c
 8003568:	0800db2c 	.word	0x0800db2c
 800356c:	0800db80 	.word	0x0800db80
 8003570:	0800db9c 	.word	0x0800db9c
 8003574:	0800dbd0 	.word	0x0800dbd0
 8003578:	0800dbfc 	.word	0x0800dbfc
 800357c:	0800dc34 	.word	0x0800dc34
 8003580:	0800dc74 	.word	0x0800dc74
 8003584:	b2d2      	uxtb	r2, r2
 8003586:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
         } /* if( wSsaBufferLength != 0 ) */

         /*---------------------------------------------------------------*/
         /* set buffer length                                             */
         /*---------------------------------------------------------------*/
         pVpc3->bLenDoutBuf VPC3_EXTENSION     = pDpSystem->bOutputDataLength;
 800358a:	4b86      	ldr	r3, [pc, #536]	; (80037a4 <VPC3_InitBufferStructure+0x730>)
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	4b86      	ldr	r3, [pc, #536]	; (80037a8 <VPC3_InitBufferStructure+0x734>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8003596:	769a      	strb	r2, [r3, #26]
         pVpc3->bLenDinBuf  VPC3_EXTENSION     = pDpSystem->bInputDataLength;
 8003598:	4b82      	ldr	r3, [pc, #520]	; (80037a4 <VPC3_InitBufferStructure+0x730>)
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	4b82      	ldr	r3, [pc, #520]	; (80037a8 <VPC3_InitBufferStructure+0x734>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 80035a4:	779a      	strb	r2, [r3, #30]

         pVpc3->abLenDiagBuf[0] VPC3_EXTENSION = 6;
 80035a6:	4b80      	ldr	r3, [pc, #512]	; (80037a8 <VPC3_InitBufferStructure+0x734>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2206      	movs	r2, #6
 80035ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
         pVpc3->abLenDiagBuf[1] VPC3_EXTENSION = 6;
 80035b0:	4b7d      	ldr	r3, [pc, #500]	; (80037a8 <VPC3_InitBufferStructure+0x734>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2206      	movs	r2, #6
 80035b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

         pVpc3->bLenCfgData VPC3_EXTENSION     = pDpSystem->bCfgBufsize;
 80035ba:	4b7a      	ldr	r3, [pc, #488]	; (80037a4 <VPC3_InitBufferStructure+0x730>)
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	4b7a      	ldr	r3, [pc, #488]	; (80037a8 <VPC3_InitBufferStructure+0x734>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 80035c6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
         pVpc3->bLenPrmData VPC3_EXTENSION     = pDpSystem->bPrmBufsize;
 80035ca:	4b76      	ldr	r3, [pc, #472]	; (80037a4 <VPC3_InitBufferStructure+0x730>)
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	4b76      	ldr	r3, [pc, #472]	; (80037a8 <VPC3_InitBufferStructure+0x734>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 80035d6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
         pVpc3->bLenSsaBuf  VPC3_EXTENSION     = pDpSystem->bSsaBufsize;
 80035da:	4b72      	ldr	r3, [pc, #456]	; (80037a4 <VPC3_InitBufferStructure+0x730>)
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	4b72      	ldr	r3, [pc, #456]	; (80037a8 <VPC3_InitBufferStructure+0x734>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f892 203b 	ldrb.w	r2, [r2, #59]	; 0x3b
 80035e6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

         pVpc3->abLenCtrlBuf[0] VPC3_EXTENSION = pDpSystem->bPrmBufsize;
 80035ea:	4b6e      	ldr	r3, [pc, #440]	; (80037a4 <VPC3_InitBufferStructure+0x730>)
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	4b6e      	ldr	r3, [pc, #440]	; (80037a8 <VPC3_InitBufferStructure+0x734>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 80035f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
         pVpc3->abLenCtrlBuf[1] VPC3_EXTENSION = ( wAux2BufferLength >= 244 ) ? 244 : wAux2BufferLength;
 80035fa:	893b      	ldrh	r3, [r7, #8]
 80035fc:	2bf4      	cmp	r3, #244	; 0xf4
 80035fe:	bf28      	it	cs
 8003600:	23f4      	movcs	r3, #244	; 0xf4
 8003602:	b29a      	uxth	r2, r3
 8003604:	4b68      	ldr	r3, [pc, #416]	; (80037a8 <VPC3_InitBufferStructure+0x734>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	b2d2      	uxtb	r2, r2
 800360a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

         /* for faster access, store some pointer in local structure */
         pDpSystem->pDoutBuffer1 = (VPC3_UNSIGNED8_PTR)(((VPC3_ADR)(pVpc3->abDoutBufPtr[0] VPC3_EXTENSION) << SEG_MULDIV)+((VPC3_ADR)Vpc3AsicAddress));                                                                                                                                                                                                       ;
 800360e:	4b66      	ldr	r3, [pc, #408]	; (80037a8 <VPC3_InitBufferStructure+0x734>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	7edb      	ldrb	r3, [r3, #27]
 8003614:	00db      	lsls	r3, r3, #3
 8003616:	4a65      	ldr	r2, [pc, #404]	; (80037ac <VPC3_InitBufferStructure+0x738>)
 8003618:	8812      	ldrh	r2, [r2, #0]
 800361a:	441a      	add	r2, r3
 800361c:	4b61      	ldr	r3, [pc, #388]	; (80037a4 <VPC3_InitBufferStructure+0x730>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f8c3 203e 	str.w	r2, [r3, #62]	; 0x3e
         pDpSystem->pDoutBuffer2 = (VPC3_UNSIGNED8_PTR)(((VPC3_ADR)(pVpc3->abDoutBufPtr[1] VPC3_EXTENSION) << SEG_MULDIV)+((VPC3_ADR)Vpc3AsicAddress));
 8003624:	4b60      	ldr	r3, [pc, #384]	; (80037a8 <VPC3_InitBufferStructure+0x734>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	7f1b      	ldrb	r3, [r3, #28]
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	4a5f      	ldr	r2, [pc, #380]	; (80037ac <VPC3_InitBufferStructure+0x738>)
 800362e:	8812      	ldrh	r2, [r2, #0]
 8003630:	441a      	add	r2, r3
 8003632:	4b5c      	ldr	r3, [pc, #368]	; (80037a4 <VPC3_InitBufferStructure+0x730>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f8c3 2042 	str.w	r2, [r3, #66]	; 0x42
         pDpSystem->pDoutBuffer3 = (VPC3_UNSIGNED8_PTR)(((VPC3_ADR)(pVpc3->abDoutBufPtr[2] VPC3_EXTENSION) << SEG_MULDIV)+((VPC3_ADR)Vpc3AsicAddress));
 800363a:	4b5b      	ldr	r3, [pc, #364]	; (80037a8 <VPC3_InitBufferStructure+0x734>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	7f5b      	ldrb	r3, [r3, #29]
 8003640:	00db      	lsls	r3, r3, #3
 8003642:	4a5a      	ldr	r2, [pc, #360]	; (80037ac <VPC3_InitBufferStructure+0x738>)
 8003644:	8812      	ldrh	r2, [r2, #0]
 8003646:	441a      	add	r2, r3
 8003648:	4b56      	ldr	r3, [pc, #344]	; (80037a4 <VPC3_InitBufferStructure+0x730>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f8c3 2046 	str.w	r2, [r3, #70]	; 0x46

         pDpSystem->pDinBuffer1  = (VPC3_UNSIGNED8_PTR)(((VPC3_ADR)(pVpc3->abDinBufPtr[0] VPC3_EXTENSION) << SEG_MULDIV)+((VPC3_ADR)Vpc3AsicAddress));
 8003650:	4b55      	ldr	r3, [pc, #340]	; (80037a8 <VPC3_InitBufferStructure+0x734>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	7fdb      	ldrb	r3, [r3, #31]
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	4a54      	ldr	r2, [pc, #336]	; (80037ac <VPC3_InitBufferStructure+0x738>)
 800365a:	8812      	ldrh	r2, [r2, #0]
 800365c:	441a      	add	r2, r3
 800365e:	4b51      	ldr	r3, [pc, #324]	; (80037a4 <VPC3_InitBufferStructure+0x730>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f8c3 204a 	str.w	r2, [r3, #74]	; 0x4a
         pDpSystem->pDinBuffer2  = (VPC3_UNSIGNED8_PTR)(((VPC3_ADR)(pVpc3->abDinBufPtr[1] VPC3_EXTENSION) << SEG_MULDIV)+((VPC3_ADR)Vpc3AsicAddress));
 8003666:	4b50      	ldr	r3, [pc, #320]	; (80037a8 <VPC3_InitBufferStructure+0x734>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800366e:	00db      	lsls	r3, r3, #3
 8003670:	4a4e      	ldr	r2, [pc, #312]	; (80037ac <VPC3_InitBufferStructure+0x738>)
 8003672:	8812      	ldrh	r2, [r2, #0]
 8003674:	441a      	add	r2, r3
 8003676:	4b4b      	ldr	r3, [pc, #300]	; (80037a4 <VPC3_InitBufferStructure+0x730>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f8c3 204e 	str.w	r2, [r3, #78]	; 0x4e
         pDpSystem->pDinBuffer3  = (VPC3_UNSIGNED8_PTR)(((VPC3_ADR)(pVpc3->abDinBufPtr[2] VPC3_EXTENSION) << SEG_MULDIV)+((VPC3_ADR)Vpc3AsicAddress));
 800367e:	4b4a      	ldr	r3, [pc, #296]	; (80037a8 <VPC3_InitBufferStructure+0x734>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	4a48      	ldr	r2, [pc, #288]	; (80037ac <VPC3_InitBufferStructure+0x738>)
 800368a:	8812      	ldrh	r2, [r2, #0]
 800368c:	441a      	add	r2, r3
 800368e:	4b45      	ldr	r3, [pc, #276]	; (80037a4 <VPC3_InitBufferStructure+0x730>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f8c3 2052 	str.w	r2, [r3, #82]	; 0x52

         pDpSystem->pDiagBuffer1 = (VPC3_UNSIGNED8_PTR)(((VPC3_ADR)(pVpc3->abDiagBufPtr[0] VPC3_EXTENSION) << SEG_MULDIV)+((VPC3_ADR)Vpc3AsicAddress));
 8003696:	4b44      	ldr	r3, [pc, #272]	; (80037a8 <VPC3_InitBufferStructure+0x734>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800369e:	00db      	lsls	r3, r3, #3
 80036a0:	4a42      	ldr	r2, [pc, #264]	; (80037ac <VPC3_InitBufferStructure+0x738>)
 80036a2:	8812      	ldrh	r2, [r2, #0]
 80036a4:	441a      	add	r2, r3
 80036a6:	4b3f      	ldr	r3, [pc, #252]	; (80037a4 <VPC3_InitBufferStructure+0x730>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f8c3 2056 	str.w	r2, [r3, #86]	; 0x56
         pDpSystem->pDiagBuffer2 = (VPC3_UNSIGNED8_PTR)(((VPC3_ADR)(pVpc3->abDiagBufPtr[1] VPC3_EXTENSION) << SEG_MULDIV)+((VPC3_ADR)Vpc3AsicAddress));
 80036ae:	4b3e      	ldr	r3, [pc, #248]	; (80037a8 <VPC3_InitBufferStructure+0x734>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80036b6:	00db      	lsls	r3, r3, #3
 80036b8:	4a3c      	ldr	r2, [pc, #240]	; (80037ac <VPC3_InitBufferStructure+0x738>)
 80036ba:	8812      	ldrh	r2, [r2, #0]
 80036bc:	441a      	add	r2, r3
 80036be:	4b39      	ldr	r3, [pc, #228]	; (80037a4 <VPC3_InitBufferStructure+0x730>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f8c3 205a 	str.w	r2, [r3, #90]	; 0x5a

         // --- DEFENSIVE PROGRAMMING: Validate calculated buffer pointers ---
         VPC3_ADR diag1_addr = ((VPC3_ADR)(pVpc3->abDiagBufPtr[0] VPC3_EXTENSION) << SEG_MULDIV) + ((VPC3_ADR)Vpc3AsicAddress);
 80036c6:	4b38      	ldr	r3, [pc, #224]	; (80037a8 <VPC3_InitBufferStructure+0x734>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	00db      	lsls	r3, r3, #3
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	4b35      	ldr	r3, [pc, #212]	; (80037ac <VPC3_InitBufferStructure+0x738>)
 80036d6:	881b      	ldrh	r3, [r3, #0]
 80036d8:	4413      	add	r3, r2
 80036da:	80fb      	strh	r3, [r7, #6]
         VPC3_ADR diag2_addr = ((VPC3_ADR)(pVpc3->abDiagBufPtr[1] VPC3_EXTENSION) << SEG_MULDIV) + ((VPC3_ADR)Vpc3AsicAddress);
 80036dc:	4b32      	ldr	r3, [pc, #200]	; (80037a8 <VPC3_InitBufferStructure+0x734>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	00db      	lsls	r3, r3, #3
 80036e8:	b29a      	uxth	r2, r3
 80036ea:	4b30      	ldr	r3, [pc, #192]	; (80037ac <VPC3_InitBufferStructure+0x738>)
 80036ec:	881b      	ldrh	r3, [r3, #0]
 80036ee:	4413      	add	r3, r2
 80036f0:	80bb      	strh	r3, [r7, #4]
         
         printf("DEBUG: [Buffer Assignment] Diag1: Segment=0x%02X, Addr=0x%04X\r\n", 
                pVpc3->abDiagBufPtr[0] VPC3_EXTENSION, diag1_addr);
 80036f2:	4b2d      	ldr	r3, [pc, #180]	; (80037a8 <VPC3_InitBufferStructure+0x734>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
         printf("DEBUG: [Buffer Assignment] Diag1: Segment=0x%02X, Addr=0x%04X\r\n", 
 80036fa:	4619      	mov	r1, r3
 80036fc:	88fb      	ldrh	r3, [r7, #6]
 80036fe:	461a      	mov	r2, r3
 8003700:	482b      	ldr	r0, [pc, #172]	; (80037b0 <VPC3_InitBufferStructure+0x73c>)
 8003702:	f005 fad5 	bl	8008cb0 <iprintf>
         printf("DEBUG: [Buffer Assignment] Diag2: Segment=0x%02X, Addr=0x%04X\r\n", 
                pVpc3->abDiagBufPtr[1] VPC3_EXTENSION, diag2_addr);
 8003706:	4b28      	ldr	r3, [pc, #160]	; (80037a8 <VPC3_InitBufferStructure+0x734>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
         printf("DEBUG: [Buffer Assignment] Diag2: Segment=0x%02X, Addr=0x%04X\r\n", 
 800370e:	4619      	mov	r1, r3
 8003710:	88bb      	ldrh	r3, [r7, #4]
 8003712:	461a      	mov	r2, r3
 8003714:	4827      	ldr	r0, [pc, #156]	; (80037b4 <VPC3_InitBufferStructure+0x740>)
 8003716:	f005 facb 	bl	8008cb0 <iprintf>
         
         if (diag1_addr >= ASIC_RAM_LENGTH) {
 800371a:	88fb      	ldrh	r3, [r7, #6]
 800371c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003720:	d31b      	bcc.n	800375a <VPC3_InitBufferStructure+0x6e6>
            printf("ERROR: [Buffer Assignment] Corrupted Diag1 segment pointer!\r\n");
 8003722:	4825      	ldr	r0, [pc, #148]	; (80037b8 <VPC3_InitBufferStructure+0x744>)
 8003724:	f005 fb60 	bl	8008de8 <puts>
            printf("ERROR: Segment=0x%02X, CalculatedAddr=0x%04X exceeds ASIC_RAM_LENGTH=0x%04X\r\n",
                   pVpc3->abDiagBufPtr[0] VPC3_EXTENSION, diag1_addr, ASIC_RAM_LENGTH);
 8003728:	4b1f      	ldr	r3, [pc, #124]	; (80037a8 <VPC3_InitBufferStructure+0x734>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
            printf("ERROR: Segment=0x%02X, CalculatedAddr=0x%04X exceeds ASIC_RAM_LENGTH=0x%04X\r\n",
 8003730:	4619      	mov	r1, r3
 8003732:	88fa      	ldrh	r2, [r7, #6]
 8003734:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003738:	4820      	ldr	r0, [pc, #128]	; (80037bc <VPC3_InitBufferStructure+0x748>)
 800373a:	f005 fab9 	bl	8008cb0 <iprintf>
            pDpSystem->pDiagBuffer1 = VPC3_NULL_PTR; // Set to NULL to prevent access
 800373e:	4b19      	ldr	r3, [pc, #100]	; (80037a4 <VPC3_InitBufferStructure+0x730>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 8003748:	2200      	movs	r2, #0
 800374a:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 800374e:	2200      	movs	r2, #0
 8003750:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003754:	2200      	movs	r2, #0
 8003756:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
         }
         
         if (diag2_addr >= ASIC_RAM_LENGTH) {
 800375a:	88bb      	ldrh	r3, [r7, #4]
 800375c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003760:	d31b      	bcc.n	800379a <VPC3_InitBufferStructure+0x726>
            printf("ERROR: [Buffer Assignment] Corrupted Diag2 segment pointer!\r\n");
 8003762:	4817      	ldr	r0, [pc, #92]	; (80037c0 <VPC3_InitBufferStructure+0x74c>)
 8003764:	f005 fb40 	bl	8008de8 <puts>
            printf("ERROR: Segment=0x%02X, CalculatedAddr=0x%04X exceeds ASIC_RAM_LENGTH=0x%04X\r\n",
                   pVpc3->abDiagBufPtr[1] VPC3_EXTENSION, diag2_addr, ASIC_RAM_LENGTH);
 8003768:	4b0f      	ldr	r3, [pc, #60]	; (80037a8 <VPC3_InitBufferStructure+0x734>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
            printf("ERROR: Segment=0x%02X, CalculatedAddr=0x%04X exceeds ASIC_RAM_LENGTH=0x%04X\r\n",
 8003770:	4619      	mov	r1, r3
 8003772:	88ba      	ldrh	r2, [r7, #4]
 8003774:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003778:	4810      	ldr	r0, [pc, #64]	; (80037bc <VPC3_InitBufferStructure+0x748>)
 800377a:	f005 fa99 	bl	8008cb0 <iprintf>
            pDpSystem->pDiagBuffer2 = VPC3_NULL_PTR; // Set to NULL to prevent access
 800377e:	4b09      	ldr	r3, [pc, #36]	; (80037a4 <VPC3_InitBufferStructure+0x730>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 8003788:	2200      	movs	r2, #0
 800378a:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
 800378e:	2200      	movs	r2, #0
 8003790:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8003794:	2200      	movs	r2, #0
 8003796:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
         }
      } /* else of if( pDpSystem->wVpc3UsedDPV0BufferMemory > pDpSystem->wAsicUserRam ) */
   } /* if( bError == DP_OK ) */

   return bError;
 800379a:	7dfb      	ldrb	r3, [r7, #23]
} /* static DP_ERROR_CODE VPC3_InitBufferStructure( void ) */
 800379c:	4618      	mov	r0, r3
 800379e:	3718      	adds	r7, #24
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	20000000 	.word	0x20000000
 80037a8:	200001b4 	.word	0x200001b4
 80037ac:	20000144 	.word	0x20000144
 80037b0:	0800dcbc 	.word	0x0800dcbc
 80037b4:	0800dcfc 	.word	0x0800dcfc
 80037b8:	0800dd3c 	.word	0x0800dd3c
 80037bc:	0800dd7c 	.word	0x0800dd7c
 80037c0:	0800ddcc 	.word	0x0800ddcc

080037c4 <VPC3_GetDoutBufPtr>:

  \retval !0 - pointer to current output buffer.
  \retval 0 - no buffer available
*/
VPC3_UNSIGNED8_PTR VPC3_GetDoutBufPtr( MEM_UNSIGNED8_PTR pbState )
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
VPC3_UNSIGNED8_PTR pToOutputBuffer;             /* pointer to output buffer ( DP-Master -> VPC3+ ) */

   *pbState = VPC3_GET_NEXT_DOUT_BUFFER_CMD();
 80037cc:	4b1c      	ldr	r3, [pc, #112]	; (8003840 <VPC3_GetDoutBufPtr+0x7c>)
 80037ce:	881b      	ldrh	r3, [r3, #0]
 80037d0:	330b      	adds	r3, #11
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	4618      	mov	r0, r3
 80037d6:	f002 fb8b 	bl	8005ef0 <Vpc3Read>
 80037da:	4603      	mov	r3, r0
 80037dc:	f003 030c 	and.w	r3, r3, #12
 80037e0:	b2da      	uxtb	r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	701a      	strb	r2, [r3, #0]

   switch( VPC3_GET_DOUT_BUFFER_SM() )          /* locate user Dout Buffer */
 80037e6:	4b16      	ldr	r3, [pc, #88]	; (8003840 <VPC3_GetDoutBufPtr+0x7c>)
 80037e8:	881b      	ldrh	r3, [r3, #0]
 80037ea:	330a      	adds	r3, #10
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	4618      	mov	r0, r3
 80037f0:	f002 fb7e 	bl	8005ef0 <Vpc3Read>
 80037f4:	4603      	mov	r3, r0
 80037f6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80037fa:	2b30      	cmp	r3, #48	; 0x30
 80037fc:	d012      	beq.n	8003824 <VPC3_GetDoutBufPtr+0x60>
 80037fe:	2b30      	cmp	r3, #48	; 0x30
 8003800:	dc16      	bgt.n	8003830 <VPC3_GetDoutBufPtr+0x6c>
 8003802:	2b10      	cmp	r3, #16
 8003804:	d002      	beq.n	800380c <VPC3_GetDoutBufPtr+0x48>
 8003806:	2b20      	cmp	r3, #32
 8003808:	d006      	beq.n	8003818 <VPC3_GetDoutBufPtr+0x54>
 800380a:	e011      	b.n	8003830 <VPC3_GetDoutBufPtr+0x6c>
   {
      case 0x10:
      {
         pToOutputBuffer = pDpSystem->pDoutBuffer1;
 800380c:	4b0d      	ldr	r3, [pc, #52]	; (8003844 <VPC3_GetDoutBufPtr+0x80>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f8d3 303e 	ldr.w	r3, [r3, #62]	; 0x3e
 8003814:	60fb      	str	r3, [r7, #12]
         break;
 8003816:	e00e      	b.n	8003836 <VPC3_GetDoutBufPtr+0x72>
      } /* case 0x10: */

      case 0x20:
      {
         pToOutputBuffer = pDpSystem->pDoutBuffer2;
 8003818:	4b0a      	ldr	r3, [pc, #40]	; (8003844 <VPC3_GetDoutBufPtr+0x80>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f8d3 3042 	ldr.w	r3, [r3, #66]	; 0x42
 8003820:	60fb      	str	r3, [r7, #12]
         break;
 8003822:	e008      	b.n	8003836 <VPC3_GetDoutBufPtr+0x72>
      } /* case 0x20: */

      case 0x30:
      {
         pToOutputBuffer = pDpSystem->pDoutBuffer3;
 8003824:	4b07      	ldr	r3, [pc, #28]	; (8003844 <VPC3_GetDoutBufPtr+0x80>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f8d3 3046 	ldr.w	r3, [r3, #70]	; 0x46
 800382c:	60fb      	str	r3, [r7, #12]
         break;
 800382e:	e002      	b.n	8003836 <VPC3_GetDoutBufPtr+0x72>
      } /* case 0x30: */

      default:
      {
         pToOutputBuffer = VPC3_NULL_PTR;
 8003830:	2300      	movs	r3, #0
 8003832:	60fb      	str	r3, [r7, #12]
         break;
 8003834:	bf00      	nop
      } /* default: */
   } /* switch( VPC3_GET_DOUT_BUFFER_SM() ) */

   return pToOutputBuffer;
 8003836:	68fb      	ldr	r3, [r7, #12]
} /* VPC3_UNSIGNED8_PTR VPC3_GetDoutBufPtr( MEM_UNSIGNED8_PTR pbState ) */
 8003838:	4618      	mov	r0, r3
 800383a:	3710      	adds	r7, #16
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	20000144 	.word	0x20000144
 8003844:	20000000 	.word	0x20000000

08003848 <VPC3_GetDinBufPtr>:

  \retval !0 - pointer to current input buffer.
  \retval 0 - no buffer available
*/
VPC3_UNSIGNED8_PTR VPC3_GetDinBufPtr( void )
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
VPC3_UNSIGNED8_PTR pToInputBuffer;     /* pointer to input buffer ( VPC3 -> DP-Master ) */

   switch( VPC3_GET_DIN_BUFFER_SM() )  /* locate user Din Buffer */
 800384e:	4b16      	ldr	r3, [pc, #88]	; (80038a8 <VPC3_GetDinBufPtr+0x60>)
 8003850:	881b      	ldrh	r3, [r3, #0]
 8003852:	3308      	adds	r3, #8
 8003854:	b29b      	uxth	r3, r3
 8003856:	4618      	mov	r0, r3
 8003858:	f002 fb4a 	bl	8005ef0 <Vpc3Read>
 800385c:	4603      	mov	r3, r0
 800385e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003862:	2b30      	cmp	r3, #48	; 0x30
 8003864:	d012      	beq.n	800388c <VPC3_GetDinBufPtr+0x44>
 8003866:	2b30      	cmp	r3, #48	; 0x30
 8003868:	dc16      	bgt.n	8003898 <VPC3_GetDinBufPtr+0x50>
 800386a:	2b10      	cmp	r3, #16
 800386c:	d002      	beq.n	8003874 <VPC3_GetDinBufPtr+0x2c>
 800386e:	2b20      	cmp	r3, #32
 8003870:	d006      	beq.n	8003880 <VPC3_GetDinBufPtr+0x38>
 8003872:	e011      	b.n	8003898 <VPC3_GetDinBufPtr+0x50>
   {
      case 0x10:
      {
         pToInputBuffer = pDpSystem->pDinBuffer1;
 8003874:	4b0d      	ldr	r3, [pc, #52]	; (80038ac <VPC3_GetDinBufPtr+0x64>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f8d3 304a 	ldr.w	r3, [r3, #74]	; 0x4a
 800387c:	607b      	str	r3, [r7, #4]
         break;
 800387e:	e00e      	b.n	800389e <VPC3_GetDinBufPtr+0x56>
      } /* case 0x10: */

      case 0x20:
      {
         pToInputBuffer = pDpSystem->pDinBuffer2;
 8003880:	4b0a      	ldr	r3, [pc, #40]	; (80038ac <VPC3_GetDinBufPtr+0x64>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f8d3 304e 	ldr.w	r3, [r3, #78]	; 0x4e
 8003888:	607b      	str	r3, [r7, #4]
         break;
 800388a:	e008      	b.n	800389e <VPC3_GetDinBufPtr+0x56>
      } /* case 0x20: */

      case 0x30:
      {
         pToInputBuffer = pDpSystem->pDinBuffer3;
 800388c:	4b07      	ldr	r3, [pc, #28]	; (80038ac <VPC3_GetDinBufPtr+0x64>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f8d3 3052 	ldr.w	r3, [r3, #82]	; 0x52
 8003894:	607b      	str	r3, [r7, #4]
         break;
 8003896:	e002      	b.n	800389e <VPC3_GetDinBufPtr+0x56>
      } /* case 0x30: */

      default:
      {
         pToInputBuffer = VPC3_NULL_PTR;
 8003898:	2300      	movs	r3, #0
 800389a:	607b      	str	r3, [r7, #4]
         break;
 800389c:	bf00      	nop
      } /* default: */
   } /* switch( VPC3_GET_DIN_BUFFER_SM() ) */

   return pToInputBuffer;
 800389e:	687b      	ldr	r3, [r7, #4]
} /* VPC3_UNSIGNED8_PTR VPC3_GetDinBufPtr( void ) */
 80038a0:	4618      	mov	r0, r3
 80038a2:	3708      	adds	r7, #8
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	20000144 	.word	0x20000144
 80038ac:	20000000 	.word	0x20000000

080038b0 <VPC3_SetIoDataLength>:
/*!
  \brief Set length of VPC3+ input buffer and output buffer.

*/
void VPC3_SetIoDataLength( void )
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
   #if VPC3_SERIAL_MODE

      /* length of buffers OK, set real buffers */
      Vpc3Write( bVpc3RwLenDoutBuf, pDpSystem->bOutputDataLength );
 80038b4:	4b0c      	ldr	r3, [pc, #48]	; (80038e8 <VPC3_SetIoDataLength+0x38>)
 80038b6:	881b      	ldrh	r3, [r3, #0]
 80038b8:	331a      	adds	r3, #26
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	4b0b      	ldr	r3, [pc, #44]	; (80038ec <VPC3_SetIoDataLength+0x3c>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80038c4:	4619      	mov	r1, r3
 80038c6:	4610      	mov	r0, r2
 80038c8:	f002 fa62 	bl	8005d90 <Vpc3Write>
      Vpc3Write( bVpc3RwLenDinBuf, pDpSystem->bInputDataLength );
 80038cc:	4b06      	ldr	r3, [pc, #24]	; (80038e8 <VPC3_SetIoDataLength+0x38>)
 80038ce:	881b      	ldrh	r3, [r3, #0]
 80038d0:	331e      	adds	r3, #30
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	4b05      	ldr	r3, [pc, #20]	; (80038ec <VPC3_SetIoDataLength+0x3c>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80038dc:	4619      	mov	r1, r3
 80038de:	4610      	mov	r0, r2
 80038e0:	f002 fa56 	bl	8005d90 <Vpc3Write>
      /* length of buffers OK, set real buffers */
      pVpc3->bLenDoutBuf VPC3_EXTENSION = pDpSystem->bOutputDataLength;
      pVpc3->bLenDinBuf  VPC3_EXTENSION = pDpSystem->bInputDataLength;

   #endif /* #if VPC3_SERIAL_MODE */
} /* void VPC3_SetIoDataLength( void ) */
 80038e4:	bf00      	nop
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	20000144 	.word	0x20000144
 80038ec:	20000000 	.word	0x20000000

080038f0 <VPC3_GetDiagBufPtr>:

  \retval !0 - pointer to current diagnostic buffer.
  \retval 0 - no buffer available
*/
VPC3_UNSIGNED8_PTR VPC3_GetDiagBufPtr( void )
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
VPC3_UNSIGNED8_PTR pToDiagBuffer;               /* pointer to diagnosis buffer */
uint8_t            bDiagBufferSm;
uint8_t            segmentValue;
VPC3_ADR           calculatedAddress;

   bDiagBufferSm = VPC3_GET_DIAG_BUFFER_SM();
 80038f6:	4b49      	ldr	r3, [pc, #292]	; (8003a1c <VPC3_GetDiagBufPtr+0x12c>)
 80038f8:	881b      	ldrh	r3, [r3, #0]
 80038fa:	330c      	adds	r3, #12
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	4618      	mov	r0, r3
 8003900:	f002 faf6 	bl	8005ef0 <Vpc3Read>
 8003904:	4603      	mov	r3, r0
 8003906:	70fb      	strb	r3, [r7, #3]
   printf("DEBUG: [VPC3_GetDiagBufPtr] bDiagBufferSm=0x%02X\r\n", bDiagBufferSm);
 8003908:	78fb      	ldrb	r3, [r7, #3]
 800390a:	4619      	mov	r1, r3
 800390c:	4844      	ldr	r0, [pc, #272]	; (8003a20 <VPC3_GetDiagBufPtr+0x130>)
 800390e:	f005 f9cf 	bl	8008cb0 <iprintf>
   printf("DEBUG: [VPC3_GetDiagBufPtr] pDiagBuffer1=0x%08X, pDiagBuffer2=0x%08X\r\n", (unsigned int)pDpSystem->pDiagBuffer1, (unsigned int)pDpSystem->pDiagBuffer2);
 8003912:	4b44      	ldr	r3, [pc, #272]	; (8003a24 <VPC3_GetDiagBufPtr+0x134>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f8d3 3056 	ldr.w	r3, [r3, #86]	; 0x56
 800391a:	4619      	mov	r1, r3
 800391c:	4b41      	ldr	r3, [pc, #260]	; (8003a24 <VPC3_GetDiagBufPtr+0x134>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f8d3 305a 	ldr.w	r3, [r3, #90]	; 0x5a
 8003924:	461a      	mov	r2, r3
 8003926:	4840      	ldr	r0, [pc, #256]	; (8003a28 <VPC3_GetDiagBufPtr+0x138>)
 8003928:	f005 f9c2 	bl	8008cb0 <iprintf>

   if( ( bDiagBufferSm & 0x03 ) == 0x01 )       /* locate Diag Buffer */
 800392c:	78fb      	ldrb	r3, [r7, #3]
 800392e:	f003 0303 	and.w	r3, r3, #3
 8003932:	2b01      	cmp	r3, #1
 8003934:	d12e      	bne.n	8003994 <VPC3_GetDiagBufPtr+0xa4>
   {
      // --- DEFENSIVE PROGRAMMING: Validate segment pointer ---
      segmentValue = pVpc3->abDiagBufPtr[0] VPC3_EXTENSION;
 8003936:	4b3d      	ldr	r3, [pc, #244]	; (8003a2c <VPC3_GetDiagBufPtr+0x13c>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800393e:	70bb      	strb	r3, [r7, #2]
      calculatedAddress = ((VPC3_ADR)segmentValue << SEG_MULDIV) + ((VPC3_ADR)Vpc3AsicAddress);
 8003940:	78bb      	ldrb	r3, [r7, #2]
 8003942:	b29b      	uxth	r3, r3
 8003944:	00db      	lsls	r3, r3, #3
 8003946:	b29a      	uxth	r2, r3
 8003948:	4b34      	ldr	r3, [pc, #208]	; (8003a1c <VPC3_GetDiagBufPtr+0x12c>)
 800394a:	881b      	ldrh	r3, [r3, #0]
 800394c:	4413      	add	r3, r2
 800394e:	803b      	strh	r3, [r7, #0]
      
      printf("DEBUG: [VPC3_GetDiagBufPtr] Segment[0]=0x%02X, CalculatedAddr=0x%04X\r\n", 
 8003950:	78bb      	ldrb	r3, [r7, #2]
 8003952:	883a      	ldrh	r2, [r7, #0]
 8003954:	4619      	mov	r1, r3
 8003956:	4836      	ldr	r0, [pc, #216]	; (8003a30 <VPC3_GetDiagBufPtr+0x140>)
 8003958:	f005 f9aa 	bl	8008cb0 <iprintf>
             segmentValue, calculatedAddress);
      
      // Check if calculated address is within valid range
      if (calculatedAddress >= ASIC_RAM_LENGTH) {
 800395c:	883b      	ldrh	r3, [r7, #0]
 800395e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003962:	d30e      	bcc.n	8003982 <VPC3_GetDiagBufPtr+0x92>
         printf("ERROR: [VPC3_GetDiagBufPtr] Corrupted segment pointer detected!\r\n");
 8003964:	4833      	ldr	r0, [pc, #204]	; (8003a34 <VPC3_GetDiagBufPtr+0x144>)
 8003966:	f005 fa3f 	bl	8008de8 <puts>
         printf("ERROR: Segment[0]=0x%02X, CalculatedAddr=0x%04X exceeds ASIC_RAM_LENGTH=0x%04X\r\n",
 800396a:	78b9      	ldrb	r1, [r7, #2]
 800396c:	883a      	ldrh	r2, [r7, #0]
 800396e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003972:	4831      	ldr	r0, [pc, #196]	; (8003a38 <VPC3_GetDiagBufPtr+0x148>)
 8003974:	f005 f99c 	bl	8008cb0 <iprintf>
                segmentValue, calculatedAddress, ASIC_RAM_LENGTH);
         printf("ERROR: Returning NULL to prevent LECTURA ILEGAL\r\n");
 8003978:	4830      	ldr	r0, [pc, #192]	; (8003a3c <VPC3_GetDiagBufPtr+0x14c>)
 800397a:	f005 fa35 	bl	8008de8 <puts>
         return VPC3_NULL_PTR;
 800397e:	2300      	movs	r3, #0
 8003980:	e047      	b.n	8003a12 <VPC3_GetDiagBufPtr+0x122>
      }
      
      pToDiagBuffer = pDpSystem->pDiagBuffer1;
 8003982:	4b28      	ldr	r3, [pc, #160]	; (8003a24 <VPC3_GetDiagBufPtr+0x134>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f8d3 3056 	ldr.w	r3, [r3, #86]	; 0x56
 800398a:	607b      	str	r3, [r7, #4]
      printf("DEBUG: [VPC3_GetDiagBufPtr] Seleccionado pDiagBuffer1 (validado)\r\n");
 800398c:	482c      	ldr	r0, [pc, #176]	; (8003a40 <VPC3_GetDiagBufPtr+0x150>)
 800398e:	f005 fa2b 	bl	8008de8 <puts>
 8003992:	e038      	b.n	8003a06 <VPC3_GetDiagBufPtr+0x116>
   } /* if( ( bDiagBufferSm & 0x03 ) == 0x01 ) */
   else
   {
      if( ( bDiagBufferSm & 0x0C ) == 0x04 )
 8003994:	78fb      	ldrb	r3, [r7, #3]
 8003996:	f003 030c 	and.w	r3, r3, #12
 800399a:	2b04      	cmp	r3, #4
 800399c:	d12e      	bne.n	80039fc <VPC3_GetDiagBufPtr+0x10c>
      {
         // --- DEFENSIVE PROGRAMMING: Validate segment pointer ---
         segmentValue = pVpc3->abDiagBufPtr[1] VPC3_EXTENSION;
 800399e:	4b23      	ldr	r3, [pc, #140]	; (8003a2c <VPC3_GetDiagBufPtr+0x13c>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80039a6:	70bb      	strb	r3, [r7, #2]
         calculatedAddress = ((VPC3_ADR)segmentValue << SEG_MULDIV) + ((VPC3_ADR)Vpc3AsicAddress);
 80039a8:	78bb      	ldrb	r3, [r7, #2]
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	00db      	lsls	r3, r3, #3
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	4b1a      	ldr	r3, [pc, #104]	; (8003a1c <VPC3_GetDiagBufPtr+0x12c>)
 80039b2:	881b      	ldrh	r3, [r3, #0]
 80039b4:	4413      	add	r3, r2
 80039b6:	803b      	strh	r3, [r7, #0]
         
         printf("DEBUG: [VPC3_GetDiagBufPtr] Segment[1]=0x%02X, CalculatedAddr=0x%04X\r\n", 
 80039b8:	78bb      	ldrb	r3, [r7, #2]
 80039ba:	883a      	ldrh	r2, [r7, #0]
 80039bc:	4619      	mov	r1, r3
 80039be:	4821      	ldr	r0, [pc, #132]	; (8003a44 <VPC3_GetDiagBufPtr+0x154>)
 80039c0:	f005 f976 	bl	8008cb0 <iprintf>
                segmentValue, calculatedAddress);
         
         // Check if calculated address is within valid range
         if (calculatedAddress >= ASIC_RAM_LENGTH) {
 80039c4:	883b      	ldrh	r3, [r7, #0]
 80039c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039ca:	d30e      	bcc.n	80039ea <VPC3_GetDiagBufPtr+0xfa>
            printf("ERROR: [VPC3_GetDiagBufPtr] Corrupted segment pointer detected!\r\n");
 80039cc:	4819      	ldr	r0, [pc, #100]	; (8003a34 <VPC3_GetDiagBufPtr+0x144>)
 80039ce:	f005 fa0b 	bl	8008de8 <puts>
            printf("ERROR: Segment[1]=0x%02X, CalculatedAddr=0x%04X exceeds ASIC_RAM_LENGTH=0x%04X\r\n",
 80039d2:	78b9      	ldrb	r1, [r7, #2]
 80039d4:	883a      	ldrh	r2, [r7, #0]
 80039d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80039da:	481b      	ldr	r0, [pc, #108]	; (8003a48 <VPC3_GetDiagBufPtr+0x158>)
 80039dc:	f005 f968 	bl	8008cb0 <iprintf>
                   segmentValue, calculatedAddress, ASIC_RAM_LENGTH);
            printf("ERROR: Returning NULL to prevent LECTURA ILEGAL\r\n");
 80039e0:	4816      	ldr	r0, [pc, #88]	; (8003a3c <VPC3_GetDiagBufPtr+0x14c>)
 80039e2:	f005 fa01 	bl	8008de8 <puts>
            return VPC3_NULL_PTR;
 80039e6:	2300      	movs	r3, #0
 80039e8:	e013      	b.n	8003a12 <VPC3_GetDiagBufPtr+0x122>
         }
         
         pToDiagBuffer = pDpSystem->pDiagBuffer2;
 80039ea:	4b0e      	ldr	r3, [pc, #56]	; (8003a24 <VPC3_GetDiagBufPtr+0x134>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f8d3 305a 	ldr.w	r3, [r3, #90]	; 0x5a
 80039f2:	607b      	str	r3, [r7, #4]
         printf("DEBUG: [VPC3_GetDiagBufPtr] Seleccionado pDiagBuffer2 (validado)\r\n");
 80039f4:	4815      	ldr	r0, [pc, #84]	; (8003a4c <VPC3_GetDiagBufPtr+0x15c>)
 80039f6:	f005 f9f7 	bl	8008de8 <puts>
 80039fa:	e004      	b.n	8003a06 <VPC3_GetDiagBufPtr+0x116>
      } /* if( ( bDiagBufferSm & 0x0C ) == 0x04 ) */
      else
      {
         pToDiagBuffer = VPC3_NULL_PTR;
 80039fc:	2300      	movs	r3, #0
 80039fe:	607b      	str	r3, [r7, #4]
         printf("DEBUG: [VPC3_GetDiagBufPtr] No hay buffer disponible, retornando NULL\r\n");
 8003a00:	4813      	ldr	r0, [pc, #76]	; (8003a50 <VPC3_GetDiagBufPtr+0x160>)
 8003a02:	f005 f9f1 	bl	8008de8 <puts>
      } /* else of if( ( bDiagBufferSm & 0x0C ) == 0x04 ) */
   } /* else of if( ( bDiagBufferSm & 0x03 ) == 0x01 ) */

   printf("DEBUG: [VPC3_GetDiagBufPtr] Retornando puntero: 0x%08X\r\n", (unsigned int)pToDiagBuffer);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4619      	mov	r1, r3
 8003a0a:	4812      	ldr	r0, [pc, #72]	; (8003a54 <VPC3_GetDiagBufPtr+0x164>)
 8003a0c:	f005 f950 	bl	8008cb0 <iprintf>
   return pToDiagBuffer;
 8003a10:	687b      	ldr	r3, [r7, #4]
} /* VPC3_UNSIGNED8_PTR VPC3_GetDiagBufPtr( void ) */
 8003a12:	4618      	mov	r0, r3
 8003a14:	3708      	adds	r7, #8
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	20000144 	.word	0x20000144
 8003a20:	0800de0c 	.word	0x0800de0c
 8003a24:	20000000 	.word	0x20000000
 8003a28:	0800de40 	.word	0x0800de40
 8003a2c:	200001b4 	.word	0x200001b4
 8003a30:	0800de88 	.word	0x0800de88
 8003a34:	0800ded0 	.word	0x0800ded0
 8003a38:	0800df14 	.word	0x0800df14
 8003a3c:	0800df68 	.word	0x0800df68
 8003a40:	0800df9c 	.word	0x0800df9c
 8003a44:	0800dfe0 	.word	0x0800dfe0
 8003a48:	0800e028 	.word	0x0800e028
 8003a4c:	0800e07c 	.word	0x0800e07c
 8003a50:	0800e0c0 	.word	0x0800e0c0
 8003a54:	0800e108 	.word	0x0800e108

08003a58 <VPC3_UpdateDiagnosis>:

  \retval !0 - pointer to current diagnostic buffer.
  \retval 0 - no buffer available
*/
static VPC3_UNSIGNED8_PTR VPC3_UpdateDiagnosis( uint8_t bDiagControl, MEM_UNSIGNED8_PTR pbToUserDiagData, uint8_t bUserDiagLen )
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	4603      	mov	r3, r0
 8003a60:	6039      	str	r1, [r7, #0]
 8003a62:	71fb      	strb	r3, [r7, #7]
 8003a64:	4613      	mov	r3, r2
 8003a66:	71bb      	strb	r3, [r7, #6]
VPC3_UNSIGNED8_PTR pDiagBuffer; /* pointer to diagnosis buffer */
uint8_t            bNewDiagBufferCmd;
uint8_t            bDiagBufferSm;
VPC3_ADR           diagAddr;

   bDiagBufferSm = VPC3_GET_DIAG_BUFFER_SM();
 8003a68:	4b40      	ldr	r3, [pc, #256]	; (8003b6c <VPC3_UpdateDiagnosis+0x114>)
 8003a6a:	881b      	ldrh	r3, [r3, #0]
 8003a6c:	330c      	adds	r3, #12
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	4618      	mov	r0, r3
 8003a72:	f002 fa3d 	bl	8005ef0 <Vpc3Read>
 8003a76:	4603      	mov	r3, r0
 8003a78:	74fb      	strb	r3, [r7, #19]

   if( ( bDiagBufferSm & 0x03 ) == 0x01 )                      /* locate Diag Buffer */
 8003a7a:	7cfb      	ldrb	r3, [r7, #19]
 8003a7c:	f003 0303 	and.w	r3, r3, #3
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d124      	bne.n	8003ace <VPC3_UpdateDiagnosis+0x76>
   {
      /* copy to diagnosis buffer */
      if( bUserDiagLen > 0 )
 8003a84:	79bb      	ldrb	r3, [r7, #6]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00a      	beq.n	8003aa0 <VPC3_UpdateDiagnosis+0x48>
      {
         CopyToVpc3_( pDpSystem->pDiagBuffer1+DIAG_NORM_DIAG_SIZE, pbToUserDiagData, bUserDiagLen );
 8003a8a:	4b39      	ldr	r3, [pc, #228]	; (8003b70 <VPC3_UpdateDiagnosis+0x118>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f8d3 3056 	ldr.w	r3, [r3, #86]	; 0x56
 8003a92:	3306      	adds	r3, #6
 8003a94:	79ba      	ldrb	r2, [r7, #6]
 8003a96:	b292      	uxth	r2, r2
 8003a98:	6839      	ldr	r1, [r7, #0]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f002 fbc8 	bl	8006230 <CopyToVpc3>
      } /* if( bUserDiagLen > 0 ) */

      #if VPC3_SERIAL_MODE
         Vpc3Write( bVpc3RwLenDiagBuf1, bUserDiagLen+DIAG_NORM_DIAG_SIZE );
 8003aa0:	4b32      	ldr	r3, [pc, #200]	; (8003b6c <VPC3_UpdateDiagnosis+0x114>)
 8003aa2:	881b      	ldrh	r3, [r3, #0]
 8003aa4:	3324      	adds	r3, #36	; 0x24
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	79bb      	ldrb	r3, [r7, #6]
 8003aaa:	3306      	adds	r3, #6
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	4619      	mov	r1, r3
 8003ab0:	4610      	mov	r0, r2
 8003ab2:	f002 f96d 	bl	8005d90 <Vpc3Write>
         diagAddr = (VPC3_ADR)((uintptr_t)pDpSystem->pDiagBuffer1);
 8003ab6:	4b2e      	ldr	r3, [pc, #184]	; (8003b70 <VPC3_UpdateDiagnosis+0x118>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f8d3 3056 	ldr.w	r3, [r3, #86]	; 0x56
 8003abe:	823b      	strh	r3, [r7, #16]
         Vpc3Write( diagAddr, bDiagControl );
 8003ac0:	79fa      	ldrb	r2, [r7, #7]
 8003ac2:	8a3b      	ldrh	r3, [r7, #16]
 8003ac4:	4611      	mov	r1, r2
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f002 f962 	bl	8005d90 <Vpc3Write>
 8003acc:	e028      	b.n	8003b20 <VPC3_UpdateDiagnosis+0xc8>
         *(pDpSystem->pDiagBuffer1) = bDiagControl;
      #endif /* #if VPC3_SERIAL_MODE */
   } /* if( ( bDiagBufferSm & 0x03 ) == 0x01 ) */
   else
   {
      if( ( bDiagBufferSm & 0x0C ) == 0x04 )
 8003ace:	7cfb      	ldrb	r3, [r7, #19]
 8003ad0:	f003 030c 	and.w	r3, r3, #12
 8003ad4:	2b04      	cmp	r3, #4
 8003ad6:	d123      	bne.n	8003b20 <VPC3_UpdateDiagnosis+0xc8>
      {
         /* copy to diagnosis buffer */
         if( bUserDiagLen > 0 )
 8003ad8:	79bb      	ldrb	r3, [r7, #6]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00a      	beq.n	8003af4 <VPC3_UpdateDiagnosis+0x9c>
         {
            CopyToVpc3_( pDpSystem->pDiagBuffer2+DIAG_NORM_DIAG_SIZE, pbToUserDiagData, bUserDiagLen );
 8003ade:	4b24      	ldr	r3, [pc, #144]	; (8003b70 <VPC3_UpdateDiagnosis+0x118>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f8d3 305a 	ldr.w	r3, [r3, #90]	; 0x5a
 8003ae6:	3306      	adds	r3, #6
 8003ae8:	79ba      	ldrb	r2, [r7, #6]
 8003aea:	b292      	uxth	r2, r2
 8003aec:	6839      	ldr	r1, [r7, #0]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f002 fb9e 	bl	8006230 <CopyToVpc3>
         } /* if( bUserDiagLen > 0 ) */

         #if VPC3_SERIAL_MODE
            Vpc3Write( bVpc3RwLenDiagBuf2, bUserDiagLen+DIAG_NORM_DIAG_SIZE );
 8003af4:	4b1d      	ldr	r3, [pc, #116]	; (8003b6c <VPC3_UpdateDiagnosis+0x114>)
 8003af6:	881b      	ldrh	r3, [r3, #0]
 8003af8:	3325      	adds	r3, #37	; 0x25
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	79bb      	ldrb	r3, [r7, #6]
 8003afe:	3306      	adds	r3, #6
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	4619      	mov	r1, r3
 8003b04:	4610      	mov	r0, r2
 8003b06:	f002 f943 	bl	8005d90 <Vpc3Write>
            diagAddr = (VPC3_ADR)((uintptr_t)pDpSystem->pDiagBuffer2);
 8003b0a:	4b19      	ldr	r3, [pc, #100]	; (8003b70 <VPC3_UpdateDiagnosis+0x118>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f8d3 305a 	ldr.w	r3, [r3, #90]	; 0x5a
 8003b12:	823b      	strh	r3, [r7, #16]
            Vpc3Write( diagAddr, bDiagControl );
 8003b14:	79fa      	ldrb	r2, [r7, #7]
 8003b16:	8a3b      	ldrh	r3, [r7, #16]
 8003b18:	4611      	mov	r1, r2
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f002 f938 	bl	8005d90 <Vpc3Write>
            *(pDpSystem->pDiagBuffer2) = bDiagControl;
         #endif /* #if VPC3_SERIAL_MODE */
      } /* if( ( bDiagBufferSm & 0x0C ) == 0x04 ) */
   } /* else of if( ( bDiagBufferSm & 0x03 ) == 0x01 ) */

   bNewDiagBufferCmd = VPC3_GET_NEW_DIAG_BUFFER_CMD();
 8003b20:	4b12      	ldr	r3, [pc, #72]	; (8003b6c <VPC3_UpdateDiagnosis+0x114>)
 8003b22:	881b      	ldrh	r3, [r3, #0]
 8003b24:	330d      	adds	r3, #13
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f002 f9e1 	bl	8005ef0 <Vpc3Read>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	73fb      	strb	r3, [r7, #15]

   switch( bNewDiagBufferCmd & 0x03 )
 8003b32:	7bfb      	ldrb	r3, [r7, #15]
 8003b34:	f003 0303 	and.w	r3, r3, #3
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d002      	beq.n	8003b42 <VPC3_UpdateDiagnosis+0xea>
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d006      	beq.n	8003b4e <VPC3_UpdateDiagnosis+0xf6>
 8003b40:	e00b      	b.n	8003b5a <VPC3_UpdateDiagnosis+0x102>
   {
      case 1:   /* use buffer 1 */
      {
         pDiagBuffer = pDpSystem->pDiagBuffer1;
 8003b42:	4b0b      	ldr	r3, [pc, #44]	; (8003b70 <VPC3_UpdateDiagnosis+0x118>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f8d3 3056 	ldr.w	r3, [r3, #86]	; 0x56
 8003b4a:	617b      	str	r3, [r7, #20]
         break;
 8003b4c:	e008      	b.n	8003b60 <VPC3_UpdateDiagnosis+0x108>
      } /* case 1: */

      case 2:   /* use buffer 2 */
      {
         pDiagBuffer = pDpSystem->pDiagBuffer2;
 8003b4e:	4b08      	ldr	r3, [pc, #32]	; (8003b70 <VPC3_UpdateDiagnosis+0x118>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f8d3 305a 	ldr.w	r3, [r3, #90]	; 0x5a
 8003b56:	617b      	str	r3, [r7, #20]
         break;
 8003b58:	e002      	b.n	8003b60 <VPC3_UpdateDiagnosis+0x108>
      } /* case 2: */

      default:
      {
         /* no buffer available */
         pDiagBuffer = VPC3_NULL_PTR;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	617b      	str	r3, [r7, #20]
         break;
 8003b5e:	bf00      	nop
      } /* default: */
   } /* switch( bNewDiagBufferCmd & 0x03 ) */

   return pDiagBuffer;
 8003b60:	697b      	ldr	r3, [r7, #20]
} /* static VPC3_UNSIGNED8_PTR VPC3_UpdateDiagnosis( uint8_t bDiagControl, MEM_UNSIGNED8_PTR pbToUserDiagData, uint8_t bUserDiagLen ) */
 8003b62:	4618      	mov	r0, r3
 8003b64:	3718      	adds	r7, #24
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	20000144 	.word	0x20000144
 8003b70:	20000000 	.word	0x20000000

08003b74 <VPC3_CheckDiagBufPtr>:

/*---------------------------------------------------------------------------*/
/* function: VPC3_CheckDiagBufPtr                                            */
/*---------------------------------------------------------------------------*/
static VPC3_UNSIGNED8_PTR VPC3_CheckDiagBufPtr( void )
{
 8003b74:	b598      	push	{r3, r4, r7, lr}
 8003b76:	af00      	add	r7, sp, #0
   if( pDpSystem->pDiagBuffer == VPC3_NULL_PTR )
 8003b78:	4b09      	ldr	r3, [pc, #36]	; (8003ba0 <VPC3_CheckDiagBufPtr+0x2c>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f8d3 305e 	ldr.w	r3, [r3, #94]	; 0x5e
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d106      	bne.n	8003b92 <VPC3_CheckDiagBufPtr+0x1e>
   {
      pDpSystem->pDiagBuffer = VPC3_GetDiagBufPtr();
 8003b84:	4b06      	ldr	r3, [pc, #24]	; (8003ba0 <VPC3_CheckDiagBufPtr+0x2c>)
 8003b86:	681c      	ldr	r4, [r3, #0]
 8003b88:	f7ff feb2 	bl	80038f0 <VPC3_GetDiagBufPtr>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	f8c4 305e 	str.w	r3, [r4, #94]	; 0x5e
   }
   return pDpSystem->pDiagBuffer;
 8003b92:	4b03      	ldr	r3, [pc, #12]	; (8003ba0 <VPC3_CheckDiagBufPtr+0x2c>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f8d3 305e 	ldr.w	r3, [r3, #94]	; 0x5e
} /* static VPC3_UNSIGNED8_PTR VPC3_CheckDiagBufPtr( void ) */
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	bd98      	pop	{r3, r4, r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	20000000 	.word	0x20000000

08003ba4 <VPC3_CheckDiagBufferChanged>:

/*---------------------------------------------------------------------------*/
/* function: VPC3_CheckDiagBufferChanged                                     */
/*---------------------------------------------------------------------------*/
void VPC3_CheckDiagBufferChanged( void )
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
uint8_t bVpc3Event;

   if( VPC3_GetDpState( eDpStateDiagActive ) )
 8003baa:	4b11      	ldr	r3, [pc, #68]	; (8003bf0 <VPC3_CheckDiagBufferChanged+0x4c>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	f003 0310 	and.w	r3, r3, #16
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d017      	beq.n	8003be8 <VPC3_CheckDiagBufferChanged+0x44>
   {
      #if VPC3_SERIAL_MODE
         bVpc3Event = Vpc3Read( bVpc3RwIntReqReg_H );
 8003bb8:	4b0e      	ldr	r3, [pc, #56]	; (8003bf4 <VPC3_CheckDiagBufferChanged+0x50>)
 8003bba:	881b      	ldrh	r3, [r3, #0]
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f002 f995 	bl	8005ef0 <Vpc3Read>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	71fb      	strb	r3, [r7, #7]
      #else
         bVpc3Event = pVpc3->bIntReqReg_H VPC3_EXTENSION;
      #endif /* #if VPC3_SERIAL_MODE */
      if( bVpc3Event & VPC3_INT_DIAG_BUFFER_CHANGED )
 8003bca:	79fb      	ldrb	r3, [r7, #7]
 8003bcc:	f003 0310 	and.w	r3, r3, #16
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d009      	beq.n	8003be8 <VPC3_CheckDiagBufferChanged+0x44>
      {
         DpDiag_IsrDiagBufferChanged();
 8003bd4:	f7fe f98c 	bl	8001ef0 <DpDiag_IsrDiagBufferChanged>
         #if VPC3_SERIAL_MODE
            Vpc3Write( bVpc3WoIntAck_H, VPC3_INT_DIAG_BUFFER_CHANGED );
 8003bd8:	4b06      	ldr	r3, [pc, #24]	; (8003bf4 <VPC3_CheckDiagBufferChanged+0x50>)
 8003bda:	881b      	ldrh	r3, [r3, #0]
 8003bdc:	3303      	adds	r3, #3
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	2110      	movs	r1, #16
 8003be2:	4618      	mov	r0, r3
 8003be4:	f002 f8d4 	bl	8005d90 <Vpc3Write>
         #else
            pVpc3->sReg.sWrite.bIntAck_H VPC3_EXTENSION = VPC3_INT_DIAG_BUFFER_CHANGED;
         #endif /* #if VPC3_SERIAL_MODE */
      }
   } /* if( VPC3_GetDpState( eDpStateDiagActive ) ) */
} /* void VPC3_CheckDiagBufferChanged( void ) */
 8003be8:	bf00      	nop
 8003bea:	3708      	adds	r7, #8
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	20000000 	.word	0x20000000
 8003bf4:	20000144 	.word	0x20000144

08003bf8 <VPC3_SetDiagnosis>:
  \retval DP_DIAG_BUFFER_ERROR - Error, diagnostic header is wrong
  \retval DP_DIAG_SEQUENCE_ERROR - Error, revision will be send in wrong state
  \retval DP_DIAG_NOT_POSSIBLE_ERROR - Error, unknown diagnostic header
*/
DP_ERROR_CODE VPC3_SetDiagnosis( MEM_UNSIGNED8_PTR pbToUserDiagData, uint8_t bUserDiagLength, uint8_t bDiagControl, uint8_t bCheckDiagFlag )
{
 8003bf8:	b590      	push	{r4, r7, lr}
 8003bfa:	b087      	sub	sp, #28
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	4608      	mov	r0, r1
 8003c02:	4611      	mov	r1, r2
 8003c04:	461a      	mov	r2, r3
 8003c06:	4603      	mov	r3, r0
 8003c08:	70fb      	strb	r3, [r7, #3]
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	70bb      	strb	r3, [r7, #2]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	707b      	strb	r3, [r7, #1]
uint8_t           bTmpUserDiagnosisLength;
uint8_t           bTmpLength;
uint8_t           bHeader;
uint8_t           bDpState;

   bRetValue = DP_OK;
 8003c12:	2301      	movs	r3, #1
 8003c14:	74fb      	strb	r3, [r7, #19]
   
   printf("DEBUG: [VPC3_SetDiagnosis] INICIO - bUserDiagLength=%d, bDiagControl=0x%02X, bCheckDiagFlag=%d\n", bUserDiagLength, bDiagControl, bCheckDiagFlag);
 8003c16:	78f9      	ldrb	r1, [r7, #3]
 8003c18:	78ba      	ldrb	r2, [r7, #2]
 8003c1a:	787b      	ldrb	r3, [r7, #1]
 8003c1c:	488c      	ldr	r0, [pc, #560]	; (8003e50 <VPC3_SetDiagnosis+0x258>)
 8003c1e:	f005 f847 	bl	8008cb0 <iprintf>

   /* check available diag buffer */
   printf("DEBUG: [VPC3_SetDiagnosis] Verificando VPC3_CheckDiagBufPtr()...\n");
 8003c22:	488c      	ldr	r0, [pc, #560]	; (8003e54 <VPC3_SetDiagnosis+0x25c>)
 8003c24:	f005 f8e0 	bl	8008de8 <puts>
   if( VPC3_CheckDiagBufPtr() != VPC3_NULL_PTR )
 8003c28:	f7ff ffa4 	bl	8003b74 <VPC3_CheckDiagBufPtr>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f000 80f7 	beq.w	8003e22 <VPC3_SetDiagnosis+0x22a>
   {
      printf("DEBUG: [VPC3_SetDiagnosis] Buffer de diagnóstico disponible\n");
 8003c34:	4888      	ldr	r0, [pc, #544]	; (8003e58 <VPC3_SetDiagnosis+0x260>)
 8003c36:	f005 f8d7 	bl	8008de8 <puts>
      bTmpUserDiagnosisLength = bUserDiagLength;
 8003c3a:	78fb      	ldrb	r3, [r7, #3]
 8003c3c:	74bb      	strb	r3, [r7, #18]
      pbToDiagArray = pbToUserDiagData;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	617b      	str	r3, [r7, #20]

      bDpState = VPC3_GET_DP_STATE();
 8003c42:	4b86      	ldr	r3, [pc, #536]	; (8003e5c <VPC3_SetDiagnosis+0x264>)
 8003c44:	881b      	ldrh	r3, [r3, #0]
 8003c46:	3304      	adds	r3, #4
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f002 f950 	bl	8005ef0 <Vpc3Read>
 8003c50:	4603      	mov	r3, r0
 8003c52:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003c56:	743b      	strb	r3, [r7, #16]
      printf("DEBUG: [VPC3_SetDiagnosis] bDpState=0x%02X, DATA_EX=0x%02X\n", bDpState, DATA_EX);
 8003c58:	7c3b      	ldrb	r3, [r7, #16]
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	4880      	ldr	r0, [pc, #512]	; (8003e60 <VPC3_SetDiagnosis+0x268>)
 8003c60:	f005 f826 	bl	8008cb0 <iprintf>
      if( ( bDpState == DATA_EX ) && ( bCheckDiagFlag == VPC3_TRUE ) )
 8003c64:	7c3b      	ldrb	r3, [r7, #16]
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d116      	bne.n	8003c98 <VPC3_SetDiagnosis+0xa0>
 8003c6a:	787b      	ldrb	r3, [r7, #1]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d113      	bne.n	8003c98 <VPC3_SetDiagnosis+0xa0>
      {
         printf("DEBUG: [VPC3_SetDiagnosis] Verificando VPC3_GET_DIAG_FLAG()...\n");
 8003c70:	487c      	ldr	r0, [pc, #496]	; (8003e64 <VPC3_SetDiagnosis+0x26c>)
 8003c72:	f005 f8b9 	bl	8008de8 <puts>
         if( VPC3_GET_DIAG_FLAG() )
 8003c76:	4b79      	ldr	r3, [pc, #484]	; (8003e5c <VPC3_SetDiagnosis+0x264>)
 8003c78:	881b      	ldrh	r3, [r3, #0]
 8003c7a:	3304      	adds	r3, #4
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f002 f936 	bl	8005ef0 <Vpc3Read>
 8003c84:	4603      	mov	r3, r0
 8003c86:	f003 0304 	and.w	r3, r3, #4
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d004      	beq.n	8003c98 <VPC3_SetDiagnosis+0xa0>
         {
            printf("DEBUG: [VPC3_SetDiagnosis] ERROR: Diagnóstico anterior no enviado\n");
 8003c8e:	4876      	ldr	r0, [pc, #472]	; (8003e68 <VPC3_SetDiagnosis+0x270>)
 8003c90:	f005 f8aa 	bl	8008de8 <puts>
            /* old diagnosis not send */
            bRetValue = DP_DIAG_OLD_DIAG_NOT_SEND_ERROR;
 8003c94:	2362      	movs	r3, #98	; 0x62
 8003c96:	74fb      	strb	r3, [r7, #19]
         } /* if( VPC3_GET_DIAG_FLAG() ) */
      } /* if( ( bDpState == DATA_EX ) && ( bCheckDiagFlag == VPC3_TRUE ) ) */

      /* check bUserDiagLength */
      printf("DEBUG: [VPC3_SetDiagnosis] Verificando longitud: bUserDiagLength=%d, DIAG_BUFSIZE-6=%d\n", bUserDiagLength, DIAG_BUFSIZE - 6);
 8003c98:	78fb      	ldrb	r3, [r7, #3]
 8003c9a:	220a      	movs	r2, #10
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	4873      	ldr	r0, [pc, #460]	; (8003e6c <VPC3_SetDiagnosis+0x274>)
 8003ca0:	f005 f806 	bl	8008cb0 <iprintf>
      if( bUserDiagLength > ( DIAG_BUFSIZE - 6 ) )
 8003ca4:	78fb      	ldrb	r3, [r7, #3]
 8003ca6:	2b0a      	cmp	r3, #10
 8003ca8:	d904      	bls.n	8003cb4 <VPC3_SetDiagnosis+0xbc>
      {
         printf("DEBUG: [VPC3_SetDiagnosis] ERROR: Longitud de buffer excede límite\n");
 8003caa:	4871      	ldr	r0, [pc, #452]	; (8003e70 <VPC3_SetDiagnosis+0x278>)
 8003cac:	f005 f89c 	bl	8008de8 <puts>
         bRetValue = DP_DIAG_BUFFER_LENGTH_ERROR;
 8003cb0:	2365      	movs	r3, #101	; 0x65
 8003cb2:	74fb      	strb	r3, [r7, #19]
      } /* if( bUserDiagLength > ( DIAG_BUFSIZE - 6 ) ) */

      if( bRetValue == DP_OK )
 8003cb4:	7cfb      	ldrb	r3, [r7, #19]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	f040 80bf 	bne.w	8003e3a <VPC3_SetDiagnosis+0x242>
      {
         printf("DEBUG: [VPC3_SetDiagnosis] Verificando bDiagControl=0x%02X...\n", bDiagControl);
 8003cbc:	78bb      	ldrb	r3, [r7, #2]
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	486c      	ldr	r0, [pc, #432]	; (8003e74 <VPC3_SetDiagnosis+0x27c>)
 8003cc2:	f004 fff5 	bl	8008cb0 <iprintf>
         /* check control byte */
         switch( bDiagControl )
 8003cc6:	78bb      	ldrb	r3, [r7, #2]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d10d      	bne.n	8003ce8 <VPC3_SetDiagnosis+0xf0>
         {
            case EXT_DIAG_SET:
            {
               printf("DEBUG: [VPC3_SetDiagnosis] Caso EXT_DIAG_SET, verificando bUserDiagLength=%d\n", bUserDiagLength);
 8003ccc:	78fb      	ldrb	r3, [r7, #3]
 8003cce:	4619      	mov	r1, r3
 8003cd0:	4869      	ldr	r0, [pc, #420]	; (8003e78 <VPC3_SetDiagnosis+0x280>)
 8003cd2:	f004 ffed 	bl	8008cb0 <iprintf>
               if( bUserDiagLength == 0 )
 8003cd6:	78fb      	ldrb	r3, [r7, #3]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d109      	bne.n	8003cf0 <VPC3_SetDiagnosis+0xf8>
               {
                   printf("DEBUG: [VPC3_SetDiagnosis] ERROR: EXT_DIAG_SET con longitud 0\n");
 8003cdc:	4867      	ldr	r0, [pc, #412]	; (8003e7c <VPC3_SetDiagnosis+0x284>)
 8003cde:	f005 f883 	bl	8008de8 <puts>
                   bRetValue = DP_DIAG_CONTROL_BYTE_ERROR;
 8003ce2:	2366      	movs	r3, #102	; 0x66
 8003ce4:	74fb      	strb	r3, [r7, #19]
               } /* if( bUserDiagLength == 0 ) */
               break;
 8003ce6:	e003      	b.n	8003cf0 <VPC3_SetDiagnosis+0xf8>
            } /* case EXT_DIAG_SET: */

            default:
            {
               printf("DEBUG: [VPC3_SetDiagnosis] Caso default para bDiagControl\n");
 8003ce8:	4865      	ldr	r0, [pc, #404]	; (8003e80 <VPC3_SetDiagnosis+0x288>)
 8003cea:	f005 f87d 	bl	8008de8 <puts>
               /* do nothing */
               break;
 8003cee:	e000      	b.n	8003cf2 <VPC3_SetDiagnosis+0xfa>
               break;
 8003cf0:	bf00      	nop
            } /* default: */
         } /* switch( bDiagControl ) */

         /* check user diag buffer contents */
         printf("DEBUG: [VPC3_SetDiagnosis] Verificando contenido del buffer de diagnóstico...\n");
 8003cf2:	4864      	ldr	r0, [pc, #400]	; (8003e84 <VPC3_SetDiagnosis+0x28c>)
 8003cf4:	f005 f878 	bl	8008de8 <puts>
         while( ( 0 < bTmpUserDiagnosisLength ) && ( DP_OK == bRetValue ) )
 8003cf8:	e078      	b.n	8003dec <VPC3_SetDiagnosis+0x1f4>
         {
            bHeader = pbToDiagArray[0];
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	73fb      	strb	r3, [r7, #15]
            printf("DEBUG: [VPC3_SetDiagnosis] Procesando header: 0x%02X, DIAG_TYPE_MASK=0x%02X\n", bHeader, DIAG_TYPE_MASK);
 8003d00:	7bfb      	ldrb	r3, [r7, #15]
 8003d02:	22c0      	movs	r2, #192	; 0xc0
 8003d04:	4619      	mov	r1, r3
 8003d06:	4860      	ldr	r0, [pc, #384]	; (8003e88 <VPC3_SetDiagnosis+0x290>)
 8003d08:	f004 ffd2 	bl	8008cb0 <iprintf>
            switch( DIAG_TYPE_MASK & bHeader )
 8003d0c:	7bfb      	ldrb	r3, [r7, #15]
 8003d0e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003d12:	2bc0      	cmp	r3, #192	; 0xc0
 8003d14:	d03b      	beq.n	8003d8e <VPC3_SetDiagnosis+0x196>
 8003d16:	2bc0      	cmp	r3, #192	; 0xc0
 8003d18:	dc49      	bgt.n	8003dae <VPC3_SetDiagnosis+0x1b6>
 8003d1a:	2b80      	cmp	r3, #128	; 0x80
 8003d1c:	d031      	beq.n	8003d82 <VPC3_SetDiagnosis+0x18a>
 8003d1e:	2b80      	cmp	r3, #128	; 0x80
 8003d20:	dc45      	bgt.n	8003dae <VPC3_SetDiagnosis+0x1b6>
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d002      	beq.n	8003d2c <VPC3_SetDiagnosis+0x134>
 8003d26:	2b40      	cmp	r3, #64	; 0x40
 8003d28:	d016      	beq.n	8003d58 <VPC3_SetDiagnosis+0x160>
 8003d2a:	e040      	b.n	8003dae <VPC3_SetDiagnosis+0x1b6>
            {
               case DIAG_TYPE_DEV:
               {
                  printf("DEBUG: [VPC3_SetDiagnosis] Caso DIAG_TYPE_DEV\n");
 8003d2c:	4857      	ldr	r0, [pc, #348]	; (8003e8c <VPC3_SetDiagnosis+0x294>)
 8003d2e:	f005 f85b 	bl	8008de8 <puts>
                  bTmpLength = (( ~DIAG_TYPE_MASK ) & bHeader );
 8003d32:	7bfb      	ldrb	r3, [r7, #15]
 8003d34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d38:	747b      	strb	r3, [r7, #17]
                  printf("DEBUG: [VPC3_SetDiagnosis] bTmpLength=%d, STATUS_DIAG_HEAD_SIZE=%d\n", bTmpLength, STATUS_DIAG_HEAD_SIZE);
 8003d3a:	7c7b      	ldrb	r3, [r7, #17]
 8003d3c:	2204      	movs	r2, #4
 8003d3e:	4619      	mov	r1, r3
 8003d40:	4853      	ldr	r0, [pc, #332]	; (8003e90 <VPC3_SetDiagnosis+0x298>)
 8003d42:	f004 ffb5 	bl	8008cb0 <iprintf>
                  if( STATUS_DIAG_HEAD_SIZE > bTmpLength )
 8003d46:	7c7b      	ldrb	r3, [r7, #17]
 8003d48:	2b03      	cmp	r3, #3
 8003d4a:	d83c      	bhi.n	8003dc6 <VPC3_SetDiagnosis+0x1ce>
                  {
                     printf("DEBUG: [VPC3_SetDiagnosis] ERROR: STATUS_DIAG_HEAD_SIZE > bTmpLength\n");
 8003d4c:	4851      	ldr	r0, [pc, #324]	; (8003e94 <VPC3_SetDiagnosis+0x29c>)
 8003d4e:	f005 f84b 	bl	8008de8 <puts>
                     bRetValue = DP_DIAG_BUFFER_ERROR;
 8003d52:	2360      	movs	r3, #96	; 0x60
 8003d54:	74fb      	strb	r3, [r7, #19]
                  } /* if( STATUS_DIAG_HEAD_SIZE > bTmpLength ) */
                  break;
 8003d56:	e036      	b.n	8003dc6 <VPC3_SetDiagnosis+0x1ce>
               } /* case DIAG_TYPE_DEV: */

               case DIAG_TYPE_KEN:
               {
                  printf("DEBUG: [VPC3_SetDiagnosis] Caso DIAG_TYPE_KEN\n");
 8003d58:	484f      	ldr	r0, [pc, #316]	; (8003e98 <VPC3_SetDiagnosis+0x2a0>)
 8003d5a:	f005 f845 	bl	8008de8 <puts>
                  bTmpLength = (( ~DIAG_TYPE_MASK ) & bHeader );
 8003d5e:	7bfb      	ldrb	r3, [r7, #15]
 8003d60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d64:	747b      	strb	r3, [r7, #17]
                  printf("DEBUG: [VPC3_SetDiagnosis] bTmpLength=%d\n", bTmpLength);
 8003d66:	7c7b      	ldrb	r3, [r7, #17]
 8003d68:	4619      	mov	r1, r3
 8003d6a:	484c      	ldr	r0, [pc, #304]	; (8003e9c <VPC3_SetDiagnosis+0x2a4>)
 8003d6c:	f004 ffa0 	bl	8008cb0 <iprintf>
                  if ( bTmpLength == 0 )
 8003d70:	7c7b      	ldrb	r3, [r7, #17]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d129      	bne.n	8003dca <VPC3_SetDiagnosis+0x1d2>
                  {
                     printf("DEBUG: [VPC3_SetDiagnosis] ERROR: DIAG_TYPE_KEN con longitud 0\n");
 8003d76:	484a      	ldr	r0, [pc, #296]	; (8003ea0 <VPC3_SetDiagnosis+0x2a8>)
 8003d78:	f005 f836 	bl	8008de8 <puts>
                     bRetValue = DP_DIAG_BUFFER_ERROR;
 8003d7c:	2360      	movs	r3, #96	; 0x60
 8003d7e:	74fb      	strb	r3, [r7, #19]
                  } /* if ( bTmpLength == 0 ) */
                  break;
 8003d80:	e023      	b.n	8003dca <VPC3_SetDiagnosis+0x1d2>
               } /* case DIAG_TYPE_KEN: */

               case DIAG_TYPE_CHN:
               {
                  printf("DEBUG: [VPC3_SetDiagnosis] Caso DIAG_TYPE_CHN\n");
 8003d82:	4848      	ldr	r0, [pc, #288]	; (8003ea4 <VPC3_SetDiagnosis+0x2ac>)
 8003d84:	f005 f830 	bl	8008de8 <puts>
                  bTmpLength = DIAG_TYPE_CHN_SIZE;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	747b      	strb	r3, [r7, #17]
                  break;
 8003d8c:	e020      	b.n	8003dd0 <VPC3_SetDiagnosis+0x1d8>
               } /* case DIAG_TYPE_CHN: */

               case DIAG_TYPE_REV:
               {
                  printf("DEBUG: [VPC3_SetDiagnosis] Caso DIAG_TYPE_REV\n");
 8003d8e:	4846      	ldr	r0, [pc, #280]	; (8003ea8 <VPC3_SetDiagnosis+0x2b0>)
 8003d90:	f005 f82a 	bl	8008de8 <puts>
                  bTmpLength = DIAG_TYPE_REV_SIZE;
 8003d94:	2301      	movs	r3, #1
 8003d96:	747b      	strb	r3, [r7, #17]
                  if( bDpState != DATA_EX )
 8003d98:	7c3b      	ldrb	r3, [r7, #16]
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d017      	beq.n	8003dce <VPC3_SetDiagnosis+0x1d6>
                  {
                     printf("DEBUG: [VPC3_SetDiagnosis] ERROR: DIAG_TYPE_REV no permitido en estado 0x%02X\n", bDpState);
 8003d9e:	7c3b      	ldrb	r3, [r7, #16]
 8003da0:	4619      	mov	r1, r3
 8003da2:	4842      	ldr	r0, [pc, #264]	; (8003eac <VPC3_SetDiagnosis+0x2b4>)
 8003da4:	f004 ff84 	bl	8008cb0 <iprintf>
                     /* only allowed in state DATA_EX */
                     bRetValue = DP_DIAG_SEQUENCE_ERROR;
 8003da8:	2361      	movs	r3, #97	; 0x61
 8003daa:	74fb      	strb	r3, [r7, #19]
                  } /* if( bDpState != DATA_EX ) */
                  break;
 8003dac:	e00f      	b.n	8003dce <VPC3_SetDiagnosis+0x1d6>
               } /* case DIAG_TYPE_REV: */

               default:
               {
                  printf("DEBUG: [VPC3_SetDiagnosis] ERROR: Tipo de diagnóstico no reconocido: 0x%02X\n", DIAG_TYPE_MASK & bHeader);
 8003dae:	7bfb      	ldrb	r3, [r7, #15]
 8003db0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003db4:	4619      	mov	r1, r3
 8003db6:	483e      	ldr	r0, [pc, #248]	; (8003eb0 <VPC3_SetDiagnosis+0x2b8>)
 8003db8:	f004 ff7a 	bl	8008cb0 <iprintf>
                  /* not possible! */
                  bTmpLength = 0;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	747b      	strb	r3, [r7, #17]
                  bRetValue = DP_DIAG_NOT_POSSIBLE_ERROR;
 8003dc0:	2363      	movs	r3, #99	; 0x63
 8003dc2:	74fb      	strb	r3, [r7, #19]
                  break;
 8003dc4:	e004      	b.n	8003dd0 <VPC3_SetDiagnosis+0x1d8>
                  break;
 8003dc6:	bf00      	nop
 8003dc8:	e002      	b.n	8003dd0 <VPC3_SetDiagnosis+0x1d8>
                  break;
 8003dca:	bf00      	nop
 8003dcc:	e000      	b.n	8003dd0 <VPC3_SetDiagnosis+0x1d8>
                  break;
 8003dce:	bf00      	nop
               } /* default: */
            } /* switch( DIAG_TYPE_MASK & bHeader ) */

            printf("DEBUG: [VPC3_SetDiagnosis] bTmpLength=%d, bTmpUserDiagnosisLength=%d\n", bTmpLength, bTmpUserDiagnosisLength);
 8003dd0:	7c7b      	ldrb	r3, [r7, #17]
 8003dd2:	7cba      	ldrb	r2, [r7, #18]
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	4837      	ldr	r0, [pc, #220]	; (8003eb4 <VPC3_SetDiagnosis+0x2bc>)
 8003dd8:	f004 ff6a 	bl	8008cb0 <iprintf>
            bTmpUserDiagnosisLength -= bTmpLength;
 8003ddc:	7cba      	ldrb	r2, [r7, #18]
 8003dde:	7c7b      	ldrb	r3, [r7, #17]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	74bb      	strb	r3, [r7, #18]
            pbToDiagArray += bTmpLength;
 8003de4:	7c7b      	ldrb	r3, [r7, #17]
 8003de6:	697a      	ldr	r2, [r7, #20]
 8003de8:	4413      	add	r3, r2
 8003dea:	617b      	str	r3, [r7, #20]
         while( ( 0 < bTmpUserDiagnosisLength ) && ( DP_OK == bRetValue ) )
 8003dec:	7cbb      	ldrb	r3, [r7, #18]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d002      	beq.n	8003df8 <VPC3_SetDiagnosis+0x200>
 8003df2:	7cfb      	ldrb	r3, [r7, #19]
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d080      	beq.n	8003cfa <VPC3_SetDiagnosis+0x102>
         } /* while( ( 0 < bTmpUserDiagnosisLength ) && ( DP_OK == bRetValue ) ) */

         if( bRetValue == DP_OK )
 8003df8:	7cfb      	ldrb	r3, [r7, #19]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d11d      	bne.n	8003e3a <VPC3_SetDiagnosis+0x242>
         {
            printf("DEBUG: [VPC3_SetDiagnosis] Llamando VPC3_UpdateDiagnosis...\n");
 8003dfe:	482e      	ldr	r0, [pc, #184]	; (8003eb8 <VPC3_SetDiagnosis+0x2c0>)
 8003e00:	f004 fff2 	bl	8008de8 <puts>
            pDpSystem->pDiagBuffer = VPC3_UpdateDiagnosis( bDiagControl, pbToUserDiagData, bUserDiagLength );
 8003e04:	4b2d      	ldr	r3, [pc, #180]	; (8003ebc <VPC3_SetDiagnosis+0x2c4>)
 8003e06:	681c      	ldr	r4, [r3, #0]
 8003e08:	78fa      	ldrb	r2, [r7, #3]
 8003e0a:	78bb      	ldrb	r3, [r7, #2]
 8003e0c:	6879      	ldr	r1, [r7, #4]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7ff fe22 	bl	8003a58 <VPC3_UpdateDiagnosis>
 8003e14:	4603      	mov	r3, r0
 8003e16:	f8c4 305e 	str.w	r3, [r4, #94]	; 0x5e
            printf("DEBUG: [VPC3_SetDiagnosis] VPC3_UpdateDiagnosis completado\n");
 8003e1a:	4829      	ldr	r0, [pc, #164]	; (8003ec0 <VPC3_SetDiagnosis+0x2c8>)
 8003e1c:	f004 ffe4 	bl	8008de8 <puts>
 8003e20:	e00b      	b.n	8003e3a <VPC3_SetDiagnosis+0x242>
         } /* if( bRetValue == DP_OK ) */
      } /* if( bRetValue == DP_OK ) */
   } /* if( VPC3_CheckDiagBufPtr() != VPC3_NULL_PTR ) */
   else
   {
      printf("DEBUG: [VPC3_SetDiagnosis] ERROR: No hay buffer de diagnóstico disponible\n");
 8003e22:	4828      	ldr	r0, [pc, #160]	; (8003ec4 <VPC3_SetDiagnosis+0x2cc>)
 8003e24:	f004 ffe0 	bl	8008de8 <puts>
      /* Fetch new diagnosis buffer */
      pDpSystem->pDiagBuffer = VPC3_GetDiagBufPtr();
 8003e28:	4b24      	ldr	r3, [pc, #144]	; (8003ebc <VPC3_SetDiagnosis+0x2c4>)
 8003e2a:	681c      	ldr	r4, [r3, #0]
 8003e2c:	f7ff fd60 	bl	80038f0 <VPC3_GetDiagBufPtr>
 8003e30:	4603      	mov	r3, r0
 8003e32:	f8c4 305e 	str.w	r3, [r4, #94]	; 0x5e
      /* wait for next free diag_buffer */
      bRetValue = DP_DIAG_NO_BUFFER_ERROR;
 8003e36:	2364      	movs	r3, #100	; 0x64
 8003e38:	74fb      	strb	r3, [r7, #19]
   } /* else of if( VPC3_CheckDiagBufPtr() != VPC3_NULL_PTR ) */

   printf("DEBUG: [VPC3_SetDiagnosis] FINAL - Retornando bRetValue=%d\n", bRetValue);
 8003e3a:	7cfb      	ldrb	r3, [r7, #19]
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	4822      	ldr	r0, [pc, #136]	; (8003ec8 <VPC3_SetDiagnosis+0x2d0>)
 8003e40:	f004 ff36 	bl	8008cb0 <iprintf>
   return bRetValue;
 8003e44:	7cfb      	ldrb	r3, [r7, #19]
} /* DP_ERROR_CODE VPC3_SetDiagnosis( MEM_UNSIGNED8_PTR pbToUserDiagData, uint8_t bUserDiagLength, uint8_t bDiagControl, uint8_t bCheckDiagFlag ) */
 8003e46:	4618      	mov	r0, r3
 8003e48:	371c      	adds	r7, #28
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd90      	pop	{r4, r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	0800e144 	.word	0x0800e144
 8003e54:	0800e1a4 	.word	0x0800e1a4
 8003e58:	0800e1e8 	.word	0x0800e1e8
 8003e5c:	20000144 	.word	0x20000144
 8003e60:	0800e228 	.word	0x0800e228
 8003e64:	0800e264 	.word	0x0800e264
 8003e68:	0800e2a4 	.word	0x0800e2a4
 8003e6c:	0800e2e8 	.word	0x0800e2e8
 8003e70:	0800e340 	.word	0x0800e340
 8003e74:	0800e384 	.word	0x0800e384
 8003e78:	0800e3c4 	.word	0x0800e3c4
 8003e7c:	0800e414 	.word	0x0800e414
 8003e80:	0800e454 	.word	0x0800e454
 8003e84:	0800e490 	.word	0x0800e490
 8003e88:	0800e4e0 	.word	0x0800e4e0
 8003e8c:	0800e530 	.word	0x0800e530
 8003e90:	0800e560 	.word	0x0800e560
 8003e94:	0800e5a4 	.word	0x0800e5a4
 8003e98:	0800e5ec 	.word	0x0800e5ec
 8003e9c:	0800e61c 	.word	0x0800e61c
 8003ea0:	0800e648 	.word	0x0800e648
 8003ea4:	0800e688 	.word	0x0800e688
 8003ea8:	0800e6b8 	.word	0x0800e6b8
 8003eac:	0800e6e8 	.word	0x0800e6e8
 8003eb0:	0800e738 	.word	0x0800e738
 8003eb4:	0800e788 	.word	0x0800e788
 8003eb8:	0800e7d0 	.word	0x0800e7d0
 8003ebc:	20000000 	.word	0x20000000
 8003ec0:	0800e80c 	.word	0x0800e80c
 8003ec4:	0800e848 	.word	0x0800e848
 8003ec8:	0800e894 	.word	0x0800e894

08003ecc <VPC3_ProcessDpv1StateMachine>:
/*-------------------------------------------------------------------*/
/*!
  \brief The application program has to call this function cyclically so that the DPV1 services can be processed.
*/
void VPC3_ProcessDpv1StateMachine( void )
{
 8003ecc:	b480      	push	{r7}
 8003ece:	af00      	add	r7, sp, #0
   #endif /* #if DP_ALARM */

   #if DP_MSAC_C2
      MSAC_C2_Process();   /* state machine MSAC_C2 */
   #endif /* #if DP_MSAC_C2 */
} /* void VPC3_ProcessDpv1StateMachine( void ) */
 8003ed0:	bf00      	nop
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
	...

08003edc <VPC3_ForceModeReg2>:
 * provides detailed logging about the process.
 * 
 * @retval 0 - Success (MODE_REG_2 is correct)
 * @retval 1 - Failure (MODE_REG_2 could not be set correctly)
 */
uint8_t VPC3_ForceModeReg2(void) {
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
   uint8_t attempts = 0;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	71fb      	strb	r3, [r7, #7]
   uint8_t max_attempts = 10;
 8003ee6:	230a      	movs	r3, #10
 8003ee8:	717b      	strb	r3, [r7, #5]
   uint8_t expected_value = INIT_VPC3_MODE_REG_2;
 8003eea:	2305      	movs	r3, #5
 8003eec:	713b      	strb	r3, [r7, #4]
   uint8_t current_value;
   
   printf("[VPC3_ForceModeReg2] INICIO - Forzando MODE_REG_2 a 0x%02X\r\n", expected_value);
 8003eee:	793b      	ldrb	r3, [r7, #4]
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	4820      	ldr	r0, [pc, #128]	; (8003f74 <VPC3_ForceModeReg2+0x98>)
 8003ef4:	f004 fedc 	bl	8008cb0 <iprintf>
   
   while (attempts < max_attempts) {
 8003ef8:	e027      	b.n	8003f4a <VPC3_ForceModeReg2+0x6e>
      attempts++;
 8003efa:	79fb      	ldrb	r3, [r7, #7]
 8003efc:	3301      	adds	r3, #1
 8003efe:	71fb      	strb	r3, [r7, #7]
      printf("[VPC3_ForceModeReg2] Intento %d/%d\r\n", attempts, max_attempts);
 8003f00:	79fb      	ldrb	r3, [r7, #7]
 8003f02:	797a      	ldrb	r2, [r7, #5]
 8003f04:	4619      	mov	r1, r3
 8003f06:	481c      	ldr	r0, [pc, #112]	; (8003f78 <VPC3_ForceModeReg2+0x9c>)
 8003f08:	f004 fed2 	bl	8008cb0 <iprintf>
      
      // Write the expected value
      VPC3_SET_MODE_REG_2(expected_value);
 8003f0c:	4b1b      	ldr	r3, [pc, #108]	; (8003f7c <VPC3_ForceModeReg2+0xa0>)
 8003f0e:	881b      	ldrh	r3, [r3, #0]
 8003f10:	330c      	adds	r3, #12
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	793a      	ldrb	r2, [r7, #4]
 8003f16:	4611      	mov	r1, r2
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f001 ff39 	bl	8005d90 <Vpc3Write>
      
      // Read back to verify
     current_value = VPC3_GetModeReg2Shadow();
 8003f1e:	f001 fe91 	bl	8005c44 <VPC3_GetModeReg2Shadow>
 8003f22:	4603      	mov	r3, r0
 8003f24:	71bb      	strb	r3, [r7, #6]
      printf("[VPC3_ForceModeReg2] Escrito: 0x%02X, Leído: 0x%02X\r\n", expected_value, current_value);
 8003f26:	793b      	ldrb	r3, [r7, #4]
 8003f28:	79ba      	ldrb	r2, [r7, #6]
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	4814      	ldr	r0, [pc, #80]	; (8003f80 <VPC3_ForceModeReg2+0xa4>)
 8003f2e:	f004 febf 	bl	8008cb0 <iprintf>
      
      if (current_value == expected_value) {
 8003f32:	79ba      	ldrb	r2, [r7, #6]
 8003f34:	793b      	ldrb	r3, [r7, #4]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d104      	bne.n	8003f44 <VPC3_ForceModeReg2+0x68>
         printf("[VPC3_ForceModeReg2] ÉXITO - MODE_REG_2 configurado correctamente\r\n");
 8003f3a:	4812      	ldr	r0, [pc, #72]	; (8003f84 <VPC3_ForceModeReg2+0xa8>)
 8003f3c:	f004 ff54 	bl	8008de8 <puts>
         return 0; // Success
 8003f40:	2300      	movs	r3, #0
 8003f42:	e012      	b.n	8003f6a <VPC3_ForceModeReg2+0x8e>
      }
      
      // Small delay before retry
      HAL_Delay(1);
 8003f44:	2001      	movs	r0, #1
 8003f46:	f002 fb39 	bl	80065bc <HAL_Delay>
   while (attempts < max_attempts) {
 8003f4a:	79fa      	ldrb	r2, [r7, #7]
 8003f4c:	797b      	ldrb	r3, [r7, #5]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d3d3      	bcc.n	8003efa <VPC3_ForceModeReg2+0x1e>
   }
   
   printf("[VPC3_ForceModeReg2] FALLO - No se pudo configurar MODE_REG_2 después de %d intentos\r\n", max_attempts);
 8003f52:	797b      	ldrb	r3, [r7, #5]
 8003f54:	4619      	mov	r1, r3
 8003f56:	480c      	ldr	r0, [pc, #48]	; (8003f88 <VPC3_ForceModeReg2+0xac>)
 8003f58:	f004 feaa 	bl	8008cb0 <iprintf>
   printf("[VPC3_ForceModeReg2] Último valor leído: 0x%02X (esperado: 0x%02X)\r\n", current_value, expected_value);
 8003f5c:	79bb      	ldrb	r3, [r7, #6]
 8003f5e:	793a      	ldrb	r2, [r7, #4]
 8003f60:	4619      	mov	r1, r3
 8003f62:	480a      	ldr	r0, [pc, #40]	; (8003f8c <VPC3_ForceModeReg2+0xb0>)
 8003f64:	f004 fea4 	bl	8008cb0 <iprintf>
   return 1; // Failure
 8003f68:	2301      	movs	r3, #1
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3708      	adds	r7, #8
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	0800e8d0 	.word	0x0800e8d0
 8003f78:	0800e910 	.word	0x0800e910
 8003f7c:	20000144 	.word	0x20000144
 8003f80:	0800e938 	.word	0x0800e938
 8003f84:	0800e970 	.word	0x0800e970
 8003f88:	0800e9b4 	.word	0x0800e9b4
 8003f8c:	0800ea0c 	.word	0x0800ea0c

08003f90 <VPC3_MonitorAndRecoverModeReg2>:
 * 
 * @retval 0 - MODE_REG_2 is correct
 * @retval 1 - MODE_REG_2 was corrected
 * @retval 2 - MODE_REG_2 could not be corrected
 */
uint8_t VPC3_MonitorAndRecoverModeReg2(void) {
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
   static uint8_t last_known_value = 0xFF;
   uint8_t current_value = VPC3_GetModeReg2Shadow();
 8003f96:	f001 fe55 	bl	8005c44 <VPC3_GetModeReg2Shadow>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	71fb      	strb	r3, [r7, #7]
   uint8_t expected_value = INIT_VPC3_MODE_REG_2;
 8003f9e:	2305      	movs	r3, #5
 8003fa0:	71bb      	strb	r3, [r7, #6]
   
   // First time initialization
   if (last_known_value == 0xFF) {
 8003fa2:	4b22      	ldr	r3, [pc, #136]	; (800402c <VPC3_MonitorAndRecoverModeReg2+0x9c>)
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	2bff      	cmp	r3, #255	; 0xff
 8003fa8:	d109      	bne.n	8003fbe <VPC3_MonitorAndRecoverModeReg2+0x2e>
      last_known_value = current_value;
 8003faa:	4a20      	ldr	r2, [pc, #128]	; (800402c <VPC3_MonitorAndRecoverModeReg2+0x9c>)
 8003fac:	79fb      	ldrb	r3, [r7, #7]
 8003fae:	7013      	strb	r3, [r2, #0]
      printf("[VPC3_MonitorModeReg2] Inicialización - MODE_REG_2 = 0x%02X\r\n", current_value);
 8003fb0:	79fb      	ldrb	r3, [r7, #7]
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	481e      	ldr	r0, [pc, #120]	; (8004030 <VPC3_MonitorAndRecoverModeReg2+0xa0>)
 8003fb6:	f004 fe7b 	bl	8008cb0 <iprintf>
      return 0;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	e031      	b.n	8004022 <VPC3_MonitorAndRecoverModeReg2+0x92>
   }
   
   // Check if value changed
   if (current_value != last_known_value) {
 8003fbe:	4b1b      	ldr	r3, [pc, #108]	; (800402c <VPC3_MonitorAndRecoverModeReg2+0x9c>)
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	79fa      	ldrb	r2, [r7, #7]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d02b      	beq.n	8004020 <VPC3_MonitorAndRecoverModeReg2+0x90>
      printf("[VPC3_MonitorModeReg2] 🚨 CAMBIO DETECTADO: MODE_REG_2 cambió de 0x%02X a 0x%02X\r\n", 
 8003fc8:	4b18      	ldr	r3, [pc, #96]	; (800402c <VPC3_MonitorAndRecoverModeReg2+0x9c>)
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	4619      	mov	r1, r3
 8003fce:	79fb      	ldrb	r3, [r7, #7]
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	4818      	ldr	r0, [pc, #96]	; (8004034 <VPC3_MonitorAndRecoverModeReg2+0xa4>)
 8003fd4:	f004 fe6c 	bl	8008cb0 <iprintf>
             last_known_value, current_value);
      
      // Check if current value is correct
      if (current_value == expected_value) {
 8003fd8:	79fa      	ldrb	r2, [r7, #7]
 8003fda:	79bb      	ldrb	r3, [r7, #6]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d107      	bne.n	8003ff0 <VPC3_MonitorAndRecoverModeReg2+0x60>
         printf("[VPC3_MonitorModeReg2] ✅ El nuevo valor es correcto\r\n");
 8003fe0:	4815      	ldr	r0, [pc, #84]	; (8004038 <VPC3_MonitorAndRecoverModeReg2+0xa8>)
 8003fe2:	f004 ff01 	bl	8008de8 <puts>
         last_known_value = current_value;
 8003fe6:	4a11      	ldr	r2, [pc, #68]	; (800402c <VPC3_MonitorAndRecoverModeReg2+0x9c>)
 8003fe8:	79fb      	ldrb	r3, [r7, #7]
 8003fea:	7013      	strb	r3, [r2, #0]
         return 0;
 8003fec:	2300      	movs	r3, #0
 8003fee:	e018      	b.n	8004022 <VPC3_MonitorAndRecoverModeReg2+0x92>
      }
      
      // Try to recover
      printf("[VPC3_MonitorModeReg2] 🔧 Intentando recuperar MODE_REG_2...\r\n");
 8003ff0:	4812      	ldr	r0, [pc, #72]	; (800403c <VPC3_MonitorAndRecoverModeReg2+0xac>)
 8003ff2:	f004 fef9 	bl	8008de8 <puts>
      if (VPC3_ForceModeReg2() == 0) {
 8003ff6:	f7ff ff71 	bl	8003edc <VPC3_ForceModeReg2>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d107      	bne.n	8004010 <VPC3_MonitorAndRecoverModeReg2+0x80>
         printf("[VPC3_MonitorModeReg2] ✅ MODE_REG_2 recuperado exitosamente\r\n");
 8004000:	480f      	ldr	r0, [pc, #60]	; (8004040 <VPC3_MonitorAndRecoverModeReg2+0xb0>)
 8004002:	f004 fef1 	bl	8008de8 <puts>
         last_known_value = expected_value;
 8004006:	4a09      	ldr	r2, [pc, #36]	; (800402c <VPC3_MonitorAndRecoverModeReg2+0x9c>)
 8004008:	79bb      	ldrb	r3, [r7, #6]
 800400a:	7013      	strb	r3, [r2, #0]
         return 1; // Recovered
 800400c:	2301      	movs	r3, #1
 800400e:	e008      	b.n	8004022 <VPC3_MonitorAndRecoverModeReg2+0x92>
      } else {
         printf("[VPC3_MonitorModeReg2] ❌ No se pudo recuperar MODE_REG_2\r\n");
 8004010:	480c      	ldr	r0, [pc, #48]	; (8004044 <VPC3_MonitorAndRecoverModeReg2+0xb4>)
 8004012:	f004 fee9 	bl	8008de8 <puts>
         last_known_value = current_value;
 8004016:	4a05      	ldr	r2, [pc, #20]	; (800402c <VPC3_MonitorAndRecoverModeReg2+0x9c>)
 8004018:	79fb      	ldrb	r3, [r7, #7]
 800401a:	7013      	strb	r3, [r2, #0]
         return 2; // Could not recover
 800401c:	2302      	movs	r3, #2
 800401e:	e000      	b.n	8004022 <VPC3_MonitorAndRecoverModeReg2+0x92>
      }
   }
   
   // Value is stable
   return 0;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3708      	adds	r7, #8
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	2000000a 	.word	0x2000000a
 8004030:	0800ea54 	.word	0x0800ea54
 8004034:	0800ea94 	.word	0x0800ea94
 8004038:	0800eaec 	.word	0x0800eaec
 800403c:	0800eb24 	.word	0x0800eb24
 8004040:	0800eb64 	.word	0x0800eb64
 8004044:	0800eba4 	.word	0x0800eba4

08004048 <VPC3_ValidateSegmentPointers>:
  
  \retval VPC3_OK - All segment pointers are valid
  \retval VPC3_ERROR - Corrupted segment pointers were detected and reset
*/
DP_ERROR_CODE VPC3_ValidateSegmentPointers(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
   uint8_t segmentValue;
   VPC3_ADR calculatedAddress;
   DP_ERROR_CODE status = DP_OK;
 800404e:	2301      	movs	r3, #1
 8004050:	71fb      	strb	r3, [r7, #7]
   
   printf("DEBUG: [VPC3_ValidateSegmentPointers] Validating ASIC segment pointers...\r\n");
 8004052:	484c      	ldr	r0, [pc, #304]	; (8004184 <VPC3_ValidateSegmentPointers+0x13c>)
 8004054:	f004 fec8 	bl	8008de8 <puts>
   
   // Validate diagnostic buffer pointers
   segmentValue = pVpc3->abDiagBufPtr[0] VPC3_EXTENSION;
 8004058:	4b4b      	ldr	r3, [pc, #300]	; (8004188 <VPC3_ValidateSegmentPointers+0x140>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004060:	71bb      	strb	r3, [r7, #6]
   calculatedAddress = ((VPC3_ADR)segmentValue << SEG_MULDIV) + ((VPC3_ADR)Vpc3AsicAddress);
 8004062:	79bb      	ldrb	r3, [r7, #6]
 8004064:	b29b      	uxth	r3, r3
 8004066:	00db      	lsls	r3, r3, #3
 8004068:	b29a      	uxth	r2, r3
 800406a:	4b48      	ldr	r3, [pc, #288]	; (800418c <VPC3_ValidateSegmentPointers+0x144>)
 800406c:	881b      	ldrh	r3, [r3, #0]
 800406e:	4413      	add	r3, r2
 8004070:	80bb      	strh	r3, [r7, #4]
   printf("DEBUG: [VPC3_ValidateSegmentPointers] Diag1: Segment=0x%02X, Addr=0x%04X\r\n", 
 8004072:	79bb      	ldrb	r3, [r7, #6]
 8004074:	88ba      	ldrh	r2, [r7, #4]
 8004076:	4619      	mov	r1, r3
 8004078:	4845      	ldr	r0, [pc, #276]	; (8004190 <VPC3_ValidateSegmentPointers+0x148>)
 800407a:	f004 fe19 	bl	8008cb0 <iprintf>
          segmentValue, calculatedAddress);
   
   if (calculatedAddress >= ASIC_RAM_LENGTH) {
 800407e:	88bb      	ldrh	r3, [r7, #4]
 8004080:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004084:	d30e      	bcc.n	80040a4 <VPC3_ValidateSegmentPointers+0x5c>
      printf("ERROR: [VPC3_ValidateSegmentPointers] Corrupted Diag1 segment pointer detected!\r\n");
 8004086:	4843      	ldr	r0, [pc, #268]	; (8004194 <VPC3_ValidateSegmentPointers+0x14c>)
 8004088:	f004 feae 	bl	8008de8 <puts>
      printf("ERROR: Segment=0x%02X, CalculatedAddr=0x%04X exceeds ASIC_RAM_LENGTH=0x%04X\r\n",
 800408c:	79b9      	ldrb	r1, [r7, #6]
 800408e:	88ba      	ldrh	r2, [r7, #4]
 8004090:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004094:	4840      	ldr	r0, [pc, #256]	; (8004198 <VPC3_ValidateSegmentPointers+0x150>)
 8004096:	f004 fe0b 	bl	8008cb0 <iprintf>
             segmentValue, calculatedAddress, ASIC_RAM_LENGTH);
      printf("WARNING: This indicates ASIC internal state corruption. Attempting reset...\r\n");
 800409a:	4840      	ldr	r0, [pc, #256]	; (800419c <VPC3_ValidateSegmentPointers+0x154>)
 800409c:	f004 fea4 	bl	8008de8 <puts>
      status = DP_NOK;
 80040a0:	2302      	movs	r3, #2
 80040a2:	71fb      	strb	r3, [r7, #7]
   }
   
   segmentValue = pVpc3->abDiagBufPtr[1] VPC3_EXTENSION;
 80040a4:	4b38      	ldr	r3, [pc, #224]	; (8004188 <VPC3_ValidateSegmentPointers+0x140>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80040ac:	71bb      	strb	r3, [r7, #6]
   calculatedAddress = ((VPC3_ADR)segmentValue << SEG_MULDIV) + ((VPC3_ADR)Vpc3AsicAddress);
 80040ae:	79bb      	ldrb	r3, [r7, #6]
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	00db      	lsls	r3, r3, #3
 80040b4:	b29a      	uxth	r2, r3
 80040b6:	4b35      	ldr	r3, [pc, #212]	; (800418c <VPC3_ValidateSegmentPointers+0x144>)
 80040b8:	881b      	ldrh	r3, [r3, #0]
 80040ba:	4413      	add	r3, r2
 80040bc:	80bb      	strh	r3, [r7, #4]
   printf("DEBUG: [VPC3_ValidateSegmentPointers] Diag2: Segment=0x%02X, Addr=0x%04X\r\n", 
 80040be:	79bb      	ldrb	r3, [r7, #6]
 80040c0:	88ba      	ldrh	r2, [r7, #4]
 80040c2:	4619      	mov	r1, r3
 80040c4:	4836      	ldr	r0, [pc, #216]	; (80041a0 <VPC3_ValidateSegmentPointers+0x158>)
 80040c6:	f004 fdf3 	bl	8008cb0 <iprintf>
          segmentValue, calculatedAddress);
   
   if (calculatedAddress >= ASIC_RAM_LENGTH) {
 80040ca:	88bb      	ldrh	r3, [r7, #4]
 80040cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040d0:	d30e      	bcc.n	80040f0 <VPC3_ValidateSegmentPointers+0xa8>
      printf("ERROR: [VPC3_ValidateSegmentPointers] Corrupted Diag2 segment pointer detected!\r\n");
 80040d2:	4834      	ldr	r0, [pc, #208]	; (80041a4 <VPC3_ValidateSegmentPointers+0x15c>)
 80040d4:	f004 fe88 	bl	8008de8 <puts>
      printf("ERROR: Segment=0x%02X, CalculatedAddr=0x%04X exceeds ASIC_RAM_LENGTH=0x%04X\r\n",
 80040d8:	79b9      	ldrb	r1, [r7, #6]
 80040da:	88ba      	ldrh	r2, [r7, #4]
 80040dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80040e0:	482d      	ldr	r0, [pc, #180]	; (8004198 <VPC3_ValidateSegmentPointers+0x150>)
 80040e2:	f004 fde5 	bl	8008cb0 <iprintf>
             segmentValue, calculatedAddress, ASIC_RAM_LENGTH);
      printf("WARNING: This indicates ASIC internal state corruption. Attempting reset...\r\n");
 80040e6:	482d      	ldr	r0, [pc, #180]	; (800419c <VPC3_ValidateSegmentPointers+0x154>)
 80040e8:	f004 fe7e 	bl	8008de8 <puts>
      status = DP_NOK;
 80040ec:	2302      	movs	r3, #2
 80040ee:	71fb      	strb	r3, [r7, #7]
   }
   
   // Validate other critical segment pointers
   segmentValue = pVpc3->bCfgBufPtr VPC3_EXTENSION;
 80040f0:	4b25      	ldr	r3, [pc, #148]	; (8004188 <VPC3_ValidateSegmentPointers+0x140>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80040f8:	71bb      	strb	r3, [r7, #6]
   calculatedAddress = ((VPC3_ADR)segmentValue << SEG_MULDIV) + ((VPC3_ADR)Vpc3AsicAddress);
 80040fa:	79bb      	ldrb	r3, [r7, #6]
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	00db      	lsls	r3, r3, #3
 8004100:	b29a      	uxth	r2, r3
 8004102:	4b22      	ldr	r3, [pc, #136]	; (800418c <VPC3_ValidateSegmentPointers+0x144>)
 8004104:	881b      	ldrh	r3, [r3, #0]
 8004106:	4413      	add	r3, r2
 8004108:	80bb      	strh	r3, [r7, #4]
   printf("DEBUG: [VPC3_ValidateSegmentPointers] Cfg: Segment=0x%02X, Addr=0x%04X\r\n", 
 800410a:	79bb      	ldrb	r3, [r7, #6]
 800410c:	88ba      	ldrh	r2, [r7, #4]
 800410e:	4619      	mov	r1, r3
 8004110:	4825      	ldr	r0, [pc, #148]	; (80041a8 <VPC3_ValidateSegmentPointers+0x160>)
 8004112:	f004 fdcd 	bl	8008cb0 <iprintf>
          segmentValue, calculatedAddress);
   
   if (calculatedAddress >= ASIC_RAM_LENGTH) {
 8004116:	88bb      	ldrh	r3, [r7, #4]
 8004118:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800411c:	d304      	bcc.n	8004128 <VPC3_ValidateSegmentPointers+0xe0>
      printf("ERROR: [VPC3_ValidateSegmentPointers] Corrupted Cfg segment pointer detected!\r\n");
 800411e:	4823      	ldr	r0, [pc, #140]	; (80041ac <VPC3_ValidateSegmentPointers+0x164>)
 8004120:	f004 fe62 	bl	8008de8 <puts>
      status = DP_NOK;
 8004124:	2302      	movs	r3, #2
 8004126:	71fb      	strb	r3, [r7, #7]
   }
   
   segmentValue = pVpc3->bPrmBufPtr VPC3_EXTENSION;
 8004128:	4b17      	ldr	r3, [pc, #92]	; (8004188 <VPC3_ValidateSegmentPointers+0x140>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004130:	71bb      	strb	r3, [r7, #6]
   calculatedAddress = ((VPC3_ADR)segmentValue << SEG_MULDIV) + ((VPC3_ADR)Vpc3AsicAddress);
 8004132:	79bb      	ldrb	r3, [r7, #6]
 8004134:	b29b      	uxth	r3, r3
 8004136:	00db      	lsls	r3, r3, #3
 8004138:	b29a      	uxth	r2, r3
 800413a:	4b14      	ldr	r3, [pc, #80]	; (800418c <VPC3_ValidateSegmentPointers+0x144>)
 800413c:	881b      	ldrh	r3, [r3, #0]
 800413e:	4413      	add	r3, r2
 8004140:	80bb      	strh	r3, [r7, #4]
   printf("DEBUG: [VPC3_ValidateSegmentPointers] Prm: Segment=0x%02X, Addr=0x%04X\r\n", 
 8004142:	79bb      	ldrb	r3, [r7, #6]
 8004144:	88ba      	ldrh	r2, [r7, #4]
 8004146:	4619      	mov	r1, r3
 8004148:	4819      	ldr	r0, [pc, #100]	; (80041b0 <VPC3_ValidateSegmentPointers+0x168>)
 800414a:	f004 fdb1 	bl	8008cb0 <iprintf>
          segmentValue, calculatedAddress);
   
   if (calculatedAddress >= ASIC_RAM_LENGTH) {
 800414e:	88bb      	ldrh	r3, [r7, #4]
 8004150:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004154:	d304      	bcc.n	8004160 <VPC3_ValidateSegmentPointers+0x118>
      printf("ERROR: [VPC3_ValidateSegmentPointers] Corrupted Prm segment pointer detected!\r\n");
 8004156:	4817      	ldr	r0, [pc, #92]	; (80041b4 <VPC3_ValidateSegmentPointers+0x16c>)
 8004158:	f004 fe46 	bl	8008de8 <puts>
      status = DP_NOK;
 800415c:	2302      	movs	r3, #2
 800415e:	71fb      	strb	r3, [r7, #7]
   }
   
   if (status == DP_NOK) {
 8004160:	79fb      	ldrb	r3, [r7, #7]
 8004162:	2b02      	cmp	r3, #2
 8004164:	d106      	bne.n	8004174 <VPC3_ValidateSegmentPointers+0x12c>
      printf("WARNING: [VPC3_ValidateSegmentPointers] Corrupted segment pointers detected!\r\n");
 8004166:	4814      	ldr	r0, [pc, #80]	; (80041b8 <VPC3_ValidateSegmentPointers+0x170>)
 8004168:	f004 fe3e 	bl	8008de8 <puts>
      printf("WARNING: This may require ASIC reset or re-initialization.\r\n");
 800416c:	4813      	ldr	r0, [pc, #76]	; (80041bc <VPC3_ValidateSegmentPointers+0x174>)
 800416e:	f004 fe3b 	bl	8008de8 <puts>
 8004172:	e002      	b.n	800417a <VPC3_ValidateSegmentPointers+0x132>
   } else {
      printf("DEBUG: [VPC3_ValidateSegmentPointers] All segment pointers are valid.\r\n");
 8004174:	4812      	ldr	r0, [pc, #72]	; (80041c0 <VPC3_ValidateSegmentPointers+0x178>)
 8004176:	f004 fe37 	bl	8008de8 <puts>
   }
   
   return status;
 800417a:	79fb      	ldrb	r3, [r7, #7]
}
 800417c:	4618      	mov	r0, r3
 800417e:	3708      	adds	r7, #8
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	0800ebe0 	.word	0x0800ebe0
 8004188:	200001b4 	.word	0x200001b4
 800418c:	20000144 	.word	0x20000144
 8004190:	0800ec2c 	.word	0x0800ec2c
 8004194:	0800ec78 	.word	0x0800ec78
 8004198:	0800dd7c 	.word	0x0800dd7c
 800419c:	0800eccc 	.word	0x0800eccc
 80041a0:	0800ed1c 	.word	0x0800ed1c
 80041a4:	0800ed68 	.word	0x0800ed68
 80041a8:	0800edbc 	.word	0x0800edbc
 80041ac:	0800ee08 	.word	0x0800ee08
 80041b0:	0800ee58 	.word	0x0800ee58
 80041b4:	0800eea4 	.word	0x0800eea4
 80041b8:	0800eef4 	.word	0x0800eef4
 80041bc:	0800ef44 	.word	0x0800ef44
 80041c0:	0800ef80 	.word	0x0800ef80

080041c4 <VPC3_DiagnoseMemoryMode>:

/**
 * @brief Diagnóstico del modo de memoria del VPC3+S
 * @return 1 si está en modo 4KB, 0 si está en modo 2KB
 */
uint8_t VPC3_DiagnoseMemoryMode(void) {
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
   printf("DEBUG: [VPC3_DiagnoseMemoryMode] === DIAGNÓSTICO DE MODO DE MEMORIA ===\r\n");
 80041ca:	4824      	ldr	r0, [pc, #144]	; (800425c <VPC3_DiagnoseMemoryMode+0x98>)
 80041cc:	f004 fe0c 	bl	8008de8 <puts>
   
   // Leer el MODE_REG_2 actual
   uint8_t mode_reg2 = VPC3_GetModeReg2Shadow();
 80041d0:	f001 fd38 	bl	8005c44 <VPC3_GetModeReg2Shadow>
 80041d4:	4603      	mov	r3, r0
 80041d6:	70fb      	strb	r3, [r7, #3]
   printf("DEBUG: [VPC3_DiagnoseMemoryMode] MODE_REG_2 leído: 0x%02X (binario: ", mode_reg2);
 80041d8:	78fb      	ldrb	r3, [r7, #3]
 80041da:	4619      	mov	r1, r3
 80041dc:	4820      	ldr	r0, [pc, #128]	; (8004260 <VPC3_DiagnoseMemoryMode+0x9c>)
 80041de:	f004 fd67 	bl	8008cb0 <iprintf>
   
   // Mostrar en binario
   for (int i = 7; i >= 0; i--) {
 80041e2:	2307      	movs	r3, #7
 80041e4:	607b      	str	r3, [r7, #4]
 80041e6:	e012      	b.n	800420e <VPC3_DiagnoseMemoryMode+0x4a>
      printf("%d", (mode_reg2 >> i) & 1);
 80041e8:	78fa      	ldrb	r2, [r7, #3]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	fa42 f303 	asr.w	r3, r2, r3
 80041f0:	f003 0301 	and.w	r3, r3, #1
 80041f4:	4619      	mov	r1, r3
 80041f6:	481b      	ldr	r0, [pc, #108]	; (8004264 <VPC3_DiagnoseMemoryMode+0xa0>)
 80041f8:	f004 fd5a 	bl	8008cb0 <iprintf>
      if (i == 7) printf(" "); // Espacio después del bit 7
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2b07      	cmp	r3, #7
 8004200:	d102      	bne.n	8004208 <VPC3_DiagnoseMemoryMode+0x44>
 8004202:	2020      	movs	r0, #32
 8004204:	f004 fd6c 	bl	8008ce0 <putchar>
   for (int i = 7; i >= 0; i--) {
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	3b01      	subs	r3, #1
 800420c:	607b      	str	r3, [r7, #4]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2b00      	cmp	r3, #0
 8004212:	dae9      	bge.n	80041e8 <VPC3_DiagnoseMemoryMode+0x24>
   }
   printf(")\r\n");
 8004214:	4814      	ldr	r0, [pc, #80]	; (8004268 <VPC3_DiagnoseMemoryMode+0xa4>)
 8004216:	f004 fde7 	bl	8008de8 <puts>
   
   // Extraer el bit 7 (4KB_Mode)
   uint8_t bit7 = (mode_reg2 >> 7) & 1;
 800421a:	78fb      	ldrb	r3, [r7, #3]
 800421c:	09db      	lsrs	r3, r3, #7
 800421e:	70bb      	strb	r3, [r7, #2]
   printf("DEBUG: [VPC3_DiagnoseMemoryMode] Bit 7 (4KB_Mode): %d\r\n", bit7);
 8004220:	78bb      	ldrb	r3, [r7, #2]
 8004222:	4619      	mov	r1, r3
 8004224:	4811      	ldr	r0, [pc, #68]	; (800426c <VPC3_DiagnoseMemoryMode+0xa8>)
 8004226:	f004 fd43 	bl	8008cb0 <iprintf>
   
   if (bit7 == 0) {
 800422a:	78bb      	ldrb	r3, [r7, #2]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d107      	bne.n	8004240 <VPC3_DiagnoseMemoryMode+0x7c>
      printf("DEBUG: [VPC3_DiagnoseMemoryMode] ✅ ASIC está en MODO 2KB de RAM\r\n");
 8004230:	480f      	ldr	r0, [pc, #60]	; (8004270 <VPC3_DiagnoseMemoryMode+0xac>)
 8004232:	f004 fdd9 	bl	8008de8 <puts>
      printf("DEBUG: [VPC3_DiagnoseMemoryMode] ✅ Configuración actual es CORRECTA\r\n");
 8004236:	480f      	ldr	r0, [pc, #60]	; (8004274 <VPC3_DiagnoseMemoryMode+0xb0>)
 8004238:	f004 fdd6 	bl	8008de8 <puts>
      return 0;
 800423c:	2300      	movs	r3, #0
 800423e:	e009      	b.n	8004254 <VPC3_DiagnoseMemoryMode+0x90>
   } else {
      printf("DEBUG: [VPC3_DiagnoseMemoryMode] ⚠️ ASIC está en MODO 4KB de RAM\r\n");
 8004240:	480d      	ldr	r0, [pc, #52]	; (8004278 <VPC3_DiagnoseMemoryMode+0xb4>)
 8004242:	f004 fdd1 	bl	8008de8 <puts>
      printf("DEBUG: [VPC3_DiagnoseMemoryMode] ⚠️ Configuración actual es INCORRECTA\r\n");
 8004246:	480d      	ldr	r0, [pc, #52]	; (800427c <VPC3_DiagnoseMemoryMode+0xb8>)
 8004248:	f004 fdce 	bl	8008de8 <puts>
      printf("DEBUG: [VPC3_DiagnoseMemoryMode] ⚠️ Necesitamos cambiar DP_VPC3_4KB_MODE = 1\r\n");
 800424c:	480c      	ldr	r0, [pc, #48]	; (8004280 <VPC3_DiagnoseMemoryMode+0xbc>)
 800424e:	f004 fdcb 	bl	8008de8 <puts>
      return 1;
 8004252:	2301      	movs	r3, #1
   }
}
 8004254:	4618      	mov	r0, r3
 8004256:	3708      	adds	r7, #8
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	0800efc8 	.word	0x0800efc8
 8004260:	0800f014 	.word	0x0800f014
 8004264:	0800f05c 	.word	0x0800f05c
 8004268:	0800f060 	.word	0x0800f060
 800426c:	0800f064 	.word	0x0800f064
 8004270:	0800f09c 	.word	0x0800f09c
 8004274:	0800f0e0 	.word	0x0800f0e0
 8004278:	0800f128 	.word	0x0800f128
 800427c:	0800f170 	.word	0x0800f170
 8004280:	0800f1c0 	.word	0x0800f1c0

08004284 <VPC3_HardwareReset>:

/**
 * @brief Performs a complete hardware reset of the VPC3+S ASIC
 * @return 0 on success, 1 on failure
 */
uint8_t VPC3_HardwareReset(void) {
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
    printf("DEBUG: [VPC3_HardwareReset] INICIO - Reset completo del hardware VPC3+S\r\n");
 800428a:	481f      	ldr	r0, [pc, #124]	; (8004308 <VPC3_HardwareReset+0x84>)
 800428c:	f004 fdac 	bl	8008de8 <puts>
    
    // 1. Disable interrupts
    DpAppl_DisableInterruptVPC3Channel1();
 8004290:	f7fc ffeb 	bl	800126a <DpAppl_DisableInterruptVPC3Channel1>
    
    // 2. Set CS high to ensure clean state
    HAL_GPIO_WritePin(VPC3_CS_PORT, VPC3_CS_PIN, GPIO_PIN_SET);
 8004294:	2201      	movs	r2, #1
 8004296:	2110      	movs	r1, #16
 8004298:	481c      	ldr	r0, [pc, #112]	; (800430c <VPC3_HardwareReset+0x88>)
 800429a:	f002 fd0d 	bl	8006cb8 <HAL_GPIO_WritePin>
    
    // 3. Perform hardware reset sequence
    printf("DEBUG: [VPC3_HardwareReset] Secuencia de reset hardware...\r\n");
 800429e:	481c      	ldr	r0, [pc, #112]	; (8004310 <VPC3_HardwareReset+0x8c>)
 80042a0:	f004 fda2 	bl	8008de8 <puts>
    
    // Reset pulse: low for at least 1ms
    HAL_GPIO_WritePin(VPC3_RESET_PORT, VPC3_RESET_PIN, GPIO_PIN_RESET);
 80042a4:	2200      	movs	r2, #0
 80042a6:	2110      	movs	r1, #16
 80042a8:	481a      	ldr	r0, [pc, #104]	; (8004314 <VPC3_HardwareReset+0x90>)
 80042aa:	f002 fd05 	bl	8006cb8 <HAL_GPIO_WritePin>
    HAL_Delay(10); // 10ms reset pulse
 80042ae:	200a      	movs	r0, #10
 80042b0:	f002 f984 	bl	80065bc <HAL_Delay>
    
    // Release reset
    HAL_GPIO_WritePin(VPC3_RESET_PORT, VPC3_RESET_PIN, GPIO_PIN_SET);
 80042b4:	2201      	movs	r2, #1
 80042b6:	2110      	movs	r1, #16
 80042b8:	4816      	ldr	r0, [pc, #88]	; (8004314 <VPC3_HardwareReset+0x90>)
 80042ba:	f002 fcfd 	bl	8006cb8 <HAL_GPIO_WritePin>
    HAL_Delay(50); // Wait 50ms for ASIC to stabilize
 80042be:	2032      	movs	r0, #50	; 0x32
 80042c0:	f002 f97c 	bl	80065bc <HAL_Delay>
    
    // 4. Verify ASIC is responding
    printf("DEBUG: [VPC3_HardwareReset] Verificando respuesta del ASIC...\r\n");
 80042c4:	4814      	ldr	r0, [pc, #80]	; (8004318 <VPC3_HardwareReset+0x94>)
 80042c6:	f004 fd8f 	bl	8008de8 <puts>
    
    // Try to read STATUS_L register
    uint8_t status_l = Vpc3Read(0x04);
 80042ca:	2004      	movs	r0, #4
 80042cc:	f001 fe10 	bl	8005ef0 <Vpc3Read>
 80042d0:	4603      	mov	r3, r0
 80042d2:	71fb      	strb	r3, [r7, #7]
    printf("DEBUG: [VPC3_HardwareReset] STATUS_L después del reset: 0x%02X\r\n", status_l);
 80042d4:	79fb      	ldrb	r3, [r7, #7]
 80042d6:	4619      	mov	r1, r3
 80042d8:	4810      	ldr	r0, [pc, #64]	; (800431c <VPC3_HardwareReset+0x98>)
 80042da:	f004 fce9 	bl	8008cb0 <iprintf>
    
    // 5. Check if ASIC is in a known state
    if (status_l == 0xFF) {
 80042de:	79fb      	ldrb	r3, [r7, #7]
 80042e0:	2bff      	cmp	r3, #255	; 0xff
 80042e2:	d104      	bne.n	80042ee <VPC3_HardwareReset+0x6a>
        printf("DEBUG: [VPC3_HardwareReset] ⚠️ ASIC no responde (STATUS_L = 0xFF)\r\n");
 80042e4:	480e      	ldr	r0, [pc, #56]	; (8004320 <VPC3_HardwareReset+0x9c>)
 80042e6:	f004 fd7f 	bl	8008de8 <puts>
        return 1; // Failure
 80042ea:	2301      	movs	r3, #1
 80042ec:	e008      	b.n	8004300 <VPC3_HardwareReset+0x7c>
    }
    
    printf("DEBUG: [VPC3_HardwareReset] ✅ ASIC responde correctamente\r\n");
 80042ee:	480d      	ldr	r0, [pc, #52]	; (8004324 <VPC3_HardwareReset+0xa0>)
 80042f0:	f004 fd7a 	bl	8008de8 <puts>
    
    // 6. Re-enable interrupts
    DpAppl_EnableInterruptVPC3Channel1();
 80042f4:	f7fc ffc0 	bl	8001278 <DpAppl_EnableInterruptVPC3Channel1>
    
    printf("DEBUG: [VPC3_HardwareReset] FIN - Reset completado\r\n");
 80042f8:	480b      	ldr	r0, [pc, #44]	; (8004328 <VPC3_HardwareReset+0xa4>)
 80042fa:	f004 fd75 	bl	8008de8 <puts>
    return 0; // Success
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	3708      	adds	r7, #8
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	0800f214 	.word	0x0800f214
 800430c:	40020000 	.word	0x40020000
 8004310:	0800f260 	.word	0x0800f260
 8004314:	40020400 	.word	0x40020400
 8004318:	0800f29c 	.word	0x0800f29c
 800431c:	0800f2dc 	.word	0x0800f2dc
 8004320:	0800f320 	.word	0x0800f320
 8004324:	0800f368 	.word	0x0800f368
 8004328:	0800f3a8 	.word	0x0800f3a8

0800432c <VPC3_Poll>:
/*---------------------------------------------------------------------------*/
/* function: VPC3_Poll                                                       */
/*---------------------------------------------------------------------------*/
#if VPC3_SERIAL_MODE
uint16_t VPC3_Poll( void )
{
 800432c:	b590      	push	{r4, r7, lr}
 800432e:	b089      	sub	sp, #36	; 0x24
 8004330:	af00      	add	r7, sp, #0

   #if DP_INTERRUPT_MASK_8BIT == 0

      #if VPC3_SERIAL_MODE

         pDpSystem->wPollInterruptEvent = MakeWord( Vpc3Read( bVpc3RwIntReqReg_H ), Vpc3Read( bVpc3RwIntReqReg_L ) );
 8004332:	4bba      	ldr	r3, [pc, #744]	; (800461c <VPC3_Poll+0x2f0>)
 8004334:	881b      	ldrh	r3, [r3, #0]
 8004336:	3301      	adds	r3, #1
 8004338:	b29b      	uxth	r3, r3
 800433a:	4618      	mov	r0, r3
 800433c:	f001 fdd8 	bl	8005ef0 <Vpc3Read>
 8004340:	4603      	mov	r3, r0
 8004342:	021b      	lsls	r3, r3, #8
 8004344:	b21c      	sxth	r4, r3
 8004346:	4bb5      	ldr	r3, [pc, #724]	; (800461c <VPC3_Poll+0x2f0>)
 8004348:	881b      	ldrh	r3, [r3, #0]
 800434a:	4618      	mov	r0, r3
 800434c:	f001 fdd0 	bl	8005ef0 <Vpc3Read>
 8004350:	4603      	mov	r3, r0
 8004352:	b21b      	sxth	r3, r3
 8004354:	4323      	orrs	r3, r4
 8004356:	b21a      	sxth	r2, r3
 8004358:	4bb1      	ldr	r3, [pc, #708]	; (8004620 <VPC3_Poll+0x2f4>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	b292      	uxth	r2, r2
 800435e:	f8a3 2005 	strh.w	r2, [r3, #5]

      #endif /* #if VPC3_SERIAL_MODE */

      // Log para verificar la máscara de software
      printf("DEBUG: [VPC3_Poll] Eventos hardware leidos: 0x%04X, Mascara de software aplicada: 0x%04X\n",
             pDpSystem->wPollInterruptEvent, pDpSystem->wPollInterruptMask);
 8004362:	4baf      	ldr	r3, [pc, #700]	; (8004620 <VPC3_Poll+0x2f4>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800436a:	b29b      	uxth	r3, r3
      printf("DEBUG: [VPC3_Poll] Eventos hardware leidos: 0x%04X, Mascara de software aplicada: 0x%04X\n",
 800436c:	4619      	mov	r1, r3
             pDpSystem->wPollInterruptEvent, pDpSystem->wPollInterruptMask);
 800436e:	4bac      	ldr	r3, [pc, #688]	; (8004620 <VPC3_Poll+0x2f4>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8004376:	b29b      	uxth	r3, r3
      printf("DEBUG: [VPC3_Poll] Eventos hardware leidos: 0x%04X, Mascara de software aplicada: 0x%04X\n",
 8004378:	461a      	mov	r2, r3
 800437a:	48aa      	ldr	r0, [pc, #680]	; (8004624 <VPC3_Poll+0x2f8>)
 800437c:	f004 fc98 	bl	8008cb0 <iprintf>
      
      // Decodificar eventos específicos para análisis
      uint16_t events = pDpSystem->wPollInterruptEvent;
 8004380:	4ba7      	ldr	r3, [pc, #668]	; (8004620 <VPC3_Poll+0x2f4>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	795a      	ldrb	r2, [r3, #5]
 8004386:	799b      	ldrb	r3, [r3, #6]
 8004388:	021b      	lsls	r3, r3, #8
 800438a:	4313      	orrs	r3, r2
 800438c:	82fb      	strh	r3, [r7, #22]
      if (events & 0x0001) printf("DEBUG: [VPC3_Poll] - MAC_RESET/CLOCK_SYNC (0x0001)\r\n");
 800438e:	8afb      	ldrh	r3, [r7, #22]
 8004390:	f003 0301 	and.w	r3, r3, #1
 8004394:	2b00      	cmp	r3, #0
 8004396:	d002      	beq.n	800439e <VPC3_Poll+0x72>
 8004398:	48a3      	ldr	r0, [pc, #652]	; (8004628 <VPC3_Poll+0x2fc>)
 800439a:	f004 fd25 	bl	8008de8 <puts>
      if (events & 0x0002) printf("DEBUG: [VPC3_Poll] - GO_LEAVE_DATA_EX (0x0002)\r\n");
 800439e:	8afb      	ldrh	r3, [r7, #22]
 80043a0:	f003 0302 	and.w	r3, r3, #2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d002      	beq.n	80043ae <VPC3_Poll+0x82>
 80043a8:	48a0      	ldr	r0, [pc, #640]	; (800462c <VPC3_Poll+0x300>)
 80043aa:	f004 fd1d 	bl	8008de8 <puts>
      if (events & 0x0004) printf("DEBUG: [VPC3_Poll] - BAUDRATE_DETECT (0x0004)\r\n");
 80043ae:	8afb      	ldrh	r3, [r7, #22]
 80043b0:	f003 0304 	and.w	r3, r3, #4
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d002      	beq.n	80043be <VPC3_Poll+0x92>
 80043b8:	489d      	ldr	r0, [pc, #628]	; (8004630 <VPC3_Poll+0x304>)
 80043ba:	f004 fd15 	bl	8008de8 <puts>
      if (events & 0x0008) printf("DEBUG: [VPC3_Poll] - WD_DP_MODE_TIMEOUT (0x0008)\r\n");
 80043be:	8afb      	ldrh	r3, [r7, #22]
 80043c0:	f003 0308 	and.w	r3, r3, #8
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d002      	beq.n	80043ce <VPC3_Poll+0xa2>
 80043c8:	489a      	ldr	r0, [pc, #616]	; (8004634 <VPC3_Poll+0x308>)
 80043ca:	f004 fd0d 	bl	8008de8 <puts>
      if (events & 0x0010) printf("DEBUG: [VPC3_Poll] - USER_TIMER_CLOCK (0x0010)\r\n");
 80043ce:	8afb      	ldrh	r3, [r7, #22]
 80043d0:	f003 0310 	and.w	r3, r3, #16
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d002      	beq.n	80043de <VPC3_Poll+0xb2>
 80043d8:	4897      	ldr	r0, [pc, #604]	; (8004638 <VPC3_Poll+0x30c>)
 80043da:	f004 fd05 	bl	8008de8 <puts>
      if (events & 0x0020) printf("DEBUG: [VPC3_Poll] - DXB_LINK_ERROR (0x0020)\r\n");
 80043de:	8afb      	ldrh	r3, [r7, #22]
 80043e0:	f003 0320 	and.w	r3, r3, #32
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d002      	beq.n	80043ee <VPC3_Poll+0xc2>
 80043e8:	4894      	ldr	r0, [pc, #592]	; (800463c <VPC3_Poll+0x310>)
 80043ea:	f004 fcfd 	bl	8008de8 <puts>
      if (events & 0x0040) printf("DEBUG: [VPC3_Poll] - NEW_EXT_PRM_DATA (0x0040)\r\n");
 80043ee:	8afb      	ldrh	r3, [r7, #22]
 80043f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d002      	beq.n	80043fe <VPC3_Poll+0xd2>
 80043f8:	4891      	ldr	r0, [pc, #580]	; (8004640 <VPC3_Poll+0x314>)
 80043fa:	f004 fcf5 	bl	8008de8 <puts>
      if (events & 0x0080) printf("DEBUG: [VPC3_Poll] - DXB_OUT (0x0080)\r\n");
 80043fe:	8afb      	ldrh	r3, [r7, #22]
 8004400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004404:	2b00      	cmp	r3, #0
 8004406:	d002      	beq.n	800440e <VPC3_Poll+0xe2>
 8004408:	488e      	ldr	r0, [pc, #568]	; (8004644 <VPC3_Poll+0x318>)
 800440a:	f004 fced 	bl	8008de8 <puts>
      if (events & 0x0100) printf("DEBUG: [VPC3_Poll] - NEW_GC_COMMAND (0x0100)\r\n");
 800440e:	8afb      	ldrh	r3, [r7, #22]
 8004410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004414:	2b00      	cmp	r3, #0
 8004416:	d002      	beq.n	800441e <VPC3_Poll+0xf2>
 8004418:	488b      	ldr	r0, [pc, #556]	; (8004648 <VPC3_Poll+0x31c>)
 800441a:	f004 fce5 	bl	8008de8 <puts>
      if (events & 0x0200) printf("DEBUG: [VPC3_Poll] - NEW_SSA_DATA (0x0200)\r\n");
 800441e:	8afb      	ldrh	r3, [r7, #22]
 8004420:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004424:	2b00      	cmp	r3, #0
 8004426:	d002      	beq.n	800442e <VPC3_Poll+0x102>
 8004428:	4888      	ldr	r0, [pc, #544]	; (800464c <VPC3_Poll+0x320>)
 800442a:	f004 fcdd 	bl	8008de8 <puts>
      if (events & 0x0400) printf("DEBUG: [VPC3_Poll] - NEW_CFG_DATA (0x0400)\r\n");
 800442e:	8afb      	ldrh	r3, [r7, #22]
 8004430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004434:	2b00      	cmp	r3, #0
 8004436:	d002      	beq.n	800443e <VPC3_Poll+0x112>
 8004438:	4885      	ldr	r0, [pc, #532]	; (8004650 <VPC3_Poll+0x324>)
 800443a:	f004 fcd5 	bl	8008de8 <puts>
      if (events & 0x0800) printf("DEBUG: [VPC3_Poll] - NEW_PRM_DATA (0x0800)\r\n");
 800443e:	8afb      	ldrh	r3, [r7, #22]
 8004440:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004444:	2b00      	cmp	r3, #0
 8004446:	d002      	beq.n	800444e <VPC3_Poll+0x122>
 8004448:	4882      	ldr	r0, [pc, #520]	; (8004654 <VPC3_Poll+0x328>)
 800444a:	f004 fccd 	bl	8008de8 <puts>
      if (events & 0x1000) printf("DEBUG: [VPC3_Poll] - DIAG_BUFFER_CHANGED (0x1000)\r\n");
 800444e:	8afb      	ldrh	r3, [r7, #22]
 8004450:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d002      	beq.n	800445e <VPC3_Poll+0x132>
 8004458:	487f      	ldr	r0, [pc, #508]	; (8004658 <VPC3_Poll+0x32c>)
 800445a:	f004 fcc5 	bl	8008de8 <puts>
      if (events & 0x2000) printf("DEBUG: [VPC3_Poll] - DX_OUT (0x2000)\r\n");
 800445e:	8afb      	ldrh	r3, [r7, #22]
 8004460:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d002      	beq.n	800446e <VPC3_Poll+0x142>
 8004468:	487c      	ldr	r0, [pc, #496]	; (800465c <VPC3_Poll+0x330>)
 800446a:	f004 fcbd 	bl	8008de8 <puts>
      if (events & 0x4000) printf("DEBUG: [VPC3_Poll] - POLL_END_IND (0x4000)\r\n");
 800446e:	8afb      	ldrh	r3, [r7, #22]
 8004470:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d002      	beq.n	800447e <VPC3_Poll+0x152>
 8004478:	4879      	ldr	r0, [pc, #484]	; (8004660 <VPC3_Poll+0x334>)
 800447a:	f004 fcb5 	bl	8008de8 <puts>
      if (events & 0x8000) printf("DEBUG: [VPC3_Poll] - FDL_IND (0x8000)\r\n");
 800447e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004482:	2b00      	cmp	r3, #0
 8004484:	da02      	bge.n	800448c <VPC3_Poll+0x160>
 8004486:	4877      	ldr	r0, [pc, #476]	; (8004664 <VPC3_Poll+0x338>)
 8004488:	f004 fcae 	bl	8008de8 <puts>

      pDpSystem->wPollInterruptEvent &= pDpSystem->wPollInterruptMask;
 800448c:	4b64      	ldr	r3, [pc, #400]	; (8004620 <VPC3_Poll+0x2f4>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8004494:	b299      	uxth	r1, r3
 8004496:	4b62      	ldr	r3, [pc, #392]	; (8004620 <VPC3_Poll+0x2f4>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800449e:	b29a      	uxth	r2, r3
 80044a0:	4b5f      	ldr	r3, [pc, #380]	; (8004620 <VPC3_Poll+0x2f4>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	400a      	ands	r2, r1
 80044a6:	b292      	uxth	r2, r2
 80044a8:	f8a3 2005 	strh.w	r2, [r3, #5]

      if( pDpSystem->wPollInterruptEvent > 0 )
 80044ac:	4b5c      	ldr	r3, [pc, #368]	; (8004620 <VPC3_Poll+0x2f4>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	f000 84bb 	beq.w	8004e32 <VPC3_Poll+0xb06>

         #if( DP_TIMESTAMP == 0 )
            /*---------------------------------------------------------------*/
            /* IND_MAC_RESET                                                 */
            /*---------------------------------------------------------------*/
            if( VPC3_POLL_IND_MAC_RESET() )
 80044bc:	4b58      	ldr	r3, [pc, #352]	; (8004620 <VPC3_Poll+0x2f4>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d001      	beq.n	80044d2 <VPC3_Poll+0x1a6>
            {
               DpAppl_MacReset();
 80044ce:	f7fc fde1 	bl	8001094 <DpAppl_MacReset>
         #endif /* #if( DP_TIMESTAMP == 0 ) */

         /*------------------------------------------------------------------*/
         /* IND_DIAG_BUF_CHANGED                                             */
         /*------------------------------------------------------------------*/
         if( VPC3_POLL_IND_DIAG_BUFFER_CHANGED() )
 80044d2:	4b53      	ldr	r3, [pc, #332]	; (8004620 <VPC3_Poll+0x2f4>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80044da:	b29b      	uxth	r3, r3
 80044dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f000 8086 	beq.w	80045f2 <VPC3_Poll+0x2c6>
         {
            printf("🚨 [dp_isr] === IND_DIAG_BUFFER_CHANGED DETECTADO ===\r\n");
 80044e6:	4860      	ldr	r0, [pc, #384]	; (8004668 <VPC3_Poll+0x33c>)
 80044e8:	f004 fc7e 	bl	8008de8 <puts>
            printf("🚨 [dp_isr] TIMESTAMP: %lu ms\r\n", HAL_GetTick());
 80044ec:	f002 f85a 	bl	80065a4 <HAL_GetTick>
 80044f0:	4603      	mov	r3, r0
 80044f2:	4619      	mov	r1, r3
 80044f4:	485d      	ldr	r0, [pc, #372]	; (800466c <VPC3_Poll+0x340>)
 80044f6:	f004 fbdb 	bl	8008cb0 <iprintf>
            printf("🚨 [dp_isr] STATUS_L antes del evento: 0x%02X\r\n", VPC3_GET_STATUS_L());
 80044fa:	4b48      	ldr	r3, [pc, #288]	; (800461c <VPC3_Poll+0x2f0>)
 80044fc:	881b      	ldrh	r3, [r3, #0]
 80044fe:	3304      	adds	r3, #4
 8004500:	b29b      	uxth	r3, r3
 8004502:	4618      	mov	r0, r3
 8004504:	f001 fcf4 	bl	8005ef0 <Vpc3Read>
 8004508:	4603      	mov	r3, r0
 800450a:	4619      	mov	r1, r3
 800450c:	4858      	ldr	r0, [pc, #352]	; (8004670 <VPC3_Poll+0x344>)
 800450e:	f004 fbcf 	bl	8008cb0 <iprintf>
            printf("🚨 [dp_isr] STATUS_H antes del evento: 0x%02X\r\n", VPC3_GET_STATUS_H());
 8004512:	4b42      	ldr	r3, [pc, #264]	; (800461c <VPC3_Poll+0x2f0>)
 8004514:	881b      	ldrh	r3, [r3, #0]
 8004516:	3305      	adds	r3, #5
 8004518:	b29b      	uxth	r3, r3
 800451a:	4618      	mov	r0, r3
 800451c:	f001 fce8 	bl	8005ef0 <Vpc3Read>
 8004520:	4603      	mov	r3, r0
 8004522:	4619      	mov	r1, r3
 8004524:	4853      	ldr	r0, [pc, #332]	; (8004674 <VPC3_Poll+0x348>)
 8004526:	f004 fbc3 	bl	8008cb0 <iprintf>
            printf("🚨 [dp_isr] DP_STATE antes del evento: 0x%02X\r\n", VPC3_GET_DP_STATE());
 800452a:	4b3c      	ldr	r3, [pc, #240]	; (800461c <VPC3_Poll+0x2f0>)
 800452c:	881b      	ldrh	r3, [r3, #0]
 800452e:	3304      	adds	r3, #4
 8004530:	b29b      	uxth	r3, r3
 8004532:	4618      	mov	r0, r3
 8004534:	f001 fcdc 	bl	8005ef0 <Vpc3Read>
 8004538:	4603      	mov	r3, r0
 800453a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800453e:	4619      	mov	r1, r3
 8004540:	484d      	ldr	r0, [pc, #308]	; (8004678 <VPC3_Poll+0x34c>)
 8004542:	f004 fbb5 	bl	8008cb0 <iprintf>
            printf("🚨 [dp_isr] MODE_REG_2 antes del evento: 0x%02X\r\n", VPC3_GetModeReg2Shadow());
 8004546:	f001 fb7d 	bl	8005c44 <VPC3_GetModeReg2Shadow>
 800454a:	4603      	mov	r3, r0
 800454c:	4619      	mov	r1, r3
 800454e:	484b      	ldr	r0, [pc, #300]	; (800467c <VPC3_Poll+0x350>)
 8004550:	f004 fbae 	bl	8008cb0 <iprintf>
            
            // Análisis del buffer de diagnóstico
            uint8_t diag_buffer_sm = Vpc3Read(0x0E); // Diag buffer state machine
 8004554:	200e      	movs	r0, #14
 8004556:	f001 fccb 	bl	8005ef0 <Vpc3Read>
 800455a:	4603      	mov	r3, r0
 800455c:	757b      	strb	r3, [r7, #21]
            printf("🚨 [dp_isr] Diag Buffer State Machine: 0x%02X\r\n", diag_buffer_sm);
 800455e:	7d7b      	ldrb	r3, [r7, #21]
 8004560:	4619      	mov	r1, r3
 8004562:	4847      	ldr	r0, [pc, #284]	; (8004680 <VPC3_Poll+0x354>)
 8004564:	f004 fba4 	bl	8008cb0 <iprintf>
            
            printf("🚨 [dp_isr] Buffer de diagnóstico disponible\r\n");
 8004568:	4846      	ldr	r0, [pc, #280]	; (8004684 <VPC3_Poll+0x358>)
 800456a:	f004 fc3d 	bl	8008de8 <puts>
            
            printf("🚨 [dp_isr] Llamando DpDiag_IsrDiagBufferChanged...\r\n");
 800456e:	4846      	ldr	r0, [pc, #280]	; (8004688 <VPC3_Poll+0x35c>)
 8004570:	f004 fc3a 	bl	8008de8 <puts>
            DpDiag_IsrDiagBufferChanged();
 8004574:	f7fd fcbc 	bl	8001ef0 <DpDiag_IsrDiagBufferChanged>

            VPC3_POLL_CON_IND_DIAG_BUFFER_CHANGED();
 8004578:	4b28      	ldr	r3, [pc, #160]	; (800461c <VPC3_Poll+0x2f0>)
 800457a:	881b      	ldrh	r3, [r3, #0]
 800457c:	3303      	adds	r3, #3
 800457e:	b29b      	uxth	r3, r3
 8004580:	2110      	movs	r1, #16
 8004582:	4618      	mov	r0, r3
 8004584:	f001 fc04 	bl	8005d90 <Vpc3Write>
 8004588:	4b25      	ldr	r3, [pc, #148]	; (8004620 <VPC3_Poll+0x2f4>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8004590:	b29a      	uxth	r2, r3
 8004592:	4b23      	ldr	r3, [pc, #140]	; (8004620 <VPC3_Poll+0x2f4>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800459a:	b292      	uxth	r2, r2
 800459c:	f8a3 2005 	strh.w	r2, [r3, #5]
            
            printf("🚨 [dp_isr] STATUS_L después del evento: 0x%02X\r\n", VPC3_GET_STATUS_L());
 80045a0:	4b1e      	ldr	r3, [pc, #120]	; (800461c <VPC3_Poll+0x2f0>)
 80045a2:	881b      	ldrh	r3, [r3, #0]
 80045a4:	3304      	adds	r3, #4
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	4618      	mov	r0, r3
 80045aa:	f001 fca1 	bl	8005ef0 <Vpc3Read>
 80045ae:	4603      	mov	r3, r0
 80045b0:	4619      	mov	r1, r3
 80045b2:	4836      	ldr	r0, [pc, #216]	; (800468c <VPC3_Poll+0x360>)
 80045b4:	f004 fb7c 	bl	8008cb0 <iprintf>
            printf("🚨 [dp_isr] STATUS_H después del evento: 0x%02X\r\n", VPC3_GET_STATUS_H());
 80045b8:	4b18      	ldr	r3, [pc, #96]	; (800461c <VPC3_Poll+0x2f0>)
 80045ba:	881b      	ldrh	r3, [r3, #0]
 80045bc:	3305      	adds	r3, #5
 80045be:	b29b      	uxth	r3, r3
 80045c0:	4618      	mov	r0, r3
 80045c2:	f001 fc95 	bl	8005ef0 <Vpc3Read>
 80045c6:	4603      	mov	r3, r0
 80045c8:	4619      	mov	r1, r3
 80045ca:	4831      	ldr	r0, [pc, #196]	; (8004690 <VPC3_Poll+0x364>)
 80045cc:	f004 fb70 	bl	8008cb0 <iprintf>
            printf("🚨 [dp_isr] DP_STATE después del evento: 0x%02X\r\n", VPC3_GET_DP_STATE());
 80045d0:	4b12      	ldr	r3, [pc, #72]	; (800461c <VPC3_Poll+0x2f0>)
 80045d2:	881b      	ldrh	r3, [r3, #0]
 80045d4:	3304      	adds	r3, #4
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	4618      	mov	r0, r3
 80045da:	f001 fc89 	bl	8005ef0 <Vpc3Read>
 80045de:	4603      	mov	r3, r0
 80045e0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80045e4:	4619      	mov	r1, r3
 80045e6:	482b      	ldr	r0, [pc, #172]	; (8004694 <VPC3_Poll+0x368>)
 80045e8:	f004 fb62 	bl	8008cb0 <iprintf>
            printf("🚨 [dp_isr] === FIN IND_DIAG_BUFFER_CHANGED ===\r\n");
 80045ec:	482a      	ldr	r0, [pc, #168]	; (8004698 <VPC3_Poll+0x36c>)
 80045ee:	f004 fbfb 	bl	8008de8 <puts>
         } /* if( VPC3_POLL_IND_DIAG_BUFFER_CHANGED() ) */

         /*------------------------------------------------------------------*/
         /* IND_NEW_PRM_DATA                                                 */
         /*------------------------------------------------------------------*/
         if( VPC3_POLL_IND_NEW_PRM_DATA() )
 80045f2:	4b0b      	ldr	r3, [pc, #44]	; (8004620 <VPC3_Poll+0x2f4>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004600:	2b00      	cmp	r3, #0
 8004602:	f000 80ed 	beq.w	80047e0 <VPC3_Poll+0x4b4>
         {
            printf("🎯 [dp_isr] === PRM RECIBIDO DEL MASTER ===\r\n");
 8004606:	4825      	ldr	r0, [pc, #148]	; (800469c <VPC3_Poll+0x370>)
 8004608:	f004 fbee 	bl	8008de8 <puts>
            printf("🎯 [dp_isr] TIMESTAMP: %lu ms\r\n", HAL_GetTick());
 800460c:	f001 ffca 	bl	80065a4 <HAL_GetTick>
 8004610:	4603      	mov	r3, r0
 8004612:	4619      	mov	r1, r3
 8004614:	4822      	ldr	r0, [pc, #136]	; (80046a0 <VPC3_Poll+0x374>)
 8004616:	f004 fb4b 	bl	8008cb0 <iprintf>
 800461a:	e043      	b.n	80046a4 <VPC3_Poll+0x378>
 800461c:	20000144 	.word	0x20000144
 8004620:	20000000 	.word	0x20000000
 8004624:	0800f494 	.word	0x0800f494
 8004628:	0800f4f0 	.word	0x0800f4f0
 800462c:	0800f524 	.word	0x0800f524
 8004630:	0800f554 	.word	0x0800f554
 8004634:	0800f584 	.word	0x0800f584
 8004638:	0800f5b8 	.word	0x0800f5b8
 800463c:	0800f5e8 	.word	0x0800f5e8
 8004640:	0800f618 	.word	0x0800f618
 8004644:	0800f648 	.word	0x0800f648
 8004648:	0800f670 	.word	0x0800f670
 800464c:	0800f6a0 	.word	0x0800f6a0
 8004650:	0800f6cc 	.word	0x0800f6cc
 8004654:	0800f6f8 	.word	0x0800f6f8
 8004658:	0800f724 	.word	0x0800f724
 800465c:	0800f758 	.word	0x0800f758
 8004660:	0800f780 	.word	0x0800f780
 8004664:	0800f7ac 	.word	0x0800f7ac
 8004668:	0800f7d4 	.word	0x0800f7d4
 800466c:	0800f810 	.word	0x0800f810
 8004670:	0800f834 	.word	0x0800f834
 8004674:	0800f868 	.word	0x0800f868
 8004678:	0800f89c 	.word	0x0800f89c
 800467c:	0800f8d0 	.word	0x0800f8d0
 8004680:	0800f904 	.word	0x0800f904
 8004684:	0800f938 	.word	0x0800f938
 8004688:	0800f96c 	.word	0x0800f96c
 800468c:	0800f9a4 	.word	0x0800f9a4
 8004690:	0800f9dc 	.word	0x0800f9dc
 8004694:	0800fa14 	.word	0x0800fa14
 8004698:	0800fa4c 	.word	0x0800fa4c
 800469c:	0800fa80 	.word	0x0800fa80
 80046a0:	0800fab0 	.word	0x0800fab0
            printf("🎯 [dp_isr] STATUS_L antes de procesar PRM: 0x%02X\r\n", VPC3_GET_STATUS_L());
 80046a4:	4ba4      	ldr	r3, [pc, #656]	; (8004938 <VPC3_Poll+0x60c>)
 80046a6:	881b      	ldrh	r3, [r3, #0]
 80046a8:	3304      	adds	r3, #4
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	4618      	mov	r0, r3
 80046ae:	f001 fc1f 	bl	8005ef0 <Vpc3Read>
 80046b2:	4603      	mov	r3, r0
 80046b4:	4619      	mov	r1, r3
 80046b6:	48a1      	ldr	r0, [pc, #644]	; (800493c <VPC3_Poll+0x610>)
 80046b8:	f004 fafa 	bl	8008cb0 <iprintf>
            printf("🎯 [dp_isr] STATUS_H antes de procesar PRM: 0x%02X\r\n", VPC3_GET_STATUS_H());
 80046bc:	4b9e      	ldr	r3, [pc, #632]	; (8004938 <VPC3_Poll+0x60c>)
 80046be:	881b      	ldrh	r3, [r3, #0]
 80046c0:	3305      	adds	r3, #5
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	4618      	mov	r0, r3
 80046c6:	f001 fc13 	bl	8005ef0 <Vpc3Read>
 80046ca:	4603      	mov	r3, r0
 80046cc:	4619      	mov	r1, r3
 80046ce:	489c      	ldr	r0, [pc, #624]	; (8004940 <VPC3_Poll+0x614>)
 80046d0:	f004 faee 	bl	8008cb0 <iprintf>
            
            uint8_t bPrmLength;

            #if DP_INTERRUPT_MASK_8BIT == 0
               VPC3_POLL_CON_IND_NEW_PRM_DATA();
 80046d4:	4b9b      	ldr	r3, [pc, #620]	; (8004944 <VPC3_Poll+0x618>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80046dc:	b29a      	uxth	r2, r3
 80046de:	4b99      	ldr	r3, [pc, #612]	; (8004944 <VPC3_Poll+0x618>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046e6:	b292      	uxth	r2, r2
 80046e8:	f8a3 2005 	strh.w	r2, [r3, #5]
            #endif /* #if DP_INTERRUPT_MASK_8BIT == 0 */

            bResult = VPC3_PRM_FINISHED;
 80046ec:	2300      	movs	r3, #0
 80046ee:	70fb      	strb	r3, [r7, #3]
            do
            {
                uint8_t *prmBufPtr;
                VPC3_ADR prmAddr;
                
                bPrmLength = VPC3_GET_PRM_LEN();
 80046f0:	4b91      	ldr	r3, [pc, #580]	; (8004938 <VPC3_Poll+0x60c>)
 80046f2:	881b      	ldrh	r3, [r3, #0]
 80046f4:	332f      	adds	r3, #47	; 0x2f
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	4618      	mov	r0, r3
 80046fa:	f001 fbf9 	bl	8005ef0 <Vpc3Read>
 80046fe:	4603      	mov	r3, r0
 8004700:	753b      	strb	r3, [r7, #20]

                printf("DEBUG: [dp_isr] PRM Length: %d bytes\r\n", bPrmLength);
 8004702:	7d3b      	ldrb	r3, [r7, #20]
 8004704:	4619      	mov	r1, r3
 8004706:	4890      	ldr	r0, [pc, #576]	; (8004948 <VPC3_Poll+0x61c>)
 8004708:	f004 fad2 	bl	8008cb0 <iprintf>
                
                // --- VALIDACIÓN CRÍTICA: Verificar puntero PRM antes de leer ---
                prmBufPtr = VPC3_GET_PRM_BUF_PTR();
 800470c:	4b8a      	ldr	r3, [pc, #552]	; (8004938 <VPC3_Poll+0x60c>)
 800470e:	881b      	ldrh	r3, [r3, #0]
 8004710:	3330      	adds	r3, #48	; 0x30
 8004712:	b29b      	uxth	r3, r3
 8004714:	4618      	mov	r0, r3
 8004716:	f001 fbeb 	bl	8005ef0 <Vpc3Read>
 800471a:	4603      	mov	r3, r0
 800471c:	00db      	lsls	r3, r3, #3
 800471e:	4a86      	ldr	r2, [pc, #536]	; (8004938 <VPC3_Poll+0x60c>)
 8004720:	8812      	ldrh	r2, [r2, #0]
 8004722:	4413      	add	r3, r2
 8004724:	613b      	str	r3, [r7, #16]
                prmAddr = (VPC3_ADR)prmBufPtr;
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	81fb      	strh	r3, [r7, #14]
                
                printf("DEBUG: [dp_isr] PRM Buffer Ptr: 0x%08X, Addr: 0x%04X\r\n", (unsigned int)prmBufPtr, prmAddr);
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	89fa      	ldrh	r2, [r7, #14]
 800472e:	4619      	mov	r1, r3
 8004730:	4886      	ldr	r0, [pc, #536]	; (800494c <VPC3_Poll+0x620>)
 8004732:	f004 fabd 	bl	8008cb0 <iprintf>
                
                // Validar que la dirección está dentro del rango válido
                if (prmAddr >= ASIC_RAM_LENGTH) {
 8004736:	89fb      	ldrh	r3, [r7, #14]
 8004738:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800473c:	d313      	bcc.n	8004766 <VPC3_Poll+0x43a>
                    printf("🚨 [dp_isr] ERROR: Puntero PRM corrupto! Addr=0x%04X >= ASIC_RAM_LENGTH=0x%04X\r\n", 
 800473e:	89fb      	ldrh	r3, [r7, #14]
 8004740:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004744:	4619      	mov	r1, r3
 8004746:	4882      	ldr	r0, [pc, #520]	; (8004950 <VPC3_Poll+0x624>)
 8004748:	f004 fab2 	bl	8008cb0 <iprintf>
                           prmAddr, ASIC_RAM_LENGTH);
                    printf("🚨 [dp_isr] Rechazando trama PRM corrupta para evitar LECTURA ILEGAL\r\n");
 800474c:	4881      	ldr	r0, [pc, #516]	; (8004954 <VPC3_Poll+0x628>)
 800474e:	f004 fb4b 	bl	8008de8 <puts>
                    bResult = VPC3_SET_PRM_DATA_NOT_OK();
 8004752:	4b79      	ldr	r3, [pc, #484]	; (8004938 <VPC3_Poll+0x60c>)
 8004754:	881b      	ldrh	r3, [r3, #0]
 8004756:	330f      	adds	r3, #15
 8004758:	b29b      	uxth	r3, r3
 800475a:	4618      	mov	r0, r3
 800475c:	f001 fbc8 	bl	8005ef0 <Vpc3Read>
 8004760:	4603      	mov	r3, r0
 8004762:	70fb      	strb	r3, [r7, #3]
                    break; // Salir del bucle do-while
 8004764:	e03c      	b.n	80047e0 <VPC3_Poll+0x4b4>
                }
                
                // Validar que la longitud es razonable
                if (bPrmLength > 50) {
 8004766:	7d3b      	ldrb	r3, [r7, #20]
 8004768:	2b32      	cmp	r3, #50	; 0x32
 800476a:	d90e      	bls.n	800478a <VPC3_Poll+0x45e>
                    printf("🚨 [dp_isr] ERROR: Longitud PRM sospechosa (%d bytes). Rechazando.\r\n", bPrmLength);
 800476c:	7d3b      	ldrb	r3, [r7, #20]
 800476e:	4619      	mov	r1, r3
 8004770:	4879      	ldr	r0, [pc, #484]	; (8004958 <VPC3_Poll+0x62c>)
 8004772:	f004 fa9d 	bl	8008cb0 <iprintf>
                    bResult = VPC3_SET_PRM_DATA_NOT_OK();
 8004776:	4b70      	ldr	r3, [pc, #448]	; (8004938 <VPC3_Poll+0x60c>)
 8004778:	881b      	ldrh	r3, [r3, #0]
 800477a:	330f      	adds	r3, #15
 800477c:	b29b      	uxth	r3, r3
 800477e:	4618      	mov	r0, r3
 8004780:	f001 fbb6 	bl	8005ef0 <Vpc3Read>
 8004784:	4603      	mov	r3, r0
 8004786:	70fb      	strb	r3, [r7, #3]
                    break; // Salir del bucle do-while
 8004788:	e02a      	b.n	80047e0 <VPC3_Poll+0x4b4>
                }

                CopyFromVpc3_( (MEM_UNSIGNED8_PTR)&pDpSystem->abPrmCfgSsaHelpBuffer[0], prmBufPtr, bPrmLength );
 800478a:	4b6e      	ldr	r3, [pc, #440]	; (8004944 <VPC3_Poll+0x618>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	331d      	adds	r3, #29
 8004790:	7d3a      	ldrb	r2, [r7, #20]
 8004792:	b292      	uxth	r2, r2
 8004794:	6939      	ldr	r1, [r7, #16]
 8004796:	4618      	mov	r0, r3
 8004798:	f001 fda0 	bl	80062dc <CopyFromVpc3>

               if( DpPrm_ChkNewPrmData( (MEM_UNSIGNED8_PTR)&pDpSystem->abPrmCfgSsaHelpBuffer[0], bPrmLength ) == DP_OK )
 800479c:	4b69      	ldr	r3, [pc, #420]	; (8004944 <VPC3_Poll+0x618>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	331d      	adds	r3, #29
 80047a2:	7d3a      	ldrb	r2, [r7, #20]
 80047a4:	4611      	mov	r1, r2
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7fd fd0e 	bl	80021c8 <DpPrm_ChkNewPrmData>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d109      	bne.n	80047c6 <VPC3_Poll+0x49a>
                     #if DP_MSAC_C1
                        MSAC_C1_CheckIndNewPrmData( (MEM_STRUC_PRM_PTR)&pDpSystem->abPrmCfgSsaHelpBuffer[0], bPrmLength );
                     #endif /* #if DP_MSAC_C1 */
                  #endif /* #if REDUNDANCY */

                  bResult = VPC3_SET_PRM_DATA_OK();
 80047b2:	4b61      	ldr	r3, [pc, #388]	; (8004938 <VPC3_Poll+0x60c>)
 80047b4:	881b      	ldrh	r3, [r3, #0]
 80047b6:	330e      	adds	r3, #14
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	4618      	mov	r0, r3
 80047bc:	f001 fb98 	bl	8005ef0 <Vpc3Read>
 80047c0:	4603      	mov	r3, r0
 80047c2:	70fb      	strb	r3, [r7, #3]
 80047c4:	e008      	b.n	80047d8 <VPC3_Poll+0x4ac>
               } /* if( DpPrm_ChkNewPrmData( (MEM_UNSIGNED8_PTR)&pDpSystem->abPrmCfgSsaHelpBuffer[0], bPrmLength ) == DP_OK ) */
               else
               {
                  bResult = VPC3_SET_PRM_DATA_NOT_OK();
 80047c6:	4b5c      	ldr	r3, [pc, #368]	; (8004938 <VPC3_Poll+0x60c>)
 80047c8:	881b      	ldrh	r3, [r3, #0]
 80047ca:	330f      	adds	r3, #15
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	4618      	mov	r0, r3
 80047d0:	f001 fb8e 	bl	8005ef0 <Vpc3Read>
 80047d4:	4603      	mov	r3, r0
 80047d6:	70fb      	strb	r3, [r7, #3]
               } /* else of if( DpPrm_ChkNewPrmData( (MEM_UNSIGNED8_PTR)&pDpSystem->abPrmCfgSsaHelpBuffer[0], bPrmLength ) == DP_OK ) */
            }
            while( bResult == VPC3_PRM_CONFLICT );
 80047d8:	78fb      	ldrb	r3, [r7, #3]
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d087      	beq.n	80046f0 <VPC3_Poll+0x3c4>
         } /* if( VPC3_POLL_IND_NEW_PRM_DATA() ) */

         /*------------------------------------------------------------------*/
         /* check config data , application specific!                        */
         /*------------------------------------------------------------------*/
         if( VPC3_POLL_IND_NEW_CFG_DATA() )
 80047e0:	4b58      	ldr	r3, [pc, #352]	; (8004944 <VPC3_Poll+0x618>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	f000 8143 	beq.w	8004a7a <VPC3_Poll+0x74e>
         {
            printf("🎯 [dp_isr] === CFG RECIBIDO DEL MASTER ===\r\n");
 80047f4:	4859      	ldr	r0, [pc, #356]	; (800495c <VPC3_Poll+0x630>)
 80047f6:	f004 faf7 	bl	8008de8 <puts>
            printf("🎯 [dp_isr] TIMESTAMP: %lu ms\r\n", HAL_GetTick());
 80047fa:	f001 fed3 	bl	80065a4 <HAL_GetTick>
 80047fe:	4603      	mov	r3, r0
 8004800:	4619      	mov	r1, r3
 8004802:	4857      	ldr	r0, [pc, #348]	; (8004960 <VPC3_Poll+0x634>)
 8004804:	f004 fa54 	bl	8008cb0 <iprintf>
            printf("🎯 [dp_isr] STATUS_L antes de procesar CFG: 0x%02X\r\n", VPC3_GET_STATUS_L());
 8004808:	4b4b      	ldr	r3, [pc, #300]	; (8004938 <VPC3_Poll+0x60c>)
 800480a:	881b      	ldrh	r3, [r3, #0]
 800480c:	3304      	adds	r3, #4
 800480e:	b29b      	uxth	r3, r3
 8004810:	4618      	mov	r0, r3
 8004812:	f001 fb6d 	bl	8005ef0 <Vpc3Read>
 8004816:	4603      	mov	r3, r0
 8004818:	4619      	mov	r1, r3
 800481a:	4852      	ldr	r0, [pc, #328]	; (8004964 <VPC3_Poll+0x638>)
 800481c:	f004 fa48 	bl	8008cb0 <iprintf>
            printf("🎯 [dp_isr] STATUS_H antes de procesar CFG: 0x%02X\r\n", VPC3_GET_STATUS_H());
 8004820:	4b45      	ldr	r3, [pc, #276]	; (8004938 <VPC3_Poll+0x60c>)
 8004822:	881b      	ldrh	r3, [r3, #0]
 8004824:	3305      	adds	r3, #5
 8004826:	b29b      	uxth	r3, r3
 8004828:	4618      	mov	r0, r3
 800482a:	f001 fb61 	bl	8005ef0 <Vpc3Read>
 800482e:	4603      	mov	r3, r0
 8004830:	4619      	mov	r1, r3
 8004832:	484d      	ldr	r0, [pc, #308]	; (8004968 <VPC3_Poll+0x63c>)
 8004834:	f004 fa3c 	bl	8008cb0 <iprintf>
            
            uint8_t bCfgLength;

            #if DP_INTERRUPT_MASK_8BIT == 0
               VPC3_POLL_CON_IND_NEW_CFG_DATA();
 8004838:	4b42      	ldr	r3, [pc, #264]	; (8004944 <VPC3_Poll+0x618>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8004840:	b29a      	uxth	r2, r3
 8004842:	4b40      	ldr	r3, [pc, #256]	; (8004944 <VPC3_Poll+0x618>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800484a:	b292      	uxth	r2, r2
 800484c:	f8a3 2005 	strh.w	r2, [r3, #5]
            #endif /* #if DP_INTERRUPT_MASK_8BIT == 0 */

            bResult = VPC3_CFG_FINISHED;
 8004850:	2300      	movs	r3, #0
 8004852:	70fb      	strb	r3, [r7, #3]
            do
            {
               uint8_t *cfgBufPtr;
               VPC3_ADR cfgAddr;
               
               bCfgLength = VPC3_GET_CFG_LEN();
 8004854:	4b38      	ldr	r3, [pc, #224]	; (8004938 <VPC3_Poll+0x60c>)
 8004856:	881b      	ldrh	r3, [r3, #0]
 8004858:	3331      	adds	r3, #49	; 0x31
 800485a:	b29b      	uxth	r3, r3
 800485c:	4618      	mov	r0, r3
 800485e:	f001 fb47 	bl	8005ef0 <Vpc3Read>
 8004862:	4603      	mov	r3, r0
 8004864:	77fb      	strb	r3, [r7, #31]
               
               printf("DEBUG: [dp_isr] CFG Length: %d bytes\r\n", bCfgLength);
 8004866:	7ffb      	ldrb	r3, [r7, #31]
 8004868:	4619      	mov	r1, r3
 800486a:	4840      	ldr	r0, [pc, #256]	; (800496c <VPC3_Poll+0x640>)
 800486c:	f004 fa20 	bl	8008cb0 <iprintf>
               
               // --- VALIDACIÓN CRÍTICA: Verificar puntero CFG antes de leer ---
               cfgBufPtr = VPC3_GET_CFG_BUF_PTR();
 8004870:	4b31      	ldr	r3, [pc, #196]	; (8004938 <VPC3_Poll+0x60c>)
 8004872:	881b      	ldrh	r3, [r3, #0]
 8004874:	3332      	adds	r3, #50	; 0x32
 8004876:	b29b      	uxth	r3, r3
 8004878:	4618      	mov	r0, r3
 800487a:	f001 fb39 	bl	8005ef0 <Vpc3Read>
 800487e:	4603      	mov	r3, r0
 8004880:	00db      	lsls	r3, r3, #3
 8004882:	4a2d      	ldr	r2, [pc, #180]	; (8004938 <VPC3_Poll+0x60c>)
 8004884:	8812      	ldrh	r2, [r2, #0]
 8004886:	4413      	add	r3, r2
 8004888:	60bb      	str	r3, [r7, #8]
               cfgAddr = (VPC3_ADR)cfgBufPtr;
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	80fb      	strh	r3, [r7, #6]
               
               printf("DEBUG: [dp_isr] CFG Buffer Ptr: 0x%08X, Addr: 0x%04X\r\n", (unsigned int)cfgBufPtr, cfgAddr);
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	88fa      	ldrh	r2, [r7, #6]
 8004892:	4619      	mov	r1, r3
 8004894:	4836      	ldr	r0, [pc, #216]	; (8004970 <VPC3_Poll+0x644>)
 8004896:	f004 fa0b 	bl	8008cb0 <iprintf>
               
               // Validar que la dirección está dentro del rango válido
               if (cfgAddr >= ASIC_RAM_LENGTH) {
 800489a:	88fb      	ldrh	r3, [r7, #6]
 800489c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048a0:	d313      	bcc.n	80048ca <VPC3_Poll+0x59e>
                   printf("🚨 [dp_isr] ERROR: Puntero CFG corrupto! Addr=0x%04X >= ASIC_RAM_LENGTH=0x%04X\r\n", 
 80048a2:	88fb      	ldrh	r3, [r7, #6]
 80048a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048a8:	4619      	mov	r1, r3
 80048aa:	4832      	ldr	r0, [pc, #200]	; (8004974 <VPC3_Poll+0x648>)
 80048ac:	f004 fa00 	bl	8008cb0 <iprintf>
                          cfgAddr, ASIC_RAM_LENGTH);
                   printf("🚨 [dp_isr] Rechazando trama CFG corrupta para evitar LECTURA ILEGAL\r\n");
 80048b0:	4831      	ldr	r0, [pc, #196]	; (8004978 <VPC3_Poll+0x64c>)
 80048b2:	f004 fa99 	bl	8008de8 <puts>
                   bResult = VPC3_SET_CFG_DATA_NOT_OK();
 80048b6:	4b20      	ldr	r3, [pc, #128]	; (8004938 <VPC3_Poll+0x60c>)
 80048b8:	881b      	ldrh	r3, [r3, #0]
 80048ba:	3311      	adds	r3, #17
 80048bc:	b29b      	uxth	r3, r3
 80048be:	4618      	mov	r0, r3
 80048c0:	f001 fb16 	bl	8005ef0 <Vpc3Read>
 80048c4:	4603      	mov	r3, r0
 80048c6:	70fb      	strb	r3, [r7, #3]
                   break; // Salir del bucle do-while
 80048c8:	e0d7      	b.n	8004a7a <VPC3_Poll+0x74e>
               }
               
               // Validar que la longitud es razonable
               if (bCfgLength > 50) {
 80048ca:	7ffb      	ldrb	r3, [r7, #31]
 80048cc:	2b32      	cmp	r3, #50	; 0x32
 80048ce:	d90e      	bls.n	80048ee <VPC3_Poll+0x5c2>
                   printf("🚨 [dp_isr] ERROR: Longitud CFG sospechosa (%d bytes). Rechazando.\r\n", bCfgLength);
 80048d0:	7ffb      	ldrb	r3, [r7, #31]
 80048d2:	4619      	mov	r1, r3
 80048d4:	4829      	ldr	r0, [pc, #164]	; (800497c <VPC3_Poll+0x650>)
 80048d6:	f004 f9eb 	bl	8008cb0 <iprintf>
                   bResult = VPC3_SET_CFG_DATA_NOT_OK();
 80048da:	4b17      	ldr	r3, [pc, #92]	; (8004938 <VPC3_Poll+0x60c>)
 80048dc:	881b      	ldrh	r3, [r3, #0]
 80048de:	3311      	adds	r3, #17
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	4618      	mov	r0, r3
 80048e4:	f001 fb04 	bl	8005ef0 <Vpc3Read>
 80048e8:	4603      	mov	r3, r0
 80048ea:	70fb      	strb	r3, [r7, #3]
                   break; // Salir del bucle do-while
 80048ec:	e0c5      	b.n	8004a7a <VPC3_Poll+0x74e>
               }
               
               CopyFromVpc3_( (MEM_UNSIGNED8_PTR)&pDpSystem->abPrmCfgSsaHelpBuffer[0], cfgBufPtr, bCfgLength );
 80048ee:	4b15      	ldr	r3, [pc, #84]	; (8004944 <VPC3_Poll+0x618>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	331d      	adds	r3, #29
 80048f4:	7ffa      	ldrb	r2, [r7, #31]
 80048f6:	b292      	uxth	r2, r2
 80048f8:	68b9      	ldr	r1, [r7, #8]
 80048fa:	4618      	mov	r0, r3
 80048fc:	f001 fcee 	bl	80062dc <CopyFromVpc3>

               printf("DEBUG: [dp_isr] Contenido de abPrmCfgSsaHelpBuffer JUSTO ANTES de DpCfg_ChkNewCfgData (%d bytes): ", bCfgLength);
 8004900:	7ffb      	ldrb	r3, [r7, #31]
 8004902:	4619      	mov	r1, r3
 8004904:	481e      	ldr	r0, [pc, #120]	; (8004980 <VPC3_Poll+0x654>)
 8004906:	f004 f9d3 	bl	8008cb0 <iprintf>
               
                               // Protección contra tramas CFG corruptas
                if (bCfgLength > 10) {
 800490a:	7ffb      	ldrb	r3, [r7, #31]
 800490c:	2b0a      	cmp	r3, #10
 800490e:	d90f      	bls.n	8004930 <VPC3_Poll+0x604>
                    printf("⚠️ [dp_isr] ADVERTENCIA: Trama CFG sospechosamente larga (%d bytes). Esperado: 2 bytes (1 OUT + 1 IN).\r\n", bCfgLength);
 8004910:	7ffb      	ldrb	r3, [r7, #31]
 8004912:	4619      	mov	r1, r3
 8004914:	481b      	ldr	r0, [pc, #108]	; (8004984 <VPC3_Poll+0x658>)
 8004916:	f004 f9cb 	bl	8008cb0 <iprintf>
                    printf("⚠️ [dp_isr] Posible problema en configuración del PLC o GSD.\r\n");
 800491a:	481b      	ldr	r0, [pc, #108]	; (8004988 <VPC3_Poll+0x65c>)
 800491c:	f004 fa64 	bl	8008de8 <puts>
                    if (bCfgLength > 50) {
 8004920:	7ffb      	ldrb	r3, [r7, #31]
 8004922:	2b32      	cmp	r3, #50	; 0x32
 8004924:	d904      	bls.n	8004930 <VPC3_Poll+0x604>
                        printf("⚠️ [dp_isr] Limitando a primeros 50 bytes para evitar corrupción.\r\n");
 8004926:	4819      	ldr	r0, [pc, #100]	; (800498c <VPC3_Poll+0x660>)
 8004928:	f004 fa5e 	bl	8008de8 <puts>
                        bCfgLength = 50;
 800492c:	2332      	movs	r3, #50	; 0x32
 800492e:	77fb      	strb	r3, [r7, #31]
                    }
                }
               
               for(int k=0; k<bCfgLength && k<50; k++) {
 8004930:	2300      	movs	r3, #0
 8004932:	61bb      	str	r3, [r7, #24]
 8004934:	e039      	b.n	80049aa <VPC3_Poll+0x67e>
 8004936:	bf00      	nop
 8004938:	20000144 	.word	0x20000144
 800493c:	0800fad4 	.word	0x0800fad4
 8004940:	0800fb0c 	.word	0x0800fb0c
 8004944:	20000000 	.word	0x20000000
 8004948:	0800fb44 	.word	0x0800fb44
 800494c:	0800fb6c 	.word	0x0800fb6c
 8004950:	0800fba4 	.word	0x0800fba4
 8004954:	0800fbf8 	.word	0x0800fbf8
 8004958:	0800fc40 	.word	0x0800fc40
 800495c:	0800fc88 	.word	0x0800fc88
 8004960:	0800fab0 	.word	0x0800fab0
 8004964:	0800fcb8 	.word	0x0800fcb8
 8004968:	0800fcf0 	.word	0x0800fcf0
 800496c:	0800fd28 	.word	0x0800fd28
 8004970:	0800fd50 	.word	0x0800fd50
 8004974:	0800fd88 	.word	0x0800fd88
 8004978:	0800fddc 	.word	0x0800fddc
 800497c:	0800fe24 	.word	0x0800fe24
 8004980:	0800fe6c 	.word	0x0800fe6c
 8004984:	0800fed0 	.word	0x0800fed0
 8004988:	0800ff40 	.word	0x0800ff40
 800498c:	0800ff84 	.word	0x0800ff84
                  printf("0x%02X ", pDpSystem->abPrmCfgSsaHelpBuffer[k]);
 8004990:	4b6d      	ldr	r3, [pc, #436]	; (8004b48 <VPC3_Poll+0x81c>)
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	4413      	add	r3, r2
 8004998:	331d      	adds	r3, #29
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	4619      	mov	r1, r3
 800499e:	486b      	ldr	r0, [pc, #428]	; (8004b4c <VPC3_Poll+0x820>)
 80049a0:	f004 f986 	bl	8008cb0 <iprintf>
               for(int k=0; k<bCfgLength && k<50; k++) {
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	3301      	adds	r3, #1
 80049a8:	61bb      	str	r3, [r7, #24]
 80049aa:	7ffb      	ldrb	r3, [r7, #31]
 80049ac:	69ba      	ldr	r2, [r7, #24]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	da02      	bge.n	80049b8 <VPC3_Poll+0x68c>
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	2b31      	cmp	r3, #49	; 0x31
 80049b6:	ddeb      	ble.n	8004990 <VPC3_Poll+0x664>
               }
               printf("\r\n");
 80049b8:	4865      	ldr	r0, [pc, #404]	; (8004b50 <VPC3_Poll+0x824>)
 80049ba:	f004 fa15 	bl	8008de8 <puts>

               switch( DpCfg_ChkNewCfgData( (MEM_UNSIGNED8_PTR)&pDpSystem->abPrmCfgSsaHelpBuffer[0], bCfgLength ) )
 80049be:	4b62      	ldr	r3, [pc, #392]	; (8004b48 <VPC3_Poll+0x81c>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	331d      	adds	r3, #29
 80049c4:	7ffa      	ldrb	r2, [r7, #31]
 80049c6:	4611      	mov	r1, r2
 80049c8:	4618      	mov	r0, r3
 80049ca:	f7fc fca7 	bl	800131c <DpCfg_ChkNewCfgData>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b02      	cmp	r3, #2
 80049d2:	d01a      	beq.n	8004a0a <VPC3_Poll+0x6de>
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	dc4a      	bgt.n	8004a6e <VPC3_Poll+0x742>
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d002      	beq.n	80049e2 <VPC3_Poll+0x6b6>
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d00a      	beq.n	80049f6 <VPC3_Poll+0x6ca>
                     break;
                  } /* case DP_CFG_UPDATE: */

                  default:
                  {
                     break;
 80049e0:	e045      	b.n	8004a6e <VPC3_Poll+0x742>
                     bResult = VPC3_SET_CFG_DATA_OK();
 80049e2:	4b5c      	ldr	r3, [pc, #368]	; (8004b54 <VPC3_Poll+0x828>)
 80049e4:	881b      	ldrh	r3, [r3, #0]
 80049e6:	3310      	adds	r3, #16
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	4618      	mov	r0, r3
 80049ec:	f001 fa80 	bl	8005ef0 <Vpc3Read>
 80049f0:	4603      	mov	r3, r0
 80049f2:	70fb      	strb	r3, [r7, #3]
                     break;
 80049f4:	e03c      	b.n	8004a70 <VPC3_Poll+0x744>
                     bResult = VPC3_SET_CFG_DATA_NOT_OK();
 80049f6:	4b57      	ldr	r3, [pc, #348]	; (8004b54 <VPC3_Poll+0x828>)
 80049f8:	881b      	ldrh	r3, [r3, #0]
 80049fa:	3311      	adds	r3, #17
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	4618      	mov	r0, r3
 8004a00:	f001 fa76 	bl	8005ef0 <Vpc3Read>
 8004a04:	4603      	mov	r3, r0
 8004a06:	70fb      	strb	r3, [r7, #3]
                     break;
 8004a08:	e032      	b.n	8004a70 <VPC3_Poll+0x744>
                     if( DP_OK != VPC3_CalculateInpOutpLength( (MEM_UNSIGNED8_PTR)&pDpSystem->abPrmCfgSsaHelpBuffer[0], bCfgLength ) )
 8004a0a:	4b4f      	ldr	r3, [pc, #316]	; (8004b48 <VPC3_Poll+0x81c>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	331d      	adds	r3, #29
 8004a10:	7ffa      	ldrb	r2, [r7, #31]
 8004a12:	4611      	mov	r1, r2
 8004a14:	4618      	mov	r0, r3
 8004a16:	f7fe fa37 	bl	8002e88 <VPC3_CalculateInpOutpLength>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d009      	beq.n	8004a34 <VPC3_Poll+0x708>
                        bResult = VPC3_SET_CFG_DATA_NOT_OK();
 8004a20:	4b4c      	ldr	r3, [pc, #304]	; (8004b54 <VPC3_Poll+0x828>)
 8004a22:	881b      	ldrh	r3, [r3, #0]
 8004a24:	3311      	adds	r3, #17
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f001 fa61 	bl	8005ef0 <Vpc3Read>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	70fb      	strb	r3, [r7, #3]
                     break;
 8004a32:	e01d      	b.n	8004a70 <VPC3_Poll+0x744>
                        VPC3_SetIoDataLength();
 8004a34:	f7fe ff3c 	bl	80038b0 <VPC3_SetIoDataLength>
                        VPC3_SET_READ_CFG_LEN( bCfgLength );
 8004a38:	4b46      	ldr	r3, [pc, #280]	; (8004b54 <VPC3_Poll+0x828>)
 8004a3a:	881b      	ldrh	r3, [r3, #0]
 8004a3c:	3333      	adds	r3, #51	; 0x33
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	7ffa      	ldrb	r2, [r7, #31]
 8004a42:	4611      	mov	r1, r2
 8004a44:	4618      	mov	r0, r3
 8004a46:	f001 f9a3 	bl	8005d90 <Vpc3Write>
                        VPC3_UPDATE_CFG_BUFFER();
 8004a4a:	4b42      	ldr	r3, [pc, #264]	; (8004b54 <VPC3_Poll+0x828>)
 8004a4c:	881b      	ldrh	r3, [r3, #0]
 8004a4e:	3308      	adds	r3, #8
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	2110      	movs	r1, #16
 8004a54:	4618      	mov	r0, r3
 8004a56:	f001 f99b 	bl	8005d90 <Vpc3Write>
                        bResult = VPC3_SET_CFG_DATA_OK();
 8004a5a:	4b3e      	ldr	r3, [pc, #248]	; (8004b54 <VPC3_Poll+0x828>)
 8004a5c:	881b      	ldrh	r3, [r3, #0]
 8004a5e:	3310      	adds	r3, #16
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	4618      	mov	r0, r3
 8004a64:	f001 fa44 	bl	8005ef0 <Vpc3Read>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	70fb      	strb	r3, [r7, #3]
                     break;
 8004a6c:	e000      	b.n	8004a70 <VPC3_Poll+0x744>
                     break;
 8004a6e:	bf00      	nop
                  } /* default: */
               } /* switch( DpCfg_ChkNewCfgData( pCfgData, bCfgLength ) ) */
            }
            while( bResult == VPC3_CFG_CONFLICT );
 8004a70:	78fb      	ldrb	r3, [r7, #3]
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	f43f aeed 	beq.w	8004854 <VPC3_Poll+0x528>
         } /* if( VPC3_POLL_IND_NEW_CFG_DATA() ) */

         /*------------------------------------------------------------------*/
         /* IND_WD_DP_TIMEOUT                                                */
         /*------------------------------------------------------------------*/
         if( VPC3_POLL_IND_WD_DP_MODE_TIMEOUT() )
 8004a7a:	4b33      	ldr	r3, [pc, #204]	; (8004b48 <VPC3_Poll+0x81c>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	f003 0308 	and.w	r3, r3, #8
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d001      	beq.n	8004a90 <VPC3_Poll+0x764>
         {
            DpAppl_IsrNewWdDpTimeout();
 8004a8c:	f7fc fbca 	bl	8001224 <DpAppl_IsrNewWdDpTimeout>
         } /* if( VPC3_POLL_IND_WD_DP_MODE_TIMEOUT() ) */

         /*------------------------------------------------------------------*/
         /* IND_GO_LEAVE_DATA_EX                                             */
         /*------------------------------------------------------------------*/
         if( VPC3_POLL_IND_GO_LEAVE_DATA_EX() )
 8004a90:	4b2d      	ldr	r3, [pc, #180]	; (8004b48 <VPC3_Poll+0x81c>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	f003 0302 	and.w	r3, r3, #2
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	f000 80b8 	beq.w	8004c14 <VPC3_Poll+0x8e8>
         {
            printf("🚨 [dp_isr] === IND_GO_LEAVE_DATA_EX DETECTADO ===\r\n");
 8004aa4:	482c      	ldr	r0, [pc, #176]	; (8004b58 <VPC3_Poll+0x82c>)
 8004aa6:	f004 f99f 	bl	8008de8 <puts>
            printf("🚨 [dp_isr] TIMESTAMP: %lu ms\r\n", HAL_GetTick());
 8004aaa:	f001 fd7b 	bl	80065a4 <HAL_GetTick>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	482a      	ldr	r0, [pc, #168]	; (8004b5c <VPC3_Poll+0x830>)
 8004ab4:	f004 f8fc 	bl	8008cb0 <iprintf>
            printf("🚨 [dp_isr] STATUS_L antes del evento: 0x%02X\r\n", VPC3_GET_STATUS_L());
 8004ab8:	4b26      	ldr	r3, [pc, #152]	; (8004b54 <VPC3_Poll+0x828>)
 8004aba:	881b      	ldrh	r3, [r3, #0]
 8004abc:	3304      	adds	r3, #4
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f001 fa15 	bl	8005ef0 <Vpc3Read>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	4619      	mov	r1, r3
 8004aca:	4825      	ldr	r0, [pc, #148]	; (8004b60 <VPC3_Poll+0x834>)
 8004acc:	f004 f8f0 	bl	8008cb0 <iprintf>
            printf("🚨 [dp_isr] STATUS_H antes del evento: 0x%02X\r\n", VPC3_GET_STATUS_H());
 8004ad0:	4b20      	ldr	r3, [pc, #128]	; (8004b54 <VPC3_Poll+0x828>)
 8004ad2:	881b      	ldrh	r3, [r3, #0]
 8004ad4:	3305      	adds	r3, #5
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f001 fa09 	bl	8005ef0 <Vpc3Read>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	4820      	ldr	r0, [pc, #128]	; (8004b64 <VPC3_Poll+0x838>)
 8004ae4:	f004 f8e4 	bl	8008cb0 <iprintf>
            printf("🚨 [dp_isr] DP_STATE antes del evento: 0x%02X\r\n", VPC3_GET_DP_STATE());
 8004ae8:	4b1a      	ldr	r3, [pc, #104]	; (8004b54 <VPC3_Poll+0x828>)
 8004aea:	881b      	ldrh	r3, [r3, #0]
 8004aec:	3304      	adds	r3, #4
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	4618      	mov	r0, r3
 8004af2:	f001 f9fd 	bl	8005ef0 <Vpc3Read>
 8004af6:	4603      	mov	r3, r0
 8004af8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004afc:	4619      	mov	r1, r3
 8004afe:	481a      	ldr	r0, [pc, #104]	; (8004b68 <VPC3_Poll+0x83c>)
 8004b00:	f004 f8d6 	bl	8008cb0 <iprintf>
            printf("🚨 [dp_isr] MODE_REG_2 antes del evento: 0x%02X\r\n", VPC3_GetModeReg2Shadow());
 8004b04:	f001 f89e 	bl	8005c44 <VPC3_GetModeReg2Shadow>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	4817      	ldr	r0, [pc, #92]	; (8004b6c <VPC3_Poll+0x840>)
 8004b0e:	f004 f8cf 	bl	8008cb0 <iprintf>
            
            // Análisis del estado de comunicación
            uint8_t status_l = VPC3_GET_STATUS_L();
 8004b12:	4b10      	ldr	r3, [pc, #64]	; (8004b54 <VPC3_Poll+0x828>)
 8004b14:	881b      	ldrh	r3, [r3, #0]
 8004b16:	3304      	adds	r3, #4
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f001 f9e8 	bl	8005ef0 <Vpc3Read>
 8004b20:	4603      	mov	r3, r0
 8004b22:	717b      	strb	r3, [r7, #5]
            uint8_t actual_dp_state = (status_l & 0x60) >> 5;
 8004b24:	797b      	ldrb	r3, [r7, #5]
 8004b26:	115b      	asrs	r3, r3, #5
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	f003 0303 	and.w	r3, r3, #3
 8004b2e:	713b      	strb	r3, [r7, #4]
            printf("🚨 [dp_isr] Estado real calculado de STATUS_L: 0x%02X\r\n", actual_dp_state);
 8004b30:	793b      	ldrb	r3, [r7, #4]
 8004b32:	4619      	mov	r1, r3
 8004b34:	480e      	ldr	r0, [pc, #56]	; (8004b70 <VPC3_Poll+0x844>)
 8004b36:	f004 f8bb 	bl	8008cb0 <iprintf>
            
            if (actual_dp_state == DATA_EX) {
 8004b3a:	793b      	ldrb	r3, [r7, #4]
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d11b      	bne.n	8004b78 <VPC3_Poll+0x84c>
                printf("🚨 [dp_isr] ⚠️ Estado real es DATA_EX - posible evento falso\r\n");
 8004b40:	480c      	ldr	r0, [pc, #48]	; (8004b74 <VPC3_Poll+0x848>)
 8004b42:	f004 f951 	bl	8008de8 <puts>
 8004b46:	e01a      	b.n	8004b7e <VPC3_Poll+0x852>
 8004b48:	20000000 	.word	0x20000000
 8004b4c:	0800ffcc 	.word	0x0800ffcc
 8004b50:	0800ffd4 	.word	0x0800ffd4
 8004b54:	20000144 	.word	0x20000144
 8004b58:	0800ffd8 	.word	0x0800ffd8
 8004b5c:	0800f810 	.word	0x0800f810
 8004b60:	0800f834 	.word	0x0800f834
 8004b64:	0800f868 	.word	0x0800f868
 8004b68:	0800f89c 	.word	0x0800f89c
 8004b6c:	0800f8d0 	.word	0x0800f8d0
 8004b70:	08010010 	.word	0x08010010
 8004b74:	0801004c 	.word	0x0801004c
            } else {
                printf("🚨 [dp_isr] ✅ Estado real NO es DATA_EX - evento válido\r\n");
 8004b78:	48b2      	ldr	r0, [pc, #712]	; (8004e44 <VPC3_Poll+0xb18>)
 8004b7a:	f004 f935 	bl	8008de8 <puts>
            }
            
            printf("🚨 [dp_isr] IND_GO_LEAVE_DATA_EX detectado - llamando DpAppl_IsrGoLeaveDataExchange\r\n");
 8004b7e:	48b2      	ldr	r0, [pc, #712]	; (8004e48 <VPC3_Poll+0xb1c>)
 8004b80:	f004 f932 	bl	8008de8 <puts>
            printf("🚨 [dp_isr] VPC3_GET_DP_STATE() = 0x%02X\r\n", VPC3_GET_DP_STATE());
 8004b84:	4bb1      	ldr	r3, [pc, #708]	; (8004e4c <VPC3_Poll+0xb20>)
 8004b86:	881b      	ldrh	r3, [r3, #0]
 8004b88:	3304      	adds	r3, #4
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f001 f9af 	bl	8005ef0 <Vpc3Read>
 8004b92:	4603      	mov	r3, r0
 8004b94:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004b98:	4619      	mov	r1, r3
 8004b9a:	48ad      	ldr	r0, [pc, #692]	; (8004e50 <VPC3_Poll+0xb24>)
 8004b9c:	f004 f888 	bl	8008cb0 <iprintf>
            
            #if DP_MSAC_C1
               MSAC_C1_LeaveDx();
            #endif /* #if DP_MSAC_C1 */

            DpAppl_IsrGoLeaveDataExchange( VPC3_GET_DP_STATE() );
 8004ba0:	4baa      	ldr	r3, [pc, #680]	; (8004e4c <VPC3_Poll+0xb20>)
 8004ba2:	881b      	ldrh	r3, [r3, #0]
 8004ba4:	3304      	adds	r3, #4
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f001 f9a1 	bl	8005ef0 <Vpc3Read>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f7fc fa74 	bl	80010a4 <DpAppl_IsrGoLeaveDataExchange>

            VPC3_CON_IND_GO_LEAVE_DATA_EX();
            printf("🚨 [dp_isr] STATUS_L después del evento: 0x%02X\r\n", VPC3_GET_STATUS_L());
 8004bbc:	4ba3      	ldr	r3, [pc, #652]	; (8004e4c <VPC3_Poll+0xb20>)
 8004bbe:	881b      	ldrh	r3, [r3, #0]
 8004bc0:	3304      	adds	r3, #4
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f001 f993 	bl	8005ef0 <Vpc3Read>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	4619      	mov	r1, r3
 8004bce:	48a1      	ldr	r0, [pc, #644]	; (8004e54 <VPC3_Poll+0xb28>)
 8004bd0:	f004 f86e 	bl	8008cb0 <iprintf>
            printf("🚨 [dp_isr] STATUS_H después del evento: 0x%02X\r\n", VPC3_GET_STATUS_H());
 8004bd4:	4b9d      	ldr	r3, [pc, #628]	; (8004e4c <VPC3_Poll+0xb20>)
 8004bd6:	881b      	ldrh	r3, [r3, #0]
 8004bd8:	3305      	adds	r3, #5
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f001 f987 	bl	8005ef0 <Vpc3Read>
 8004be2:	4603      	mov	r3, r0
 8004be4:	4619      	mov	r1, r3
 8004be6:	489c      	ldr	r0, [pc, #624]	; (8004e58 <VPC3_Poll+0xb2c>)
 8004be8:	f004 f862 	bl	8008cb0 <iprintf>
            printf("🚨 [dp_isr] DP_STATE después del evento: 0x%02X\r\n", VPC3_GET_DP_STATE());
 8004bec:	4b97      	ldr	r3, [pc, #604]	; (8004e4c <VPC3_Poll+0xb20>)
 8004bee:	881b      	ldrh	r3, [r3, #0]
 8004bf0:	3304      	adds	r3, #4
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f001 f97b 	bl	8005ef0 <Vpc3Read>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004c00:	4619      	mov	r1, r3
 8004c02:	4896      	ldr	r0, [pc, #600]	; (8004e5c <VPC3_Poll+0xb30>)
 8004c04:	f004 f854 	bl	8008cb0 <iprintf>
            printf("🚨 [dp_isr] IND_GO_LEAVE_DATA_EX procesado\r\n");
 8004c08:	4895      	ldr	r0, [pc, #596]	; (8004e60 <VPC3_Poll+0xb34>)
 8004c0a:	f004 f8ed 	bl	8008de8 <puts>
            printf("🚨 [dp_isr] === FIN IND_GO_LEAVE_DATA_EX ===\r\n");
 8004c0e:	4895      	ldr	r0, [pc, #596]	; (8004e64 <VPC3_Poll+0xb38>)
 8004c10:	f004 f8ea 	bl	8008de8 <puts>
         } /* if( VPC3_POLL_IND_GO_LEAVE_DATA_EX() ) */

         /*------------------------------------------------------------------*/
         /* IND_DX_OUT                                                       */
         /*------------------------------------------------------------------*/
         if( VPC3_POLL_IND_DX_OUT() )
 8004c14:	4b94      	ldr	r3, [pc, #592]	; (8004e68 <VPC3_Poll+0xb3c>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	f000 8095 	beq.w	8004d52 <VPC3_Poll+0xa26>
         {
            // ESTE MENSAJE NO DEBERÍA APARECER NUNCA
            printf("--- ALERTA: [dp_isr] IND_DX_OUT detectado INESPERADAMENTE via polling. La condición de carrera puede persistir. ---\n");
 8004c28:	4890      	ldr	r0, [pc, #576]	; (8004e6c <VPC3_Poll+0xb40>)
 8004c2a:	f004 f8dd 	bl	8008de8 <puts>

            printf("DEBUG: [dp_isr] IND_DX_OUT detectado - procesando Data Exchange Output\n");
 8004c2e:	4890      	ldr	r0, [pc, #576]	; (8004e70 <VPC3_Poll+0xb44>)
 8004c30:	f004 f8da 	bl	8008de8 <puts>
            printf("DEBUG: [dp_isr] STATUS antes de DpAppl_IsrDxOut: L=0x%02X, H=0x%02X\n", 
                   VPC3_GET_STATUS_L(), VPC3_GET_STATUS_H());
 8004c34:	4b85      	ldr	r3, [pc, #532]	; (8004e4c <VPC3_Poll+0xb20>)
 8004c36:	881b      	ldrh	r3, [r3, #0]
 8004c38:	3304      	adds	r3, #4
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f001 f957 	bl	8005ef0 <Vpc3Read>
 8004c42:	4603      	mov	r3, r0
            printf("DEBUG: [dp_isr] STATUS antes de DpAppl_IsrDxOut: L=0x%02X, H=0x%02X\n", 
 8004c44:	461c      	mov	r4, r3
                   VPC3_GET_STATUS_L(), VPC3_GET_STATUS_H());
 8004c46:	4b81      	ldr	r3, [pc, #516]	; (8004e4c <VPC3_Poll+0xb20>)
 8004c48:	881b      	ldrh	r3, [r3, #0]
 8004c4a:	3305      	adds	r3, #5
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f001 f94e 	bl	8005ef0 <Vpc3Read>
 8004c54:	4603      	mov	r3, r0
            printf("DEBUG: [dp_isr] STATUS antes de DpAppl_IsrDxOut: L=0x%02X, H=0x%02X\n", 
 8004c56:	461a      	mov	r2, r3
 8004c58:	4621      	mov	r1, r4
 8004c5a:	4886      	ldr	r0, [pc, #536]	; (8004e74 <VPC3_Poll+0xb48>)
 8004c5c:	f004 f828 	bl	8008cb0 <iprintf>
            printf("DEBUG: [dp_isr] STATUS_L antes: 0x%02X (esperado DATA_EX=0x45)\n", VPC3_GET_STATUS_L());
 8004c60:	4b7a      	ldr	r3, [pc, #488]	; (8004e4c <VPC3_Poll+0xb20>)
 8004c62:	881b      	ldrh	r3, [r3, #0]
 8004c64:	3304      	adds	r3, #4
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f001 f941 	bl	8005ef0 <Vpc3Read>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	4619      	mov	r1, r3
 8004c72:	4881      	ldr	r0, [pc, #516]	; (8004e78 <VPC3_Poll+0xb4c>)
 8004c74:	f004 f81c 	bl	8008cb0 <iprintf>
            printf("DEBUG: [dp_isr] STATUS_H antes: 0x%02X (esperado 0xE3)\n", VPC3_GET_STATUS_H());
 8004c78:	4b74      	ldr	r3, [pc, #464]	; (8004e4c <VPC3_Poll+0xb20>)
 8004c7a:	881b      	ldrh	r3, [r3, #0]
 8004c7c:	3305      	adds	r3, #5
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	4618      	mov	r0, r3
 8004c82:	f001 f935 	bl	8005ef0 <Vpc3Read>
 8004c86:	4603      	mov	r3, r0
 8004c88:	4619      	mov	r1, r3
 8004c8a:	487c      	ldr	r0, [pc, #496]	; (8004e7c <VPC3_Poll+0xb50>)
 8004c8c:	f004 f810 	bl	8008cb0 <iprintf>
            
            #if DP_MSAC_C1
               MSAC_C1_CheckIndDxOut();
            #endif /* #if DP_MSAC_C1 */

            DpAppl_IsrDxOut();
 8004c90:	f7fc fab6 	bl	8001200 <DpAppl_IsrDxOut>
            printf("DEBUG: [dp_isr] STATUS después de DpAppl_IsrDxOut: L=0x%02X, H=0x%02X\n", 
                   VPC3_GET_STATUS_L(), VPC3_GET_STATUS_H());
 8004c94:	4b6d      	ldr	r3, [pc, #436]	; (8004e4c <VPC3_Poll+0xb20>)
 8004c96:	881b      	ldrh	r3, [r3, #0]
 8004c98:	3304      	adds	r3, #4
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f001 f927 	bl	8005ef0 <Vpc3Read>
 8004ca2:	4603      	mov	r3, r0
            printf("DEBUG: [dp_isr] STATUS después de DpAppl_IsrDxOut: L=0x%02X, H=0x%02X\n", 
 8004ca4:	461c      	mov	r4, r3
                   VPC3_GET_STATUS_L(), VPC3_GET_STATUS_H());
 8004ca6:	4b69      	ldr	r3, [pc, #420]	; (8004e4c <VPC3_Poll+0xb20>)
 8004ca8:	881b      	ldrh	r3, [r3, #0]
 8004caa:	3305      	adds	r3, #5
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f001 f91e 	bl	8005ef0 <Vpc3Read>
 8004cb4:	4603      	mov	r3, r0
            printf("DEBUG: [dp_isr] STATUS después de DpAppl_IsrDxOut: L=0x%02X, H=0x%02X\n", 
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	4621      	mov	r1, r4
 8004cba:	4871      	ldr	r0, [pc, #452]	; (8004e80 <VPC3_Poll+0xb54>)
 8004cbc:	f003 fff8 	bl	8008cb0 <iprintf>
            printf("DEBUG: [dp_isr] STATUS_L después de DpAppl_IsrDxOut: 0x%02X\n", VPC3_GET_STATUS_L());
 8004cc0:	4b62      	ldr	r3, [pc, #392]	; (8004e4c <VPC3_Poll+0xb20>)
 8004cc2:	881b      	ldrh	r3, [r3, #0]
 8004cc4:	3304      	adds	r3, #4
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f001 f911 	bl	8005ef0 <Vpc3Read>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	486c      	ldr	r0, [pc, #432]	; (8004e84 <VPC3_Poll+0xb58>)
 8004cd4:	f003 ffec 	bl	8008cb0 <iprintf>
            printf("DEBUG: [dp_isr] STATUS_H después de DpAppl_IsrDxOut: 0x%02X\n", VPC3_GET_STATUS_H());
 8004cd8:	4b5c      	ldr	r3, [pc, #368]	; (8004e4c <VPC3_Poll+0xb20>)
 8004cda:	881b      	ldrh	r3, [r3, #0]
 8004cdc:	3305      	adds	r3, #5
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f001 f905 	bl	8005ef0 <Vpc3Read>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	4619      	mov	r1, r3
 8004cea:	4867      	ldr	r0, [pc, #412]	; (8004e88 <VPC3_Poll+0xb5c>)
 8004cec:	f003 ffe0 	bl	8008cb0 <iprintf>

            VPC3_CON_IND_DX_OUT();
            printf("DEBUG: [dp_isr] STATUS después de VPC3_CON_IND_DX_OUT: L=0x%02X, H=0x%02X\n", 
                   VPC3_GET_STATUS_L(), VPC3_GET_STATUS_H());
 8004cf0:	4b56      	ldr	r3, [pc, #344]	; (8004e4c <VPC3_Poll+0xb20>)
 8004cf2:	881b      	ldrh	r3, [r3, #0]
 8004cf4:	3304      	adds	r3, #4
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f001 f8f9 	bl	8005ef0 <Vpc3Read>
 8004cfe:	4603      	mov	r3, r0
            printf("DEBUG: [dp_isr] STATUS después de VPC3_CON_IND_DX_OUT: L=0x%02X, H=0x%02X\n", 
 8004d00:	461c      	mov	r4, r3
                   VPC3_GET_STATUS_L(), VPC3_GET_STATUS_H());
 8004d02:	4b52      	ldr	r3, [pc, #328]	; (8004e4c <VPC3_Poll+0xb20>)
 8004d04:	881b      	ldrh	r3, [r3, #0]
 8004d06:	3305      	adds	r3, #5
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f001 f8f0 	bl	8005ef0 <Vpc3Read>
 8004d10:	4603      	mov	r3, r0
            printf("DEBUG: [dp_isr] STATUS después de VPC3_CON_IND_DX_OUT: L=0x%02X, H=0x%02X\n", 
 8004d12:	461a      	mov	r2, r3
 8004d14:	4621      	mov	r1, r4
 8004d16:	485d      	ldr	r0, [pc, #372]	; (8004e8c <VPC3_Poll+0xb60>)
 8004d18:	f003 ffca 	bl	8008cb0 <iprintf>
            printf("DEBUG: [dp_isr] STATUS_L después de VPC3_CON_IND_DX_OUT: 0x%02X\n", VPC3_GET_STATUS_L());
 8004d1c:	4b4b      	ldr	r3, [pc, #300]	; (8004e4c <VPC3_Poll+0xb20>)
 8004d1e:	881b      	ldrh	r3, [r3, #0]
 8004d20:	3304      	adds	r3, #4
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	4618      	mov	r0, r3
 8004d26:	f001 f8e3 	bl	8005ef0 <Vpc3Read>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	4858      	ldr	r0, [pc, #352]	; (8004e90 <VPC3_Poll+0xb64>)
 8004d30:	f003 ffbe 	bl	8008cb0 <iprintf>
            printf("DEBUG: [dp_isr] STATUS_H después de VPC3_CON_IND_DX_OUT: 0x%02X\n", VPC3_GET_STATUS_H());
 8004d34:	4b45      	ldr	r3, [pc, #276]	; (8004e4c <VPC3_Poll+0xb20>)
 8004d36:	881b      	ldrh	r3, [r3, #0]
 8004d38:	3305      	adds	r3, #5
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f001 f8d7 	bl	8005ef0 <Vpc3Read>
 8004d42:	4603      	mov	r3, r0
 8004d44:	4619      	mov	r1, r3
 8004d46:	4853      	ldr	r0, [pc, #332]	; (8004e94 <VPC3_Poll+0xb68>)
 8004d48:	f003 ffb2 	bl	8008cb0 <iprintf>
            printf("DEBUG: [dp_isr] IND_DX_OUT procesado\n");
 8004d4c:	4852      	ldr	r0, [pc, #328]	; (8004e98 <VPC3_Poll+0xb6c>)
 8004d4e:	f004 f84b 	bl	8008de8 <puts>
         } /* if( VPC3_POLL_IND_DX_OUT() ) */

         /*------------------------------------------------------------------*/
         /* IND_NEW_GC_COMMAND                                               */
         /*------------------------------------------------------------------*/
         if( VPC3_POLL_IND_NEW_GC_COMMAND() )
 8004d52:	4b45      	ldr	r3, [pc, #276]	; (8004e68 <VPC3_Poll+0xb3c>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00a      	beq.n	8004d7a <VPC3_Poll+0xa4e>
         {
            DpAppl_IsrNewGlobalControlCommand( VPC3_GET_GC_COMMAND() );
 8004d64:	4b39      	ldr	r3, [pc, #228]	; (8004e4c <VPC3_Poll+0xb20>)
 8004d66:	881b      	ldrh	r3, [r3, #0]
 8004d68:	333c      	adds	r3, #60	; 0x3c
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f001 f8bf 	bl	8005ef0 <Vpc3Read>
 8004d72:	4603      	mov	r3, r0
 8004d74:	4618      	mov	r0, r3
 8004d76:	f7fc fa63 	bl	8001240 <DpAppl_IsrNewGlobalControlCommand>
         } /* if( VPC3_POLL_IND_NEW_GC_COMMAND() ) */

         /*------------------------------------------------------------------*/
         /* IND_NEW_SSA_DATA                                                 */
         /*------------------------------------------------------------------*/
         if( VPC3_POLL_IND_NEW_SSA_DATA() )
 8004d7a:	4b3b      	ldr	r3, [pc, #236]	; (8004e68 <VPC3_Poll+0xb3c>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d023      	beq.n	8004dd4 <VPC3_Poll+0xaa8>
         {
            CopyFromVpc3_( (MEM_UNSIGNED8_PTR)&pDpSystem->abPrmCfgSsaHelpBuffer[0], VPC3_GET_SSA_BUF_PTR(), 4 );
 8004d8c:	4b36      	ldr	r3, [pc, #216]	; (8004e68 <VPC3_Poll+0xb3c>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f103 041d 	add.w	r4, r3, #29
 8004d94:	4b2d      	ldr	r3, [pc, #180]	; (8004e4c <VPC3_Poll+0xb20>)
 8004d96:	881b      	ldrh	r3, [r3, #0]
 8004d98:	332e      	adds	r3, #46	; 0x2e
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f001 f8a7 	bl	8005ef0 <Vpc3Read>
 8004da2:	4603      	mov	r3, r0
 8004da4:	00db      	lsls	r3, r3, #3
 8004da6:	4a29      	ldr	r2, [pc, #164]	; (8004e4c <VPC3_Poll+0xb20>)
 8004da8:	8812      	ldrh	r2, [r2, #0]
 8004daa:	4413      	add	r3, r2
 8004dac:	2204      	movs	r2, #4
 8004dae:	4619      	mov	r1, r3
 8004db0:	4620      	mov	r0, r4
 8004db2:	f001 fa93 	bl	80062dc <CopyFromVpc3>
            DpAppl_IsrNewSetSlaveAddress( (MEM_STRUC_SSA_BLOCK_PTR)&pDpSystem->abPrmCfgSsaHelpBuffer[0] );
 8004db6:	4b2c      	ldr	r3, [pc, #176]	; (8004e68 <VPC3_Poll+0xb3c>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	331d      	adds	r3, #29
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f7fc fa4a 	bl	8001256 <DpAppl_IsrNewSetSlaveAddress>

            bResult = VPC3_FREE_SSA_BUF();
 8004dc2:	4b22      	ldr	r3, [pc, #136]	; (8004e4c <VPC3_Poll+0xb20>)
 8004dc4:	881b      	ldrh	r3, [r3, #0]
 8004dc6:	3314      	adds	r3, #20
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f001 f890 	bl	8005ef0 <Vpc3Read>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	70fb      	strb	r3, [r7, #3]
         } /* if( VPC3_POLL_IND_NEW_SSA_DATA() ) */

         /*------------------------------------------------------------------*/
         /* IND_BAUDRATE_DETECT                                              */
         /*------------------------------------------------------------------*/
         if( VPC3_POLL_IND_BAUDRATE_DETECT() )
 8004dd4:	4b24      	ldr	r3, [pc, #144]	; (8004e68 <VPC3_Poll+0xb3c>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	f003 0304 	and.w	r3, r3, #4
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d001      	beq.n	8004dea <VPC3_Poll+0xabe>
         {
            #if DP_MSAC_C2
               MSAC_C2_SetTimeoutIsr();
            #endif /* #if DP_MSAC_C2 */

            DpAppl_IsrBaudrateDetect();
 8004de6:	f7fc fa24 	bl	8001232 <DpAppl_IsrBaudrateDetect>

         #if DP_INTERRUPT_MASK_8BIT == 0

            #if VPC3_SERIAL_MODE

               Vpc3Write( bVpc3WoIntAck_L, (uint8_t)(pDpSystem->wPollInterruptEvent & 0xFF) );
 8004dea:	4b18      	ldr	r3, [pc, #96]	; (8004e4c <VPC3_Poll+0xb20>)
 8004dec:	881b      	ldrh	r3, [r3, #0]
 8004dee:	3302      	adds	r3, #2
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	4b1d      	ldr	r3, [pc, #116]	; (8004e68 <VPC3_Poll+0xb3c>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	4619      	mov	r1, r3
 8004e00:	4610      	mov	r0, r2
 8004e02:	f000 ffc5 	bl	8005d90 <Vpc3Write>
               Vpc3Write( bVpc3WoIntAck_H, (uint8_t)(pDpSystem->wPollInterruptEvent >> 8) );
 8004e06:	4b11      	ldr	r3, [pc, #68]	; (8004e4c <VPC3_Poll+0xb20>)
 8004e08:	881b      	ldrh	r3, [r3, #0]
 8004e0a:	3303      	adds	r3, #3
 8004e0c:	b29a      	uxth	r2, r3
 8004e0e:	4b16      	ldr	r3, [pc, #88]	; (8004e68 <VPC3_Poll+0xb3c>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	0a1b      	lsrs	r3, r3, #8
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	4619      	mov	r1, r3
 8004e20:	4610      	mov	r0, r2
 8004e22:	f000 ffb5 	bl	8005d90 <Vpc3Write>

               CopyToVpc3_( ((uint8_t *)(VPC3_ADR)( Vpc3AsicAddress + 0x02 )), (MEM_UNSIGNED8_PTR)&pDpSystem->wPollInterruptEvent, 2 );

            #endif /* #if VPC3_SERIAL_MODE */

            pDpSystem->wPollInterruptEvent = 0;
 8004e26:	4b10      	ldr	r3, [pc, #64]	; (8004e68 <VPC3_Poll+0xb3c>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	715a      	strb	r2, [r3, #5]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	719a      	strb	r2, [r3, #6]
   #if DP_INTERRUPT_MASK_8BIT == 0

      } /* if( pDpSystem->wPollInterruptEvent > 0 ) */

   #endif /* #if DP_INTERRUPT_MASK_8BIT == 0 */
   return pDpSystem->wPollInterruptEvent;
 8004e32:	4b0d      	ldr	r3, [pc, #52]	; (8004e68 <VPC3_Poll+0xb3c>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8004e3a:	b29b      	uxth	r3, r3
} /* uint16_t VPC3_Poll( void ) */
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3724      	adds	r7, #36	; 0x24
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd90      	pop	{r4, r7, pc}
 8004e44:	08010090 	.word	0x08010090
 8004e48:	080100d0 	.word	0x080100d0
 8004e4c:	20000144 	.word	0x20000144
 8004e50:	08010128 	.word	0x08010128
 8004e54:	0800f9a4 	.word	0x0800f9a4
 8004e58:	0800f9dc 	.word	0x0800f9dc
 8004e5c:	0800fa14 	.word	0x0800fa14
 8004e60:	08010158 	.word	0x08010158
 8004e64:	08010188 	.word	0x08010188
 8004e68:	20000000 	.word	0x20000000
 8004e6c:	080101b8 	.word	0x080101b8
 8004e70:	08010230 	.word	0x08010230
 8004e74:	08010278 	.word	0x08010278
 8004e78:	080102c0 	.word	0x080102c0
 8004e7c:	08010300 	.word	0x08010300
 8004e80:	08010338 	.word	0x08010338
 8004e84:	08010380 	.word	0x08010380
 8004e88:	080103c0 	.word	0x080103c0
 8004e8c:	08010400 	.word	0x08010400
 8004e90:	0801044c 	.word	0x0801044c
 8004e94:	08010490 	.word	0x08010490
 8004e98:	080104d4 	.word	0x080104d4

08004e9c <dp_isr>:
/**
 * @brief  Función que el EXTI-Callback invoca.
 *         En modo polling repite VPC3_Poll, en modo interrupt repite VPC3_Isr.
 */
void dp_isr(void)
{
 8004e9c:	b5b0      	push	{r4, r5, r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
   // --- LOGGING COMPLETO DE ACTIVACIÓN ---
   static uint32_t dp_isr_call_count = 0;
   dp_isr_call_count++;
 8004ea2:	4b81      	ldr	r3, [pc, #516]	; (80050a8 <dp_isr+0x20c>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	4a7f      	ldr	r2, [pc, #508]	; (80050a8 <dp_isr+0x20c>)
 8004eaa:	6013      	str	r3, [r2, #0]
   
   printf("🔍 [dp_isr] === LLAMADA #%lu ===\r\n", dp_isr_call_count);
 8004eac:	4b7e      	ldr	r3, [pc, #504]	; (80050a8 <dp_isr+0x20c>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	487e      	ldr	r0, [pc, #504]	; (80050ac <dp_isr+0x210>)
 8004eb4:	f003 fefc 	bl	8008cb0 <iprintf>
   printf("🔍 [dp_isr] TIMESTAMP: %lu ms\r\n", HAL_GetTick());
 8004eb8:	f001 fb74 	bl	80065a4 <HAL_GetTick>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	487b      	ldr	r0, [pc, #492]	; (80050b0 <dp_isr+0x214>)
 8004ec2:	f003 fef5 	bl	8008cb0 <iprintf>
   printf("🔍 [dp_isr] STACK TRACE - Llamada desde:\r\n");
 8004ec6:	487b      	ldr	r0, [pc, #492]	; (80050b4 <dp_isr+0x218>)
 8004ec8:	f003 ff8e 	bl	8008de8 <puts>
   printf("🔍 [dp_isr] - Función: dp_isr\r\n");
 8004ecc:	487a      	ldr	r0, [pc, #488]	; (80050b8 <dp_isr+0x21c>)
 8004ece:	f003 ff8b 	bl	8008de8 <puts>
   printf("🔍 [dp_isr] - Archivo: ../Core/Src/dp_isr.c\r\n");
 8004ed2:	487a      	ldr	r0, [pc, #488]	; (80050bc <dp_isr+0x220>)
 8004ed4:	f003 ff88 	bl	8008de8 <puts>
   printf("🔍 [dp_isr] - Línea: %d\r\n", __LINE__);
 8004ed8:	f240 2133 	movw	r1, #563	; 0x233
 8004edc:	4878      	ldr	r0, [pc, #480]	; (80050c0 <dp_isr+0x224>)
 8004ede:	f003 fee7 	bl	8008cb0 <iprintf>
   
   // Verificar si es llamada por polling o interrupción
   #if (VPC3_SERIAL_MODE == 0)
      printf("🔍 [dp_isr] MODO: INTERRUPCIÓN (VPC3_Isr)\r\n");
   #else
      printf("🔍 [dp_isr] MODO: POLLING (VPC3_Poll)\r\n");
 8004ee2:	4878      	ldr	r0, [pc, #480]	; (80050c4 <dp_isr+0x228>)
 8004ee4:	f003 ff80 	bl	8008de8 <puts>
   #endif
   
   printf("🔍 [dp_isr] INICIO - STATUS_L=0x%02X, STATUS_H=0x%02X, DP_STATE=0x%02X\r\n",
          VPC3_GET_STATUS_L(), VPC3_GET_STATUS_H(), VPC3_GET_DP_STATE());
 8004ee8:	4b77      	ldr	r3, [pc, #476]	; (80050c8 <dp_isr+0x22c>)
 8004eea:	881b      	ldrh	r3, [r3, #0]
 8004eec:	3304      	adds	r3, #4
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f000 fffd 	bl	8005ef0 <Vpc3Read>
 8004ef6:	4603      	mov	r3, r0
   printf("🔍 [dp_isr] INICIO - STATUS_L=0x%02X, STATUS_H=0x%02X, DP_STATE=0x%02X\r\n",
 8004ef8:	461c      	mov	r4, r3
          VPC3_GET_STATUS_L(), VPC3_GET_STATUS_H(), VPC3_GET_DP_STATE());
 8004efa:	4b73      	ldr	r3, [pc, #460]	; (80050c8 <dp_isr+0x22c>)
 8004efc:	881b      	ldrh	r3, [r3, #0]
 8004efe:	3305      	adds	r3, #5
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	4618      	mov	r0, r3
 8004f04:	f000 fff4 	bl	8005ef0 <Vpc3Read>
 8004f08:	4603      	mov	r3, r0
   printf("🔍 [dp_isr] INICIO - STATUS_L=0x%02X, STATUS_H=0x%02X, DP_STATE=0x%02X\r\n",
 8004f0a:	461d      	mov	r5, r3
          VPC3_GET_STATUS_L(), VPC3_GET_STATUS_H(), VPC3_GET_DP_STATE());
 8004f0c:	4b6e      	ldr	r3, [pc, #440]	; (80050c8 <dp_isr+0x22c>)
 8004f0e:	881b      	ldrh	r3, [r3, #0]
 8004f10:	3304      	adds	r3, #4
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	4618      	mov	r0, r3
 8004f16:	f000 ffeb 	bl	8005ef0 <Vpc3Read>
 8004f1a:	4603      	mov	r3, r0
   printf("🔍 [dp_isr] INICIO - STATUS_L=0x%02X, STATUS_H=0x%02X, DP_STATE=0x%02X\r\n",
 8004f1c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004f20:	462a      	mov	r2, r5
 8004f22:	4621      	mov	r1, r4
 8004f24:	4869      	ldr	r0, [pc, #420]	; (80050cc <dp_isr+0x230>)
 8004f26:	f003 fec3 	bl	8008cb0 <iprintf>
   printf("🔍 [dp_isr] INICIO - Verificando si STATUS_L=0x45 (DATA_EX) y STATUS_H=0xE3\r\n");
 8004f2a:	4869      	ldr	r0, [pc, #420]	; (80050d0 <dp_isr+0x234>)
 8004f2c:	f003 ff5c 	bl	8008de8 <puts>
   
   // --- CRITICAL: Check for MODE_REG_2 corruption during interrupt ---
  uint8_t mode_reg2 = VPC3_GetModeReg2Shadow();
 8004f30:	f000 fe88 	bl	8005c44 <VPC3_GetModeReg2Shadow>
 8004f34:	4603      	mov	r3, r0
 8004f36:	71fb      	strb	r3, [r7, #7]
   printf("🔍 [dp_isr] MODE_REG_2 actual: 0x%02X (esperado: 0x05)\r\n", mode_reg2);
 8004f38:	79fb      	ldrb	r3, [r7, #7]
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	4865      	ldr	r0, [pc, #404]	; (80050d4 <dp_isr+0x238>)
 8004f3e:	f003 feb7 	bl	8008cb0 <iprintf>
   
   if (mode_reg2 != 0x05) {
 8004f42:	79fb      	ldrb	r3, [r7, #7]
 8004f44:	2b05      	cmp	r3, #5
 8004f46:	d010      	beq.n	8004f6a <dp_isr+0xce>
      printf("⚠️ [dp_isr] MODE_REG_2 corruption detected during interrupt: 0x%02X (expected 0x05)\r\n", mode_reg2);
 8004f48:	79fb      	ldrb	r3, [r7, #7]
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	4862      	ldr	r0, [pc, #392]	; (80050d8 <dp_isr+0x23c>)
 8004f4e:	f003 feaf 	bl	8008cb0 <iprintf>
      // Try to recover immediately
      if (VPC3_ForceModeReg2() == 0) {
 8004f52:	f7fe ffc3 	bl	8003edc <VPC3_ForceModeReg2>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d103      	bne.n	8004f64 <dp_isr+0xc8>
         printf("✅ [dp_isr] MODE_REG_2 recovered during interrupt\r\n");
 8004f5c:	485f      	ldr	r0, [pc, #380]	; (80050dc <dp_isr+0x240>)
 8004f5e:	f003 ff43 	bl	8008de8 <puts>
 8004f62:	e002      	b.n	8004f6a <dp_isr+0xce>
      } else {
         printf("❌ [dp_isr] Failed to recover MODE_REG_2 during interrupt\r\n");
 8004f64:	485e      	ldr	r0, [pc, #376]	; (80050e0 <dp_isr+0x244>)
 8004f66:	f003 ff3f 	bl	8008de8 <puts>
      }
   }
   
   // Detectar corrupción de registros
   if (VPC3_GET_STATUS_L() == 0x26 && VPC3_GET_STATUS_H() == 0xB7) {
 8004f6a:	4b57      	ldr	r3, [pc, #348]	; (80050c8 <dp_isr+0x22c>)
 8004f6c:	881b      	ldrh	r3, [r3, #0]
 8004f6e:	3304      	adds	r3, #4
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	4618      	mov	r0, r3
 8004f74:	f000 ffbc 	bl	8005ef0 <Vpc3Read>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b26      	cmp	r3, #38	; 0x26
 8004f7c:	d10c      	bne.n	8004f98 <dp_isr+0xfc>
 8004f7e:	4b52      	ldr	r3, [pc, #328]	; (80050c8 <dp_isr+0x22c>)
 8004f80:	881b      	ldrh	r3, [r3, #0]
 8004f82:	3305      	adds	r3, #5
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	4618      	mov	r0, r3
 8004f88:	f000 ffb2 	bl	8005ef0 <Vpc3Read>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2bb7      	cmp	r3, #183	; 0xb7
 8004f90:	d102      	bne.n	8004f98 <dp_isr+0xfc>
      printf("🔍 [dp_isr] ⚠️ CORRUPCIÓN DETECTADA AL INICIO - STATUS_L=0x26, STATUS_H=0xB7\r\n");
 8004f92:	4854      	ldr	r0, [pc, #336]	; (80050e4 <dp_isr+0x248>)
 8004f94:	f003 ff28 	bl	8008de8 <puts>
   }
   
   // Detectar transición de DATA_EX a corrupción
   static uint8_t last_status_l = 0xFF;
   static uint8_t last_status_h = 0xFF;
   uint8_t current_status_l = VPC3_GET_STATUS_L();
 8004f98:	4b4b      	ldr	r3, [pc, #300]	; (80050c8 <dp_isr+0x22c>)
 8004f9a:	881b      	ldrh	r3, [r3, #0]
 8004f9c:	3304      	adds	r3, #4
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f000 ffa5 	bl	8005ef0 <Vpc3Read>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	71bb      	strb	r3, [r7, #6]
   uint8_t current_status_h = VPC3_GET_STATUS_H();
 8004faa:	4b47      	ldr	r3, [pc, #284]	; (80050c8 <dp_isr+0x22c>)
 8004fac:	881b      	ldrh	r3, [r3, #0]
 8004fae:	3305      	adds	r3, #5
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f000 ff9c 	bl	8005ef0 <Vpc3Read>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	717b      	strb	r3, [r7, #5]
   
   if (last_status_l == 0x45 && last_status_h == 0xE3 && 
 8004fbc:	4b4a      	ldr	r3, [pc, #296]	; (80050e8 <dp_isr+0x24c>)
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	2b45      	cmp	r3, #69	; 0x45
 8004fc2:	d10f      	bne.n	8004fe4 <dp_isr+0x148>
 8004fc4:	4b49      	ldr	r3, [pc, #292]	; (80050ec <dp_isr+0x250>)
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	2be3      	cmp	r3, #227	; 0xe3
 8004fca:	d10b      	bne.n	8004fe4 <dp_isr+0x148>
 8004fcc:	79bb      	ldrb	r3, [r7, #6]
 8004fce:	2b45      	cmp	r3, #69	; 0x45
 8004fd0:	d102      	bne.n	8004fd8 <dp_isr+0x13c>
       (current_status_l != 0x45 || current_status_h != 0xE3)) {
 8004fd2:	797b      	ldrb	r3, [r7, #5]
 8004fd4:	2be3      	cmp	r3, #227	; 0xe3
 8004fd6:	d005      	beq.n	8004fe4 <dp_isr+0x148>
      printf("🔍 [dp_isr] ⚠️ TRANSICIÓN DETECTADA: STATUS_L=0x45->0x%02X, STATUS_H=0xE3->0x%02X\r\n", 
 8004fd8:	79bb      	ldrb	r3, [r7, #6]
 8004fda:	797a      	ldrb	r2, [r7, #5]
 8004fdc:	4619      	mov	r1, r3
 8004fde:	4844      	ldr	r0, [pc, #272]	; (80050f0 <dp_isr+0x254>)
 8004fe0:	f003 fe66 	bl	8008cb0 <iprintf>
             current_status_l, current_status_h);
   }
   
   last_status_l = current_status_l;
 8004fe4:	4a40      	ldr	r2, [pc, #256]	; (80050e8 <dp_isr+0x24c>)
 8004fe6:	79bb      	ldrb	r3, [r7, #6]
 8004fe8:	7013      	strb	r3, [r2, #0]
   last_status_h = current_status_h;
 8004fea:	4a40      	ldr	r2, [pc, #256]	; (80050ec <dp_isr+0x250>)
 8004fec:	797b      	ldrb	r3, [r7, #5]
 8004fee:	7013      	strb	r3, [r2, #0]
   
   printf("🔍 [dp_isr] ANTES de VPC3_Poll/VPC3_Isr - STATUS_L=0x%02X, STATUS_H=0x%02X\r\n",
          VPC3_GET_STATUS_L(), VPC3_GET_STATUS_H());
 8004ff0:	4b35      	ldr	r3, [pc, #212]	; (80050c8 <dp_isr+0x22c>)
 8004ff2:	881b      	ldrh	r3, [r3, #0]
 8004ff4:	3304      	adds	r3, #4
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f000 ff79 	bl	8005ef0 <Vpc3Read>
 8004ffe:	4603      	mov	r3, r0
   printf("🔍 [dp_isr] ANTES de VPC3_Poll/VPC3_Isr - STATUS_L=0x%02X, STATUS_H=0x%02X\r\n",
 8005000:	461c      	mov	r4, r3
          VPC3_GET_STATUS_L(), VPC3_GET_STATUS_H());
 8005002:	4b31      	ldr	r3, [pc, #196]	; (80050c8 <dp_isr+0x22c>)
 8005004:	881b      	ldrh	r3, [r3, #0]
 8005006:	3305      	adds	r3, #5
 8005008:	b29b      	uxth	r3, r3
 800500a:	4618      	mov	r0, r3
 800500c:	f000 ff70 	bl	8005ef0 <Vpc3Read>
 8005010:	4603      	mov	r3, r0
   printf("🔍 [dp_isr] ANTES de VPC3_Poll/VPC3_Isr - STATUS_L=0x%02X, STATUS_H=0x%02X\r\n",
 8005012:	461a      	mov	r2, r3
 8005014:	4621      	mov	r1, r4
 8005016:	4837      	ldr	r0, [pc, #220]	; (80050f4 <dp_isr+0x258>)
 8005018:	f003 fe4a 	bl	8008cb0 <iprintf>
   
#if (VPC3_SERIAL_MODE == 0)
    VPC3_Isr();
#else
    VPC3_Poll();
 800501c:	f7ff f986 	bl	800432c <VPC3_Poll>
#endif

   printf("🔍 [dp_isr] DESPUÉS de VPC3_Poll/VPC3_Isr - STATUS_L=0x%02X, STATUS_H=0x%02X\r\n",
          VPC3_GET_STATUS_L(), VPC3_GET_STATUS_H());
 8005020:	4b29      	ldr	r3, [pc, #164]	; (80050c8 <dp_isr+0x22c>)
 8005022:	881b      	ldrh	r3, [r3, #0]
 8005024:	3304      	adds	r3, #4
 8005026:	b29b      	uxth	r3, r3
 8005028:	4618      	mov	r0, r3
 800502a:	f000 ff61 	bl	8005ef0 <Vpc3Read>
 800502e:	4603      	mov	r3, r0
   printf("🔍 [dp_isr] DESPUÉS de VPC3_Poll/VPC3_Isr - STATUS_L=0x%02X, STATUS_H=0x%02X\r\n",
 8005030:	461c      	mov	r4, r3
          VPC3_GET_STATUS_L(), VPC3_GET_STATUS_H());
 8005032:	4b25      	ldr	r3, [pc, #148]	; (80050c8 <dp_isr+0x22c>)
 8005034:	881b      	ldrh	r3, [r3, #0]
 8005036:	3305      	adds	r3, #5
 8005038:	b29b      	uxth	r3, r3
 800503a:	4618      	mov	r0, r3
 800503c:	f000 ff58 	bl	8005ef0 <Vpc3Read>
 8005040:	4603      	mov	r3, r0
   printf("🔍 [dp_isr] DESPUÉS de VPC3_Poll/VPC3_Isr - STATUS_L=0x%02X, STATUS_H=0x%02X\r\n",
 8005042:	461a      	mov	r2, r3
 8005044:	4621      	mov	r1, r4
 8005046:	482c      	ldr	r0, [pc, #176]	; (80050f8 <dp_isr+0x25c>)
 8005048:	f003 fe32 	bl	8008cb0 <iprintf>
   printf("🔍 [dp_isr] FIN - STATUS_L=0x%02X, STATUS_H=0x%02X, DP_STATE=0x%02X\r\n",
          VPC3_GET_STATUS_L(), VPC3_GET_STATUS_H(), VPC3_GET_DP_STATE());
 800504c:	4b1e      	ldr	r3, [pc, #120]	; (80050c8 <dp_isr+0x22c>)
 800504e:	881b      	ldrh	r3, [r3, #0]
 8005050:	3304      	adds	r3, #4
 8005052:	b29b      	uxth	r3, r3
 8005054:	4618      	mov	r0, r3
 8005056:	f000 ff4b 	bl	8005ef0 <Vpc3Read>
 800505a:	4603      	mov	r3, r0
   printf("🔍 [dp_isr] FIN - STATUS_L=0x%02X, STATUS_H=0x%02X, DP_STATE=0x%02X\r\n",
 800505c:	461c      	mov	r4, r3
          VPC3_GET_STATUS_L(), VPC3_GET_STATUS_H(), VPC3_GET_DP_STATE());
 800505e:	4b1a      	ldr	r3, [pc, #104]	; (80050c8 <dp_isr+0x22c>)
 8005060:	881b      	ldrh	r3, [r3, #0]
 8005062:	3305      	adds	r3, #5
 8005064:	b29b      	uxth	r3, r3
 8005066:	4618      	mov	r0, r3
 8005068:	f000 ff42 	bl	8005ef0 <Vpc3Read>
 800506c:	4603      	mov	r3, r0
   printf("🔍 [dp_isr] FIN - STATUS_L=0x%02X, STATUS_H=0x%02X, DP_STATE=0x%02X\r\n",
 800506e:	461d      	mov	r5, r3
          VPC3_GET_STATUS_L(), VPC3_GET_STATUS_H(), VPC3_GET_DP_STATE());
 8005070:	4b15      	ldr	r3, [pc, #84]	; (80050c8 <dp_isr+0x22c>)
 8005072:	881b      	ldrh	r3, [r3, #0]
 8005074:	3304      	adds	r3, #4
 8005076:	b29b      	uxth	r3, r3
 8005078:	4618      	mov	r0, r3
 800507a:	f000 ff39 	bl	8005ef0 <Vpc3Read>
 800507e:	4603      	mov	r3, r0
   printf("🔍 [dp_isr] FIN - STATUS_L=0x%02X, STATUS_H=0x%02X, DP_STATE=0x%02X\r\n",
 8005080:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005084:	462a      	mov	r2, r5
 8005086:	4621      	mov	r1, r4
 8005088:	481c      	ldr	r0, [pc, #112]	; (80050fc <dp_isr+0x260>)
 800508a:	f003 fe11 	bl	8008cb0 <iprintf>
   printf("🔍 [dp_isr] FIN - Verificando si STATUS_L=0x45 (DATA_EX) y STATUS_H=0xE3\r\n");
 800508e:	481c      	ldr	r0, [pc, #112]	; (8005100 <dp_isr+0x264>)
 8005090:	f003 feaa 	bl	8008de8 <puts>
   printf("🔍 [dp_isr] === FIN LLAMADA #%lu ===\r\n", dp_isr_call_count);
 8005094:	4b04      	ldr	r3, [pc, #16]	; (80050a8 <dp_isr+0x20c>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4619      	mov	r1, r3
 800509a:	481a      	ldr	r0, [pc, #104]	; (8005104 <dp_isr+0x268>)
 800509c:	f003 fe08 	bl	8008cb0 <iprintf>
}
 80050a0:	bf00      	nop
 80050a2:	3708      	adds	r7, #8
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bdb0      	pop	{r4, r5, r7, pc}
 80050a8:	200000c8 	.word	0x200000c8
 80050ac:	080104fc 	.word	0x080104fc
 80050b0:	08010524 	.word	0x08010524
 80050b4:	08010548 	.word	0x08010548
 80050b8:	08010574 	.word	0x08010574
 80050bc:	08010598 	.word	0x08010598
 80050c0:	080105c8 	.word	0x080105c8
 80050c4:	080105e8 	.word	0x080105e8
 80050c8:	20000144 	.word	0x20000144
 80050cc:	08010614 	.word	0x08010614
 80050d0:	08010660 	.word	0x08010660
 80050d4:	080106b0 	.word	0x080106b0
 80050d8:	080106ec 	.word	0x080106ec
 80050dc:	08010748 	.word	0x08010748
 80050e0:	0801077c 	.word	0x0801077c
 80050e4:	080107b8 	.word	0x080107b8
 80050e8:	2000000b 	.word	0x2000000b
 80050ec:	2000000c 	.word	0x2000000c
 80050f0:	08010810 	.word	0x08010810
 80050f4:	0801086c 	.word	0x0801086c
 80050f8:	080108bc 	.word	0x080108bc
 80050fc:	08010910 	.word	0x08010910
 8005100:	08010958 	.word	0x08010958
 8005104:	080109a4 	.word	0x080109a4

08005108 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8005110:	1d39      	adds	r1, r7, #4
 8005112:	f04f 33ff 	mov.w	r3, #4294967295
 8005116:	2201      	movs	r2, #1
 8005118:	4803      	ldr	r0, [pc, #12]	; (8005128 <__io_putchar+0x20>)
 800511a:	f003 fac0 	bl	800869e <HAL_UART_Transmit>
	return ch;
 800511e:	687b      	ldr	r3, [r7, #4]
}
 8005120:	4618      	mov	r0, r3
 8005122:	3708      	adds	r7, #8
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}
 8005128:	20000534 	.word	0x20000534

0800512c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b086      	sub	sp, #24
 8005130:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8005132:	f001 f9d1 	bl	80064d8 <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8005136:	f000 f99b 	bl	8005470 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800513a:	f000 fa65 	bl	8005608 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800513e:	f000 fa39 	bl	80055b4 <MX_USART2_UART_Init>
	MX_SPI1_Init();
 8005142:	f000 fa01 	bl	8005548 <MX_SPI1_Init>

	/* USER CODE BEGIN 2 */
    
    printf("\r\n");
 8005146:	48a5      	ldr	r0, [pc, #660]	; (80053dc <main+0x2b0>)
 8005148:	f003 fe4e 	bl	8008de8 <puts>
    printf("==============================================================================\r\n");
 800514c:	48a4      	ldr	r0, [pc, #656]	; (80053e0 <main+0x2b4>)
 800514e:	f003 fe4b 	bl	8008de8 <puts>
    printf("    VPC3+S PROFIBUS Slave - Standard Initialization Approach\r\n");
 8005152:	48a4      	ldr	r0, [pc, #656]	; (80053e4 <main+0x2b8>)
 8005154:	f003 fe48 	bl	8008de8 <puts>
    printf("==============================================================================\r\n");
 8005158:	48a1      	ldr	r0, [pc, #644]	; (80053e0 <main+0x2b4>)
 800515a:	f003 fe45 	bl	8008de8 <puts>
    printf("\r\n");
 800515e:	489f      	ldr	r0, [pc, #636]	; (80053dc <main+0x2b0>)
 8005160:	f003 fe42 	bl	8008de8 <puts>
    printf("Using standard DpAppl_ProfibusInit() for complete initialization\r\n");
 8005164:	48a0      	ldr	r0, [pc, #640]	; (80053e8 <main+0x2bc>)
 8005166:	f003 fe3f 	bl	8008de8 <puts>
    printf("\r\n");
 800516a:	489c      	ldr	r0, [pc, #624]	; (80053dc <main+0x2b0>)
 800516c:	f003 fe3c 	bl	8008de8 <puts>

    // Perform hardware reset of VPC3+S before initialization
    printf("Performing VPC3+S hardware reset...\r\n");
 8005170:	489e      	ldr	r0, [pc, #632]	; (80053ec <main+0x2c0>)
 8005172:	f003 fe39 	bl	8008de8 <puts>
    HAL_GPIO_WritePin(VPC3_RESET_PORT, VPC3_RESET_PIN, GPIO_PIN_RESET);  // Assert reset
 8005176:	2200      	movs	r2, #0
 8005178:	2110      	movs	r1, #16
 800517a:	489d      	ldr	r0, [pc, #628]	; (80053f0 <main+0x2c4>)
 800517c:	f001 fd9c 	bl	8006cb8 <HAL_GPIO_WritePin>
    HAL_Delay(10);                                                       // Hold reset for 10ms
 8005180:	200a      	movs	r0, #10
 8005182:	f001 fa1b 	bl	80065bc <HAL_Delay>
    HAL_GPIO_WritePin(VPC3_RESET_PORT, VPC3_RESET_PIN, GPIO_PIN_SET);   // Release reset
 8005186:	2201      	movs	r2, #1
 8005188:	2110      	movs	r1, #16
 800518a:	4899      	ldr	r0, [pc, #612]	; (80053f0 <main+0x2c4>)
 800518c:	f001 fd94 	bl	8006cb8 <HAL_GPIO_WritePin>
    HAL_Delay(50);                                                       // Wait longer for chip to stabilize
 8005190:	2032      	movs	r0, #50	; 0x32
 8005192:	f001 fa13 	bl	80065bc <HAL_Delay>
    printf("Hardware reset completed.\r\n");
 8005196:	4897      	ldr	r0, [pc, #604]	; (80053f4 <main+0x2c8>)
 8005198:	f003 fe26 	bl	8008de8 <puts>
    
    // Check initial VPC3+ status after hardware reset
    printf("Reading initial VPC3+ status...\r\n");
 800519c:	4896      	ldr	r0, [pc, #600]	; (80053f8 <main+0x2cc>)
 800519e:	f003 fe23 	bl	8008de8 <puts>
    extern uint8_t Vpc3Read(uint16_t address);
    extern void Vpc3Write(uint16_t address, uint8_t data);
    
    uint8_t status_lo_initial = Vpc3Read(0x04);
 80051a2:	2004      	movs	r0, #4
 80051a4:	f000 fea4 	bl	8005ef0 <Vpc3Read>
 80051a8:	4603      	mov	r3, r0
 80051aa:	72fb      	strb	r3, [r7, #11]
    uint8_t status_hi_initial = Vpc3Read(0x05);
 80051ac:	2005      	movs	r0, #5
 80051ae:	f000 fe9f 	bl	8005ef0 <Vpc3Read>
 80051b2:	4603      	mov	r3, r0
 80051b4:	72bb      	strb	r3, [r7, #10]
    printf("Status Register (hi,low): 0x%02X%02X\r\n", status_hi_initial, status_lo_initial);
 80051b6:	7abb      	ldrb	r3, [r7, #10]
 80051b8:	7afa      	ldrb	r2, [r7, #11]
 80051ba:	4619      	mov	r1, r3
 80051bc:	488f      	ldr	r0, [pc, #572]	; (80053fc <main+0x2d0>)
 80051be:	f003 fd77 	bl	8008cb0 <iprintf>
    printf("\r\n");
 80051c2:	4886      	ldr	r0, [pc, #536]	; (80053dc <main+0x2b0>)
 80051c4:	f003 fe10 	bl	8008de8 <puts>
    
    // Force VPC3+ to OFFLINE state before initialization
    printf("Forcing VPC3+ to OFFLINE state...\r\n");
 80051c8:	488d      	ldr	r0, [pc, #564]	; (8005400 <main+0x2d4>)
 80051ca:	f003 fe0d 	bl	8008de8 <puts>
    uint8_t status_before = Vpc3Read(0x04);
 80051ce:	2004      	movs	r0, #4
 80051d0:	f000 fe8e 	bl	8005ef0 <Vpc3Read>
 80051d4:	4603      	mov	r3, r0
 80051d6:	727b      	strb	r3, [r7, #9]
    printf("Status before GO_OFFLINE: 0x%02X\r\n", status_before);
 80051d8:	7a7b      	ldrb	r3, [r7, #9]
 80051da:	4619      	mov	r1, r3
 80051dc:	4889      	ldr	r0, [pc, #548]	; (8005404 <main+0x2d8>)
 80051de:	f003 fd67 	bl	8008cb0 <iprintf>
    
    // Send GO_OFFLINE command
    Vpc3Write(0x08, 0x04);  // VPC3_GO_OFFLINE command
 80051e2:	2104      	movs	r1, #4
 80051e4:	2008      	movs	r0, #8
 80051e6:	f000 fdd3 	bl	8005d90 <Vpc3Write>
    HAL_Delay(20);          // Wait for command to take effect
 80051ea:	2014      	movs	r0, #20
 80051ec:	f001 f9e6 	bl	80065bc <HAL_Delay>
    
    uint8_t status_after = Vpc3Read(0x04);
 80051f0:	2004      	movs	r0, #4
 80051f2:	f000 fe7d 	bl	8005ef0 <Vpc3Read>
 80051f6:	4603      	mov	r3, r0
 80051f8:	75fb      	strb	r3, [r7, #23]
    printf("Status after GO_OFFLINE: 0x%02X\r\n", status_after);
 80051fa:	7dfb      	ldrb	r3, [r7, #23]
 80051fc:	4619      	mov	r1, r3
 80051fe:	4882      	ldr	r0, [pc, #520]	; (8005408 <main+0x2dc>)
 8005200:	f003 fd56 	bl	8008cb0 <iprintf>
    
    if (status_after & 0x01) {
 8005204:	7dfb      	ldrb	r3, [r7, #23]
 8005206:	f003 0301 	and.w	r3, r3, #1
 800520a:	2b00      	cmp	r3, #0
 800520c:	d01a      	beq.n	8005244 <main+0x118>
        printf("WARNING: VPC3+ still not in OFFLINE state, trying again...\r\n");
 800520e:	487f      	ldr	r0, [pc, #508]	; (800540c <main+0x2e0>)
 8005210:	f003 fdea 	bl	8008de8 <puts>
        // Try a different approach - send RESET command first
        Vpc3Write(0x08, 0x02);  // VPC3_RESET command
 8005214:	2102      	movs	r1, #2
 8005216:	2008      	movs	r0, #8
 8005218:	f000 fdba 	bl	8005d90 <Vpc3Write>
        HAL_Delay(50);
 800521c:	2032      	movs	r0, #50	; 0x32
 800521e:	f001 f9cd 	bl	80065bc <HAL_Delay>
        Vpc3Write(0x08, 0x04);  // VPC3_GO_OFFLINE command
 8005222:	2104      	movs	r1, #4
 8005224:	2008      	movs	r0, #8
 8005226:	f000 fdb3 	bl	8005d90 <Vpc3Write>
        HAL_Delay(20);
 800522a:	2014      	movs	r0, #20
 800522c:	f001 f9c6 	bl	80065bc <HAL_Delay>
        
        status_after = Vpc3Read(0x04);
 8005230:	2004      	movs	r0, #4
 8005232:	f000 fe5d 	bl	8005ef0 <Vpc3Read>
 8005236:	4603      	mov	r3, r0
 8005238:	75fb      	strb	r3, [r7, #23]
        printf("Status after RESET+GO_OFFLINE: 0x%02X\r\n", status_after);
 800523a:	7dfb      	ldrb	r3, [r7, #23]
 800523c:	4619      	mov	r1, r3
 800523e:	4874      	ldr	r0, [pc, #464]	; (8005410 <main+0x2e4>)
 8005240:	f003 fd36 	bl	8008cb0 <iprintf>
    }
    
    if (!(status_after & 0x01)) {
 8005244:	7dfb      	ldrb	r3, [r7, #23]
 8005246:	f003 0301 	and.w	r3, r3, #1
 800524a:	2b00      	cmp	r3, #0
 800524c:	d102      	bne.n	8005254 <main+0x128>
        printf("SUCCESS: VPC3+ is now in OFFLINE state\r\n");
 800524e:	4871      	ldr	r0, [pc, #452]	; (8005414 <main+0x2e8>)
 8005250:	f003 fdca 	bl	8008de8 <puts>
    }
    printf("\r\n");
 8005254:	4861      	ldr	r0, [pc, #388]	; (80053dc <main+0x2b0>)
 8005256:	f003 fdc7 	bl	8008de8 <puts>
    // - DpDiag_Init()   - Diagnostics initialization
    // - VPC3_MemoryTest() - Memory verification
    // - VPC3_Initialization() - VPC3 chip initialization
    // - VPC3_Start()    - Start the VPC3 chip
    
    printf("Initializing PROFIBUS with configuration:\r\n");
 800525a:	486f      	ldr	r0, [pc, #444]	; (8005418 <main+0x2ec>)
 800525c:	f003 fdc4 	bl	8008de8 <puts>
	print_vpc3_registers();
 8005260:	f000 fa60 	bl	8005724 <print_vpc3_registers>
    printf("  - Slave Address: %d (0x%02X)\r\n", DP_ADDR, DP_ADDR);
 8005264:	2207      	movs	r2, #7
 8005266:	2107      	movs	r1, #7
 8005268:	486c      	ldr	r0, [pc, #432]	; (800541c <main+0x2f0>)
 800526a:	f003 fd21 	bl	8008cb0 <iprintf>
    printf("  - Ident Number:  0x%04X\r\n", IDENT_NR);
 800526e:	f64a 51ac 	movw	r1, #44460	; 0xadac
 8005272:	486b      	ldr	r0, [pc, #428]	; (8005420 <main+0x2f4>)
 8005274:	f003 fd1c 	bl	8008cb0 <iprintf>
    printf("  - GSD File:      Profibus.gsd\r\n");
 8005278:	486a      	ldr	r0, [pc, #424]	; (8005424 <main+0x2f8>)
 800527a:	f003 fdb5 	bl	8008de8 <puts>
    printf("\r\n");
 800527e:	4857      	ldr	r0, [pc, #348]	; (80053dc <main+0x2b0>)
 8005280:	f003 fdb2 	bl	8008de8 <puts>
    
    DpAppl_ProfibusInit();
 8005284:	f7fb fa78 	bl	8000778 <DpAppl_ProfibusInit>
    printf("PROFIBUS initialization completed successfully!\r\n");
 8005288:	4867      	ldr	r0, [pc, #412]	; (8005428 <main+0x2fc>)
 800528a:	f003 fdad 	bl	8008de8 <puts>
    printf("\r\n");
 800528e:	4853      	ldr	r0, [pc, #332]	; (80053dc <main+0x2b0>)
 8005290:	f003 fdaa 	bl	8008de8 <puts>
    // printf("DEBUG: Llamando a DpDiag_ResetDiagnosticBuffer() para forzar diagnóstico inicial...\r\n");
    // extern void DpDiag_ResetDiagnosticBuffer(void);
    // DpDiag_ResetDiagnosticBuffer();
    // printf("DEBUG: DpDiag_ResetDiagnosticBuffer() llamada.\r\n");
    
    HAL_Delay(2000);          // Wait for command to take effect and stabilize VPC3+
 8005294:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005298:	f001 f990 	bl	80065bc <HAL_Delay>
    // Check final VPC3+ status after complete initialization
    printf("Reading final VPC3+ status...\r\n");
 800529c:	4863      	ldr	r0, [pc, #396]	; (800542c <main+0x300>)
 800529e:	f003 fda3 	bl	8008de8 <puts>
	print_vpc3_registers();
 80052a2:	f000 fa3f 	bl	8005724 <print_vpc3_registers>
    uint8_t status_lo_final = Vpc3Read(0x04);
 80052a6:	2004      	movs	r0, #4
 80052a8:	f000 fe22 	bl	8005ef0 <Vpc3Read>
 80052ac:	4603      	mov	r3, r0
 80052ae:	723b      	strb	r3, [r7, #8]
    uint8_t status_hi_final = Vpc3Read(0x05);
 80052b0:	2005      	movs	r0, #5
 80052b2:	f000 fe1d 	bl	8005ef0 <Vpc3Read>
 80052b6:	4603      	mov	r3, r0
 80052b8:	71fb      	strb	r3, [r7, #7]
    printf("Status Register (hi,low): 0x%02X%02X\r\n", status_hi_final, status_lo_final);
 80052ba:	79fb      	ldrb	r3, [r7, #7]
 80052bc:	7a3a      	ldrb	r2, [r7, #8]
 80052be:	4619      	mov	r1, r3
 80052c0:	484e      	ldr	r0, [pc, #312]	; (80053fc <main+0x2d0>)
 80052c2:	f003 fcf5 	bl	8008cb0 <iprintf>
    printf("\r\n");
 80052c6:	4845      	ldr	r0, [pc, #276]	; (80053dc <main+0x2b0>)
 80052c8:	f003 fd8e 	bl	8008de8 <puts>
    
    printf("Entering main operation loop...\r\n");
 80052cc:	4858      	ldr	r0, [pc, #352]	; (8005430 <main+0x304>)
 80052ce:	f003 fd8b 	bl	8008de8 <puts>
    printf("The PROFIBUS slave is now ready for master communication.\r\n");
 80052d2:	4858      	ldr	r0, [pc, #352]	; (8005434 <main+0x308>)
 80052d4:	f003 fd88 	bl	8008de8 <puts>
    printf("\r\n");
 80052d8:	4840      	ldr	r0, [pc, #256]	; (80053dc <main+0x2b0>)
 80052da:	f003 fd85 	bl	8008de8 <puts>
    printf("================= PLC CONFIGURATION REQUIRED =================\r\n");
 80052de:	4856      	ldr	r0, [pc, #344]	; (8005438 <main+0x30c>)
 80052e0:	f003 fd82 	bl	8008de8 <puts>
    printf("1. Load GSD file:     Profibus.gsd\r\n");
 80052e4:	4855      	ldr	r0, [pc, #340]	; (800543c <main+0x310>)
 80052e6:	f003 fd7f 	bl	8008de8 <puts>
    printf("2. Set slave address: %d (0x%02X)\r\n", DP_ADDR, DP_ADDR);
 80052ea:	2207      	movs	r2, #7
 80052ec:	2107      	movs	r1, #7
 80052ee:	4854      	ldr	r0, [pc, #336]	; (8005440 <main+0x314>)
 80052f0:	f003 fcde 	bl	8008cb0 <iprintf>
    printf("3. Connect PROFIBUS cable and activate communication\r\n");
 80052f4:	4853      	ldr	r0, [pc, #332]	; (8005444 <main+0x318>)
 80052f6:	f003 fd77 	bl	8008de8 <puts>
    printf("================================================================\r\n");
 80052fa:	4853      	ldr	r0, [pc, #332]	; (8005448 <main+0x31c>)
 80052fc:	f003 fd74 	bl	8008de8 <puts>
    printf("\r\n");
 8005300:	4836      	ldr	r0, [pc, #216]	; (80053dc <main+0x2b0>)
 8005302:	f003 fd71 	bl	8008de8 <puts>

    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    	uint32_t last_heartbeat = 0;
 8005306:	2300      	movs	r3, #0
 8005308:	613b      	str	r3, [r7, #16]
    uint32_t last_debug = 0;
 800530a:	2300      	movs	r3, #0
 800530c:	60fb      	str	r3, [r7, #12]
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

        // Process PROFIBUS communication
        DpAppl_ProfibusMain();
 800530e:	f7fb fab7 	bl	8000880 <DpAppl_ProfibusMain>
        HAL_Delay(1);
 8005312:	2001      	movs	r0, #1
 8005314:	f001 f952 	bl	80065bc <HAL_Delay>

        // Check PROFIBUS state from VPC3+
        uint8_t current_status_l = Vpc3Read(0x04);
 8005318:	2004      	movs	r0, #4
 800531a:	f000 fde9 	bl	8005ef0 <Vpc3Read>
 800531e:	4603      	mov	r3, r0
 8005320:	71bb      	strb	r3, [r7, #6]
        // Note: MASK_DP_STATE and DATA_EX come from dp_if.h
        // The state is in bits 6 and 5 of STATUS_L
        uint8_t dp_state = (current_status_l & MASK_DP_STATE) >> 5;
 8005322:	79bb      	ldrb	r3, [r7, #6]
 8005324:	115b      	asrs	r3, r3, #5
 8005326:	b2db      	uxtb	r3, r3
 8005328:	f003 0303 	and.w	r3, r3, #3
 800532c:	717b      	strb	r3, [r7, #5]

        // --- Application State Machine ---
        if (app_state == APP_WAITING_CFG && dp_state == DATA_EX) {
 800532e:	4b47      	ldr	r3, [pc, #284]	; (800544c <main+0x320>)
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d109      	bne.n	800534a <main+0x21e>
 8005336:	797b      	ldrb	r3, [r7, #5]
 8005338:	2b02      	cmp	r3, #2
 800533a:	d106      	bne.n	800534a <main+0x21e>
            printf("\r\n[APP_STATE_CHANGE] Entered DATA_EXCHANGE mode.\r\n\r\n");
 800533c:	4844      	ldr	r0, [pc, #272]	; (8005450 <main+0x324>)
 800533e:	f003 fd53 	bl	8008de8 <puts>
            app_state = APP_IN_DATA_EX;
 8005342:	4b42      	ldr	r3, [pc, #264]	; (800544c <main+0x320>)
 8005344:	2201      	movs	r2, #1
 8005346:	701a      	strb	r2, [r3, #0]
 8005348:	e015      	b.n	8005376 <main+0x24a>
        } else if (app_state == APP_IN_DATA_EX && dp_state != DATA_EX) {
 800534a:	4b40      	ldr	r3, [pc, #256]	; (800544c <main+0x320>)
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	2b01      	cmp	r3, #1
 8005350:	d111      	bne.n	8005376 <main+0x24a>
 8005352:	797b      	ldrb	r3, [r7, #5]
 8005354:	2b02      	cmp	r3, #2
 8005356:	d00e      	beq.n	8005376 <main+0x24a>
            printf("\r\n[APP_STATE_CHANGE] WARNING: Left DATA_EXCHANGE unexpectedly!\r\n");
 8005358:	483e      	ldr	r0, [pc, #248]	; (8005454 <main+0x328>)
 800535a:	f003 fd45 	bl	8008de8 <puts>
            printf("                     STATUS_L is now 0x%02X, DP_STATE is %d.\r\n", current_status_l, dp_state);
 800535e:	79bb      	ldrb	r3, [r7, #6]
 8005360:	797a      	ldrb	r2, [r7, #5]
 8005362:	4619      	mov	r1, r3
 8005364:	483c      	ldr	r0, [pc, #240]	; (8005458 <main+0x32c>)
 8005366:	f003 fca3 	bl	8008cb0 <iprintf>
            printf("                     Returning to wait for new configuration.\r\n\r\n");
 800536a:	483c      	ldr	r0, [pc, #240]	; (800545c <main+0x330>)
 800536c:	f003 fd3c 	bl	8008de8 <puts>
            app_state = APP_WAITING_CFG;
 8005370:	4b36      	ldr	r3, [pc, #216]	; (800544c <main+0x320>)
 8005372:	2200      	movs	r2, #0
 8005374:	701a      	strb	r2, [r3, #0]
        }

        // Detailed log every 5 seconds
        if (HAL_GetTick() - last_debug > 5000) {
 8005376:	f001 f915 	bl	80065a4 <HAL_GetTick>
 800537a:	4602      	mov	r2, r0
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	f241 3288 	movw	r2, #5000	; 0x1388
 8005384:	4293      	cmp	r3, r2
 8005386:	d90c      	bls.n	80053a2 <main+0x276>
            print_vpc3_registers();
 8005388:	f000 f9cc 	bl	8005724 <print_vpc3_registers>
            printf("==============================================\r\n");
 800538c:	4834      	ldr	r0, [pc, #208]	; (8005460 <main+0x334>)
 800538e:	f003 fd2b 	bl	8008de8 <puts>
            print_vpc3_state();
 8005392:	f000 fa43 	bl	800581c <print_vpc3_state>
            printf("==============================================\r\n");
 8005396:	4832      	ldr	r0, [pc, #200]	; (8005460 <main+0x334>)
 8005398:	f003 fd26 	bl	8008de8 <puts>
            last_debug = HAL_GetTick();
 800539c:	f001 f902 	bl	80065a4 <HAL_GetTick>
 80053a0:	60f8      	str	r0, [r7, #12]
        }

        // Heartbeat every 2 seconds
        if (HAL_GetTick() - last_heartbeat > 2000) {
 80053a2:	f001 f8ff 	bl	80065a4 <HAL_GetTick>
 80053a6:	4602      	mov	r2, r0
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80053b0:	d9ad      	bls.n	800530e <main+0x1e2>
            printf("[HEARTBEAT] El sistema está vivo. STATUS_L: 0x%02X\r\n", current_status_l);
 80053b2:	79bb      	ldrb	r3, [r7, #6]
 80053b4:	4619      	mov	r1, r3
 80053b6:	482b      	ldr	r0, [pc, #172]	; (8005464 <main+0x338>)
 80053b8:	f003 fc7a 	bl	8008cb0 <iprintf>
            if (app_state == APP_WAITING_CFG) {
 80053bc:	4b23      	ldr	r3, [pc, #140]	; (800544c <main+0x320>)
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d103      	bne.n	80053cc <main+0x2a0>
                printf("[INFO] State: Waiting for Chk_Cfg from master...\r\n");
 80053c4:	4828      	ldr	r0, [pc, #160]	; (8005468 <main+0x33c>)
 80053c6:	f003 fd0f 	bl	8008de8 <puts>
 80053ca:	e002      	b.n	80053d2 <main+0x2a6>
            } else {
                printf("[INFO] State: DATA_EXCHANGE active.\r\n");
 80053cc:	4827      	ldr	r0, [pc, #156]	; (800546c <main+0x340>)
 80053ce:	f003 fd0b 	bl	8008de8 <puts>
            }
            last_heartbeat = HAL_GetTick();
 80053d2:	f001 f8e7 	bl	80065a4 <HAL_GetTick>
 80053d6:	6138      	str	r0, [r7, #16]
	{
 80053d8:	e799      	b.n	800530e <main+0x1e2>
 80053da:	bf00      	nop
 80053dc:	080109d0 	.word	0x080109d0
 80053e0:	080109d4 	.word	0x080109d4
 80053e4:	08010a24 	.word	0x08010a24
 80053e8:	08010a64 	.word	0x08010a64
 80053ec:	08010aa8 	.word	0x08010aa8
 80053f0:	40020400 	.word	0x40020400
 80053f4:	08010ad0 	.word	0x08010ad0
 80053f8:	08010aec 	.word	0x08010aec
 80053fc:	08010b10 	.word	0x08010b10
 8005400:	08010b38 	.word	0x08010b38
 8005404:	08010b5c 	.word	0x08010b5c
 8005408:	08010b80 	.word	0x08010b80
 800540c:	08010ba4 	.word	0x08010ba4
 8005410:	08010be0 	.word	0x08010be0
 8005414:	08010c08 	.word	0x08010c08
 8005418:	08010c30 	.word	0x08010c30
 800541c:	08010c5c 	.word	0x08010c5c
 8005420:	08010c80 	.word	0x08010c80
 8005424:	08010c9c 	.word	0x08010c9c
 8005428:	08010cc0 	.word	0x08010cc0
 800542c:	08010cf4 	.word	0x08010cf4
 8005430:	08010d14 	.word	0x08010d14
 8005434:	08010d38 	.word	0x08010d38
 8005438:	08010d74 	.word	0x08010d74
 800543c:	08010db4 	.word	0x08010db4
 8005440:	08010dd8 	.word	0x08010dd8
 8005444:	08010dfc 	.word	0x08010dfc
 8005448:	08010e34 	.word	0x08010e34
 800544c:	200000cc 	.word	0x200000cc
 8005450:	08010e78 	.word	0x08010e78
 8005454:	08010eac 	.word	0x08010eac
 8005458:	08010eec 	.word	0x08010eec
 800545c:	08010f2c 	.word	0x08010f2c
 8005460:	08010f70 	.word	0x08010f70
 8005464:	08010fa0 	.word	0x08010fa0
 8005468:	08010fd8 	.word	0x08010fd8
 800546c:	0801100c 	.word	0x0801100c

08005470 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b094      	sub	sp, #80	; 0x50
 8005474:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005476:	f107 0320 	add.w	r3, r7, #32
 800547a:	2230      	movs	r2, #48	; 0x30
 800547c:	2100      	movs	r1, #0
 800547e:	4618      	mov	r0, r3
 8005480:	f003 fc0e 	bl	8008ca0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005484:	f107 030c 	add.w	r3, r7, #12
 8005488:	2200      	movs	r2, #0
 800548a:	601a      	str	r2, [r3, #0]
 800548c:	605a      	str	r2, [r3, #4]
 800548e:	609a      	str	r2, [r3, #8]
 8005490:	60da      	str	r2, [r3, #12]
 8005492:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005494:	2300      	movs	r3, #0
 8005496:	60bb      	str	r3, [r7, #8]
 8005498:	4b29      	ldr	r3, [pc, #164]	; (8005540 <SystemClock_Config+0xd0>)
 800549a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549c:	4a28      	ldr	r2, [pc, #160]	; (8005540 <SystemClock_Config+0xd0>)
 800549e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054a2:	6413      	str	r3, [r2, #64]	; 0x40
 80054a4:	4b26      	ldr	r3, [pc, #152]	; (8005540 <SystemClock_Config+0xd0>)
 80054a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054ac:	60bb      	str	r3, [r7, #8]
 80054ae:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80054b0:	2300      	movs	r3, #0
 80054b2:	607b      	str	r3, [r7, #4]
 80054b4:	4b23      	ldr	r3, [pc, #140]	; (8005544 <SystemClock_Config+0xd4>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80054bc:	4a21      	ldr	r2, [pc, #132]	; (8005544 <SystemClock_Config+0xd4>)
 80054be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054c2:	6013      	str	r3, [r2, #0]
 80054c4:	4b1f      	ldr	r3, [pc, #124]	; (8005544 <SystemClock_Config+0xd4>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80054cc:	607b      	str	r3, [r7, #4]
 80054ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80054d0:	2302      	movs	r3, #2
 80054d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80054d4:	2301      	movs	r3, #1
 80054d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80054d8:	2310      	movs	r3, #16
 80054da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80054dc:	2302      	movs	r3, #2
 80054de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80054e0:	2300      	movs	r3, #0
 80054e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80054e4:	2310      	movs	r3, #16
 80054e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80054e8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80054ec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80054ee:	2304      	movs	r3, #4
 80054f0:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 7;
 80054f2:	2307      	movs	r3, #7
 80054f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80054f6:	f107 0320 	add.w	r3, r7, #32
 80054fa:	4618      	mov	r0, r3
 80054fc:	f001 fbf6 	bl	8006cec <HAL_RCC_OscConfig>
 8005500:	4603      	mov	r3, r0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d001      	beq.n	800550a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8005506:	f000 f907 	bl	8005718 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800550a:	230f      	movs	r3, #15
 800550c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800550e:	2302      	movs	r3, #2
 8005510:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005512:	2300      	movs	r3, #0
 8005514:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005516:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800551a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800551c:	2300      	movs	r3, #0
 800551e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005520:	f107 030c 	add.w	r3, r7, #12
 8005524:	2102      	movs	r1, #2
 8005526:	4618      	mov	r0, r3
 8005528:	f001 fe58 	bl	80071dc <HAL_RCC_ClockConfig>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d001      	beq.n	8005536 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8005532:	f000 f8f1 	bl	8005718 <Error_Handler>
  }
}
 8005536:	bf00      	nop
 8005538:	3750      	adds	r7, #80	; 0x50
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	40023800 	.word	0x40023800
 8005544:	40007000 	.word	0x40007000

08005548 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */
  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800554c:	4b17      	ldr	r3, [pc, #92]	; (80055ac <MX_SPI1_Init+0x64>)
 800554e:	4a18      	ldr	r2, [pc, #96]	; (80055b0 <MX_SPI1_Init+0x68>)
 8005550:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005552:	4b16      	ldr	r3, [pc, #88]	; (80055ac <MX_SPI1_Init+0x64>)
 8005554:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005558:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800555a:	4b14      	ldr	r3, [pc, #80]	; (80055ac <MX_SPI1_Init+0x64>)
 800555c:	2200      	movs	r2, #0
 800555e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005560:	4b12      	ldr	r3, [pc, #72]	; (80055ac <MX_SPI1_Init+0x64>)
 8005562:	2200      	movs	r2, #0
 8005564:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005566:	4b11      	ldr	r3, [pc, #68]	; (80055ac <MX_SPI1_Init+0x64>)
 8005568:	2200      	movs	r2, #0
 800556a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800556c:	4b0f      	ldr	r3, [pc, #60]	; (80055ac <MX_SPI1_Init+0x64>)
 800556e:	2200      	movs	r2, #0
 8005570:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005572:	4b0e      	ldr	r3, [pc, #56]	; (80055ac <MX_SPI1_Init+0x64>)
 8005574:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005578:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;  // Slower for better reliability
 800557a:	4b0c      	ldr	r3, [pc, #48]	; (80055ac <MX_SPI1_Init+0x64>)
 800557c:	2238      	movs	r2, #56	; 0x38
 800557e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005580:	4b0a      	ldr	r3, [pc, #40]	; (80055ac <MX_SPI1_Init+0x64>)
 8005582:	2200      	movs	r2, #0
 8005584:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005586:	4b09      	ldr	r3, [pc, #36]	; (80055ac <MX_SPI1_Init+0x64>)
 8005588:	2200      	movs	r2, #0
 800558a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800558c:	4b07      	ldr	r3, [pc, #28]	; (80055ac <MX_SPI1_Init+0x64>)
 800558e:	2200      	movs	r2, #0
 8005590:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8005592:	4b06      	ldr	r3, [pc, #24]	; (80055ac <MX_SPI1_Init+0x64>)
 8005594:	220a      	movs	r2, #10
 8005596:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005598:	4804      	ldr	r0, [pc, #16]	; (80055ac <MX_SPI1_Init+0x64>)
 800559a:	f002 f81b 	bl	80075d4 <HAL_SPI_Init>
 800559e:	4603      	mov	r3, r0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d001      	beq.n	80055a8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80055a4:	f000 f8b8 	bl	8005718 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  /* USER CODE END SPI1_Init 2 */
}
 80055a8:	bf00      	nop
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	200004dc 	.word	0x200004dc
 80055b0:	40013000 	.word	0x40013000

080055b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 0 */
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80055b8:	4b11      	ldr	r3, [pc, #68]	; (8005600 <MX_USART2_UART_Init+0x4c>)
 80055ba:	4a12      	ldr	r2, [pc, #72]	; (8005604 <MX_USART2_UART_Init+0x50>)
 80055bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80055be:	4b10      	ldr	r3, [pc, #64]	; (8005600 <MX_USART2_UART_Init+0x4c>)
 80055c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80055c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80055c6:	4b0e      	ldr	r3, [pc, #56]	; (8005600 <MX_USART2_UART_Init+0x4c>)
 80055c8:	2200      	movs	r2, #0
 80055ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80055cc:	4b0c      	ldr	r3, [pc, #48]	; (8005600 <MX_USART2_UART_Init+0x4c>)
 80055ce:	2200      	movs	r2, #0
 80055d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80055d2:	4b0b      	ldr	r3, [pc, #44]	; (8005600 <MX_USART2_UART_Init+0x4c>)
 80055d4:	2200      	movs	r2, #0
 80055d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80055d8:	4b09      	ldr	r3, [pc, #36]	; (8005600 <MX_USART2_UART_Init+0x4c>)
 80055da:	220c      	movs	r2, #12
 80055dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80055de:	4b08      	ldr	r3, [pc, #32]	; (8005600 <MX_USART2_UART_Init+0x4c>)
 80055e0:	2200      	movs	r2, #0
 80055e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80055e4:	4b06      	ldr	r3, [pc, #24]	; (8005600 <MX_USART2_UART_Init+0x4c>)
 80055e6:	2200      	movs	r2, #0
 80055e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80055ea:	4805      	ldr	r0, [pc, #20]	; (8005600 <MX_USART2_UART_Init+0x4c>)
 80055ec:	f003 f80a 	bl	8008604 <HAL_UART_Init>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d001      	beq.n	80055fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80055f6:	f000 f88f 	bl	8005718 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */
}
 80055fa:	bf00      	nop
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	bf00      	nop
 8005600:	20000534 	.word	0x20000534
 8005604:	40004400 	.word	0x40004400

08005608 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b08a      	sub	sp, #40	; 0x28
 800560c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800560e:	f107 0314 	add.w	r3, r7, #20
 8005612:	2200      	movs	r2, #0
 8005614:	601a      	str	r2, [r3, #0]
 8005616:	605a      	str	r2, [r3, #4]
 8005618:	609a      	str	r2, [r3, #8]
 800561a:	60da      	str	r2, [r3, #12]
 800561c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800561e:	2300      	movs	r3, #0
 8005620:	613b      	str	r3, [r7, #16]
 8005622:	4b3a      	ldr	r3, [pc, #232]	; (800570c <MX_GPIO_Init+0x104>)
 8005624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005626:	4a39      	ldr	r2, [pc, #228]	; (800570c <MX_GPIO_Init+0x104>)
 8005628:	f043 0304 	orr.w	r3, r3, #4
 800562c:	6313      	str	r3, [r2, #48]	; 0x30
 800562e:	4b37      	ldr	r3, [pc, #220]	; (800570c <MX_GPIO_Init+0x104>)
 8005630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005632:	f003 0304 	and.w	r3, r3, #4
 8005636:	613b      	str	r3, [r7, #16]
 8005638:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800563a:	2300      	movs	r3, #0
 800563c:	60fb      	str	r3, [r7, #12]
 800563e:	4b33      	ldr	r3, [pc, #204]	; (800570c <MX_GPIO_Init+0x104>)
 8005640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005642:	4a32      	ldr	r2, [pc, #200]	; (800570c <MX_GPIO_Init+0x104>)
 8005644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005648:	6313      	str	r3, [r2, #48]	; 0x30
 800564a:	4b30      	ldr	r3, [pc, #192]	; (800570c <MX_GPIO_Init+0x104>)
 800564c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005652:	60fb      	str	r3, [r7, #12]
 8005654:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005656:	2300      	movs	r3, #0
 8005658:	60bb      	str	r3, [r7, #8]
 800565a:	4b2c      	ldr	r3, [pc, #176]	; (800570c <MX_GPIO_Init+0x104>)
 800565c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565e:	4a2b      	ldr	r2, [pc, #172]	; (800570c <MX_GPIO_Init+0x104>)
 8005660:	f043 0301 	orr.w	r3, r3, #1
 8005664:	6313      	str	r3, [r2, #48]	; 0x30
 8005666:	4b29      	ldr	r3, [pc, #164]	; (800570c <MX_GPIO_Init+0x104>)
 8005668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800566a:	f003 0301 	and.w	r3, r3, #1
 800566e:	60bb      	str	r3, [r7, #8]
 8005670:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005672:	2300      	movs	r3, #0
 8005674:	607b      	str	r3, [r7, #4]
 8005676:	4b25      	ldr	r3, [pc, #148]	; (800570c <MX_GPIO_Init+0x104>)
 8005678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800567a:	4a24      	ldr	r2, [pc, #144]	; (800570c <MX_GPIO_Init+0x104>)
 800567c:	f043 0302 	orr.w	r3, r3, #2
 8005680:	6313      	str	r3, [r2, #48]	; 0x30
 8005682:	4b22      	ldr	r3, [pc, #136]	; (800570c <MX_GPIO_Init+0x104>)
 8005684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005686:	f003 0302 	and.w	r3, r3, #2
 800568a:	607b      	str	r3, [r7, #4]
 800568c:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level - VPC3 CS and RESET pins */
    HAL_GPIO_WritePin(VPC3_CS_PORT, VPC3_CS_PIN, GPIO_PIN_SET);     // CS inactive (high)
 800568e:	2201      	movs	r2, #1
 8005690:	2110      	movs	r1, #16
 8005692:	481f      	ldr	r0, [pc, #124]	; (8005710 <MX_GPIO_Init+0x108>)
 8005694:	f001 fb10 	bl	8006cb8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(VPC3_RESET_PORT, VPC3_RESET_PIN, GPIO_PIN_SET); // RESET inactive (high)
 8005698:	2201      	movs	r2, #1
 800569a:	2110      	movs	r1, #16
 800569c:	481d      	ldr	r0, [pc, #116]	; (8005714 <MX_GPIO_Init+0x10c>)
 800569e:	f001 fb0b 	bl	8006cb8 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : VPC3_CS_PIN */
    GPIO_InitStruct.Pin = VPC3_CS_PIN;
 80056a2:	2310      	movs	r3, #16
 80056a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80056a6:	2301      	movs	r3, #1
 80056a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056aa:	2300      	movs	r3, #0
 80056ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056ae:	2300      	movs	r3, #0
 80056b0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(VPC3_CS_PORT, &GPIO_InitStruct);
 80056b2:	f107 0314 	add.w	r3, r7, #20
 80056b6:	4619      	mov	r1, r3
 80056b8:	4815      	ldr	r0, [pc, #84]	; (8005710 <MX_GPIO_Init+0x108>)
 80056ba:	f001 f979 	bl	80069b0 <HAL_GPIO_Init>

    /*Configure GPIO pin : VPC3_RESET_PIN */
    GPIO_InitStruct.Pin = VPC3_RESET_PIN;
 80056be:	2310      	movs	r3, #16
 80056c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80056c2:	2301      	movs	r3, #1
 80056c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056c6:	2300      	movs	r3, #0
 80056c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056ca:	2300      	movs	r3, #0
 80056cc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(VPC3_RESET_PORT, &GPIO_InitStruct);
 80056ce:	f107 0314 	add.w	r3, r7, #20
 80056d2:	4619      	mov	r1, r3
 80056d4:	480f      	ldr	r0, [pc, #60]	; (8005714 <MX_GPIO_Init+0x10c>)
 80056d6:	f001 f96b 	bl	80069b0 <HAL_GPIO_Init>

    /*Configure GPIO pin : VPC3_INT_PIN */
    GPIO_InitStruct.Pin = VPC3_INT_PIN;
 80056da:	2320      	movs	r3, #32
 80056dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80056de:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80056e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80056e4:	2301      	movs	r3, #1
 80056e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VPC3_INT_PORT, &GPIO_InitStruct);
 80056e8:	f107 0314 	add.w	r3, r7, #20
 80056ec:	4619      	mov	r1, r3
 80056ee:	4809      	ldr	r0, [pc, #36]	; (8005714 <MX_GPIO_Init+0x10c>)
 80056f0:	f001 f95e 	bl	80069b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
    HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80056f4:	2200      	movs	r2, #0
 80056f6:	2100      	movs	r1, #0
 80056f8:	2017      	movs	r0, #23
 80056fa:	f001 f882 	bl	8006802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80056fe:	2017      	movs	r0, #23
 8005700:	f001 f89b 	bl	800683a <HAL_NVIC_EnableIRQ>
}
 8005704:	bf00      	nop
 8005706:	3728      	adds	r7, #40	; 0x28
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}
 800570c:	40023800 	.word	0x40023800
 8005710:	40020000 	.word	0x40020000
 8005714:	40020400 	.word	0x40020400

08005718 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005718:	b480      	push	{r7}
 800571a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800571c:	b672      	cpsid	i
}
 800571e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005720:	e7fe      	b.n	8005720 <Error_Handler+0x8>
	...

08005724 <print_vpc3_registers>:
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

void print_vpc3_registers(void) {
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
    uint8_t status_lo = Vpc3Read(0x04);
 800572a:	2004      	movs	r0, #4
 800572c:	f000 fbe0 	bl	8005ef0 <Vpc3Read>
 8005730:	4603      	mov	r3, r0
 8005732:	73fb      	strb	r3, [r7, #15]
    uint8_t status_hi = Vpc3Read(0x05);
 8005734:	2005      	movs	r0, #5
 8005736:	f000 fbdb 	bl	8005ef0 <Vpc3Read>
 800573a:	4603      	mov	r3, r0
 800573c:	73bb      	strb	r3, [r7, #14]
    uint8_t mode_reg0_l = Vpc3Read(0x06);
 800573e:	2006      	movs	r0, #6
 8005740:	f000 fbd6 	bl	8005ef0 <Vpc3Read>
 8005744:	4603      	mov	r3, r0
 8005746:	737b      	strb	r3, [r7, #13]
    uint8_t mode_reg0_h = Vpc3Read(0x07);
 8005748:	2007      	movs	r0, #7
 800574a:	f000 fbd1 	bl	8005ef0 <Vpc3Read>
 800574e:	4603      	mov	r3, r0
 8005750:	733b      	strb	r3, [r7, #12]
    uint8_t mode_reg1   = Vpc3Read(0x15);
 8005752:	2015      	movs	r0, #21
 8005754:	f000 fbcc 	bl	8005ef0 <Vpc3Read>
 8005758:	4603      	mov	r3, r0
 800575a:	72fb      	strb	r3, [r7, #11]
    uint8_t mode_reg2   = VPC3_GetModeReg2Shadow();
 800575c:	f000 fa72 	bl	8005c44 <VPC3_GetModeReg2Shadow>
 8005760:	4603      	mov	r3, r0
 8005762:	72bb      	strb	r3, [r7, #10]
    uint8_t int_reg_l   = Vpc3Read(0x02);
 8005764:	2002      	movs	r0, #2
 8005766:	f000 fbc3 	bl	8005ef0 <Vpc3Read>
 800576a:	4603      	mov	r3, r0
 800576c:	727b      	strb	r3, [r7, #9]
    uint8_t int_reg_h   = Vpc3Read(0x03);
 800576e:	2003      	movs	r0, #3
 8005770:	f000 fbbe 	bl	8005ef0 <Vpc3Read>
 8005774:	4603      	mov	r3, r0
 8005776:	723b      	strb	r3, [r7, #8]
    uint8_t cfg_ptr = Vpc3Read(0x34);
 8005778:	2034      	movs	r0, #52	; 0x34
 800577a:	f000 fbb9 	bl	8005ef0 <Vpc3Read>
 800577e:	4603      	mov	r3, r0
 8005780:	71fb      	strb	r3, [r7, #7]

    printf("VPC3+S REGISTERS:\r\n");
 8005782:	481b      	ldr	r0, [pc, #108]	; (80057f0 <print_vpc3_registers+0xcc>)
 8005784:	f003 fb30 	bl	8008de8 <puts>
    printf("  STATUS_L   (0x04): 0x%02X\r\n", status_lo);
 8005788:	7bfb      	ldrb	r3, [r7, #15]
 800578a:	4619      	mov	r1, r3
 800578c:	4819      	ldr	r0, [pc, #100]	; (80057f4 <print_vpc3_registers+0xd0>)
 800578e:	f003 fa8f 	bl	8008cb0 <iprintf>
    printf("  STATUS_H   (0x05): 0x%02X\r\n", status_hi);
 8005792:	7bbb      	ldrb	r3, [r7, #14]
 8005794:	4619      	mov	r1, r3
 8005796:	4818      	ldr	r0, [pc, #96]	; (80057f8 <print_vpc3_registers+0xd4>)
 8005798:	f003 fa8a 	bl	8008cb0 <iprintf>
    printf("  MODE_REG_0_L (0x06): 0x%02X\r\n", mode_reg0_l);
 800579c:	7b7b      	ldrb	r3, [r7, #13]
 800579e:	4619      	mov	r1, r3
 80057a0:	4816      	ldr	r0, [pc, #88]	; (80057fc <print_vpc3_registers+0xd8>)
 80057a2:	f003 fa85 	bl	8008cb0 <iprintf>
    printf("  MODE_REG_0_H (0x07): 0x%02X\r\n", mode_reg0_h);
 80057a6:	7b3b      	ldrb	r3, [r7, #12]
 80057a8:	4619      	mov	r1, r3
 80057aa:	4815      	ldr	r0, [pc, #84]	; (8005800 <print_vpc3_registers+0xdc>)
 80057ac:	f003 fa80 	bl	8008cb0 <iprintf>
    printf("  MODE_REG_1   (0x15): 0x%02X\r\n", mode_reg1);
 80057b0:	7afb      	ldrb	r3, [r7, #11]
 80057b2:	4619      	mov	r1, r3
 80057b4:	4813      	ldr	r0, [pc, #76]	; (8005804 <print_vpc3_registers+0xe0>)
 80057b6:	f003 fa7b 	bl	8008cb0 <iprintf>
    printf("  MODE_REG_2   (shadow 0x0C): 0x%02X\r\n", mode_reg2);
 80057ba:	7abb      	ldrb	r3, [r7, #10]
 80057bc:	4619      	mov	r1, r3
 80057be:	4812      	ldr	r0, [pc, #72]	; (8005808 <print_vpc3_registers+0xe4>)
 80057c0:	f003 fa76 	bl	8008cb0 <iprintf>
    printf("  INT_REG_L    (0x02): 0x%02X\r\n", int_reg_l);
 80057c4:	7a7b      	ldrb	r3, [r7, #9]
 80057c6:	4619      	mov	r1, r3
 80057c8:	4810      	ldr	r0, [pc, #64]	; (800580c <print_vpc3_registers+0xe8>)
 80057ca:	f003 fa71 	bl	8008cb0 <iprintf>
    printf("  INT_REG_H    (0x03): 0x%02X\r\n", int_reg_h);
 80057ce:	7a3b      	ldrb	r3, [r7, #8]
 80057d0:	4619      	mov	r1, r3
 80057d2:	480f      	ldr	r0, [pc, #60]	; (8005810 <print_vpc3_registers+0xec>)
 80057d4:	f003 fa6c 	bl	8008cb0 <iprintf>
    printf("  CFG_PTR    (0x34): 0x%02X\r\n", cfg_ptr);
 80057d8:	79fb      	ldrb	r3, [r7, #7]
 80057da:	4619      	mov	r1, r3
 80057dc:	480d      	ldr	r0, [pc, #52]	; (8005814 <print_vpc3_registers+0xf0>)
 80057de:	f003 fa67 	bl	8008cb0 <iprintf>
    printf("\r\n");
 80057e2:	480d      	ldr	r0, [pc, #52]	; (8005818 <print_vpc3_registers+0xf4>)
 80057e4:	f003 fb00 	bl	8008de8 <puts>
}
 80057e8:	bf00      	nop
 80057ea:	3710      	adds	r7, #16
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	08011034 	.word	0x08011034
 80057f4:	08011048 	.word	0x08011048
 80057f8:	08011068 	.word	0x08011068
 80057fc:	08011088 	.word	0x08011088
 8005800:	080110a8 	.word	0x080110a8
 8005804:	080110c8 	.word	0x080110c8
 8005808:	080110e8 	.word	0x080110e8
 800580c:	08011110 	.word	0x08011110
 8005810:	08011130 	.word	0x08011130
 8005814:	08011150 	.word	0x08011150
 8005818:	080109d0 	.word	0x080109d0

0800581c <print_vpc3_state>:

void print_vpc3_state(void) {
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
    uint8_t status_l = Vpc3Read(0x04);
 8005822:	2004      	movs	r0, #4
 8005824:	f000 fb64 	bl	8005ef0 <Vpc3Read>
 8005828:	4603      	mov	r3, r0
 800582a:	71fb      	strb	r3, [r7, #7]
    uint8_t dp_state = (status_l & MASK_DP_STATE) >> 5;
 800582c:	79fb      	ldrb	r3, [r7, #7]
 800582e:	115b      	asrs	r3, r3, #5
 8005830:	b2db      	uxtb	r3, r3
 8005832:	f003 0303 	and.w	r3, r3, #3
 8005836:	71bb      	strb	r3, [r7, #6]

    printf("PROFIBUS STATE: STATUS_L = 0x%02X -> ", status_l);
 8005838:	79fb      	ldrb	r3, [r7, #7]
 800583a:	4619      	mov	r1, r3
 800583c:	481f      	ldr	r0, [pc, #124]	; (80058bc <print_vpc3_state+0xa0>)
 800583e:	f003 fa37 	bl	8008cb0 <iprintf>

    switch(dp_state) {
 8005842:	79bb      	ldrb	r3, [r7, #6]
 8005844:	2b03      	cmp	r3, #3
 8005846:	d81b      	bhi.n	8005880 <print_vpc3_state+0x64>
 8005848:	a201      	add	r2, pc, #4	; (adr r2, 8005850 <print_vpc3_state+0x34>)
 800584a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800584e:	bf00      	nop
 8005850:	08005861 	.word	0x08005861
 8005854:	08005869 	.word	0x08005869
 8005858:	08005871 	.word	0x08005871
 800585c:	08005879 	.word	0x08005879
        case WAIT_PRM:
            printf("WAIT_PRM (Waiting for parameterization telegram)");
 8005860:	4817      	ldr	r0, [pc, #92]	; (80058c0 <print_vpc3_state+0xa4>)
 8005862:	f003 fa25 	bl	8008cb0 <iprintf>
            break;
 8005866:	e022      	b.n	80058ae <print_vpc3_state+0x92>
        case WAIT_CFG:
            printf("WAIT_CFG (Waiting for configuration telegram)");
 8005868:	4816      	ldr	r0, [pc, #88]	; (80058c4 <print_vpc3_state+0xa8>)
 800586a:	f003 fa21 	bl	8008cb0 <iprintf>
            break;
 800586e:	e01e      	b.n	80058ae <print_vpc3_state+0x92>
        case DATA_EX:
            printf("DATA_EX (Data Exchange Active)");
 8005870:	4815      	ldr	r0, [pc, #84]	; (80058c8 <print_vpc3_state+0xac>)
 8005872:	f003 fa1d 	bl	8008cb0 <iprintf>
            break;
 8005876:	e01a      	b.n	80058ae <print_vpc3_state+0x92>
        case DP_ERROR:
             printf("DP_ERROR (PROFIBUS Error State)");
 8005878:	4814      	ldr	r0, [pc, #80]	; (80058cc <print_vpc3_state+0xb0>)
 800587a:	f003 fa19 	bl	8008cb0 <iprintf>
             break;
 800587e:	e016      	b.n	80058ae <print_vpc3_state+0x92>
        default:
            // Check other status flags if not in a standard DP state
            if (!(status_l & 0x01)) { // Check if OFFLINE
 8005880:	79fb      	ldrb	r3, [r7, #7]
 8005882:	f003 0301 	and.w	r3, r3, #1
 8005886:	2b00      	cmp	r3, #0
 8005888:	d103      	bne.n	8005892 <print_vpc3_state+0x76>
                 printf("OFFLINE");
 800588a:	4811      	ldr	r0, [pc, #68]	; (80058d0 <print_vpc3_state+0xb4>)
 800588c:	f003 fa10 	bl	8008cb0 <iprintf>
                 printf("PASSIVE_IDLE");
            }
            else {
                 printf("UNKNOWN (DP_STATE: %d)", dp_state);
            }
            break;
 8005890:	e00c      	b.n	80058ac <print_vpc3_state+0x90>
            } else if (status_l & 0x80) { // Check for PASSIVE_IDLE (older method)
 8005892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005896:	2b00      	cmp	r3, #0
 8005898:	da03      	bge.n	80058a2 <print_vpc3_state+0x86>
                 printf("PASSIVE_IDLE");
 800589a:	480e      	ldr	r0, [pc, #56]	; (80058d4 <print_vpc3_state+0xb8>)
 800589c:	f003 fa08 	bl	8008cb0 <iprintf>
            break;
 80058a0:	e004      	b.n	80058ac <print_vpc3_state+0x90>
                 printf("UNKNOWN (DP_STATE: %d)", dp_state);
 80058a2:	79bb      	ldrb	r3, [r7, #6]
 80058a4:	4619      	mov	r1, r3
 80058a6:	480c      	ldr	r0, [pc, #48]	; (80058d8 <print_vpc3_state+0xbc>)
 80058a8:	f003 fa02 	bl	8008cb0 <iprintf>
            break;
 80058ac:	bf00      	nop
    }
    printf("\r\n");
 80058ae:	480b      	ldr	r0, [pc, #44]	; (80058dc <print_vpc3_state+0xc0>)
 80058b0:	f003 fa9a 	bl	8008de8 <puts>
}
 80058b4:	bf00      	nop
 80058b6:	3708      	adds	r7, #8
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	08011170 	.word	0x08011170
 80058c0:	08011198 	.word	0x08011198
 80058c4:	080111cc 	.word	0x080111cc
 80058c8:	080111fc 	.word	0x080111fc
 80058cc:	0801121c 	.word	0x0801121c
 80058d0:	0801123c 	.word	0x0801123c
 80058d4:	08011244 	.word	0x08011244
 80058d8:	08011254 	.word	0x08011254
 80058dc:	080109d0 	.word	0x080109d0

080058e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b082      	sub	sp, #8
 80058e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058e6:	2300      	movs	r3, #0
 80058e8:	607b      	str	r3, [r7, #4]
 80058ea:	4b10      	ldr	r3, [pc, #64]	; (800592c <HAL_MspInit+0x4c>)
 80058ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ee:	4a0f      	ldr	r2, [pc, #60]	; (800592c <HAL_MspInit+0x4c>)
 80058f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80058f4:	6453      	str	r3, [r2, #68]	; 0x44
 80058f6:	4b0d      	ldr	r3, [pc, #52]	; (800592c <HAL_MspInit+0x4c>)
 80058f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058fe:	607b      	str	r3, [r7, #4]
 8005900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005902:	2300      	movs	r3, #0
 8005904:	603b      	str	r3, [r7, #0]
 8005906:	4b09      	ldr	r3, [pc, #36]	; (800592c <HAL_MspInit+0x4c>)
 8005908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590a:	4a08      	ldr	r2, [pc, #32]	; (800592c <HAL_MspInit+0x4c>)
 800590c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005910:	6413      	str	r3, [r2, #64]	; 0x40
 8005912:	4b06      	ldr	r3, [pc, #24]	; (800592c <HAL_MspInit+0x4c>)
 8005914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800591a:	603b      	str	r3, [r7, #0]
 800591c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800591e:	2007      	movs	r0, #7
 8005920:	f000 ff64 	bl	80067ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005924:	bf00      	nop
 8005926:	3708      	adds	r7, #8
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	40023800 	.word	0x40023800

08005930 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b08a      	sub	sp, #40	; 0x28
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005938:	f107 0314 	add.w	r3, r7, #20
 800593c:	2200      	movs	r2, #0
 800593e:	601a      	str	r2, [r3, #0]
 8005940:	605a      	str	r2, [r3, #4]
 8005942:	609a      	str	r2, [r3, #8]
 8005944:	60da      	str	r2, [r3, #12]
 8005946:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a21      	ldr	r2, [pc, #132]	; (80059d4 <HAL_SPI_MspInit+0xa4>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d13b      	bne.n	80059ca <HAL_SPI_MspInit+0x9a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005952:	2300      	movs	r3, #0
 8005954:	613b      	str	r3, [r7, #16]
 8005956:	4b20      	ldr	r3, [pc, #128]	; (80059d8 <HAL_SPI_MspInit+0xa8>)
 8005958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800595a:	4a1f      	ldr	r2, [pc, #124]	; (80059d8 <HAL_SPI_MspInit+0xa8>)
 800595c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005960:	6453      	str	r3, [r2, #68]	; 0x44
 8005962:	4b1d      	ldr	r3, [pc, #116]	; (80059d8 <HAL_SPI_MspInit+0xa8>)
 8005964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005966:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800596a:	613b      	str	r3, [r7, #16]
 800596c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800596e:	2300      	movs	r3, #0
 8005970:	60fb      	str	r3, [r7, #12]
 8005972:	4b19      	ldr	r3, [pc, #100]	; (80059d8 <HAL_SPI_MspInit+0xa8>)
 8005974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005976:	4a18      	ldr	r2, [pc, #96]	; (80059d8 <HAL_SPI_MspInit+0xa8>)
 8005978:	f043 0301 	orr.w	r3, r3, #1
 800597c:	6313      	str	r3, [r2, #48]	; 0x30
 800597e:	4b16      	ldr	r3, [pc, #88]	; (80059d8 <HAL_SPI_MspInit+0xa8>)
 8005980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005982:	f003 0301 	and.w	r3, r3, #1
 8005986:	60fb      	str	r3, [r7, #12]
 8005988:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800598a:	23e0      	movs	r3, #224	; 0xe0
 800598c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800598e:	2302      	movs	r3, #2
 8005990:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005992:	2300      	movs	r3, #0
 8005994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005996:	2303      	movs	r3, #3
 8005998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800599a:	2305      	movs	r3, #5
 800599c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800599e:	f107 0314 	add.w	r3, r7, #20
 80059a2:	4619      	mov	r1, r3
 80059a4:	480d      	ldr	r0, [pc, #52]	; (80059dc <HAL_SPI_MspInit+0xac>)
 80059a6:	f001 f803 	bl	80069b0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80059aa:	2200      	movs	r2, #0
 80059ac:	2100      	movs	r1, #0
 80059ae:	2023      	movs	r0, #35	; 0x23
 80059b0:	f000 ff27 	bl	8006802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80059b4:	2023      	movs	r0, #35	; 0x23
 80059b6:	f000 ff40 	bl	800683a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80059ba:	2200      	movs	r2, #0
 80059bc:	2100      	movs	r1, #0
 80059be:	2023      	movs	r0, #35	; 0x23
 80059c0:	f000 ff1f 	bl	8006802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80059c4:	2023      	movs	r0, #35	; 0x23
 80059c6:	f000 ff38 	bl	800683a <HAL_NVIC_EnableIRQ>
  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80059ca:	bf00      	nop
 80059cc:	3728      	adds	r7, #40	; 0x28
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	40013000 	.word	0x40013000
 80059d8:	40023800 	.word	0x40023800
 80059dc:	40020000 	.word	0x40020000

080059e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b08a      	sub	sp, #40	; 0x28
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059e8:	f107 0314 	add.w	r3, r7, #20
 80059ec:	2200      	movs	r2, #0
 80059ee:	601a      	str	r2, [r3, #0]
 80059f0:	605a      	str	r2, [r3, #4]
 80059f2:	609a      	str	r2, [r3, #8]
 80059f4:	60da      	str	r2, [r3, #12]
 80059f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a19      	ldr	r2, [pc, #100]	; (8005a64 <HAL_UART_MspInit+0x84>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d12b      	bne.n	8005a5a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005a02:	2300      	movs	r3, #0
 8005a04:	613b      	str	r3, [r7, #16]
 8005a06:	4b18      	ldr	r3, [pc, #96]	; (8005a68 <HAL_UART_MspInit+0x88>)
 8005a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0a:	4a17      	ldr	r2, [pc, #92]	; (8005a68 <HAL_UART_MspInit+0x88>)
 8005a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a10:	6413      	str	r3, [r2, #64]	; 0x40
 8005a12:	4b15      	ldr	r3, [pc, #84]	; (8005a68 <HAL_UART_MspInit+0x88>)
 8005a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a1a:	613b      	str	r3, [r7, #16]
 8005a1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a1e:	2300      	movs	r3, #0
 8005a20:	60fb      	str	r3, [r7, #12]
 8005a22:	4b11      	ldr	r3, [pc, #68]	; (8005a68 <HAL_UART_MspInit+0x88>)
 8005a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a26:	4a10      	ldr	r2, [pc, #64]	; (8005a68 <HAL_UART_MspInit+0x88>)
 8005a28:	f043 0301 	orr.w	r3, r3, #1
 8005a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8005a2e:	4b0e      	ldr	r3, [pc, #56]	; (8005a68 <HAL_UART_MspInit+0x88>)
 8005a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a32:	f003 0301 	and.w	r3, r3, #1
 8005a36:	60fb      	str	r3, [r7, #12]
 8005a38:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005a3a:	230c      	movs	r3, #12
 8005a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a3e:	2302      	movs	r3, #2
 8005a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a42:	2300      	movs	r3, #0
 8005a44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a46:	2303      	movs	r3, #3
 8005a48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005a4a:	2307      	movs	r3, #7
 8005a4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a4e:	f107 0314 	add.w	r3, r7, #20
 8005a52:	4619      	mov	r1, r3
 8005a54:	4805      	ldr	r0, [pc, #20]	; (8005a6c <HAL_UART_MspInit+0x8c>)
 8005a56:	f000 ffab 	bl	80069b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005a5a:	bf00      	nop
 8005a5c:	3728      	adds	r7, #40	; 0x28
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	40004400 	.word	0x40004400
 8005a68:	40023800 	.word	0x40023800
 8005a6c:	40020000 	.word	0x40020000

08005a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005a70:	b480      	push	{r7}
 8005a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005a74:	e7fe      	b.n	8005a74 <NMI_Handler+0x4>

08005a76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005a76:	b480      	push	{r7}
 8005a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005a7a:	e7fe      	b.n	8005a7a <HardFault_Handler+0x4>

08005a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005a80:	e7fe      	b.n	8005a80 <MemManage_Handler+0x4>

08005a82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005a82:	b480      	push	{r7}
 8005a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005a86:	e7fe      	b.n	8005a86 <BusFault_Handler+0x4>

08005a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005a8c:	e7fe      	b.n	8005a8c <UsageFault_Handler+0x4>

08005a8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005a8e:	b480      	push	{r7}
 8005a90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005a92:	bf00      	nop
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005aa0:	bf00      	nop
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr

08005aaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005aaa:	b480      	push	{r7}
 8005aac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005aae:	bf00      	nop
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005abc:	f000 fd5e 	bl	800657c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005ac0:	bf00      	nop
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8005ac8:	4802      	ldr	r0, [pc, #8]	; (8005ad4 <SPI1_IRQHandler+0x10>)
 8005aca:	f002 fae7 	bl	800809c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8005ace:	bf00      	nop
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	200004dc 	.word	0x200004dc

08005ad8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b086      	sub	sp, #24
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	607a      	str	r2, [r7, #4]
	(void)file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	617b      	str	r3, [r7, #20]
 8005ae8:	e00a      	b.n	8005b00 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005aea:	f3af 8000 	nop.w
 8005aee:	4601      	mov	r1, r0
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	1c5a      	adds	r2, r3, #1
 8005af4:	60ba      	str	r2, [r7, #8]
 8005af6:	b2ca      	uxtb	r2, r1
 8005af8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	3301      	adds	r3, #1
 8005afe:	617b      	str	r3, [r7, #20]
 8005b00:	697a      	ldr	r2, [r7, #20]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	dbf0      	blt.n	8005aea <_read+0x12>
	}

return len;
 8005b08:	687b      	ldr	r3, [r7, #4]
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3718      	adds	r7, #24
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b086      	sub	sp, #24
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	60f8      	str	r0, [r7, #12]
 8005b1a:	60b9      	str	r1, [r7, #8]
 8005b1c:	607a      	str	r2, [r7, #4]
	(void)file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b1e:	2300      	movs	r3, #0
 8005b20:	617b      	str	r3, [r7, #20]
 8005b22:	e009      	b.n	8005b38 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	1c5a      	adds	r2, r3, #1
 8005b28:	60ba      	str	r2, [r7, #8]
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f7ff faeb 	bl	8005108 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	3301      	adds	r3, #1
 8005b36:	617b      	str	r3, [r7, #20]
 8005b38:	697a      	ldr	r2, [r7, #20]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	dbf1      	blt.n	8005b24 <_write+0x12>
	}
	return len;
 8005b40:	687b      	ldr	r3, [r7, #4]
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3718      	adds	r7, #24
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}

08005b4a <_close>:

int _close(int file)
{
 8005b4a:	b480      	push	{r7}
 8005b4c:	b083      	sub	sp, #12
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
	return -1;
 8005b52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	370c      	adds	r7, #12
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr

08005b62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005b62:	b480      	push	{r7}
 8005b64:	b083      	sub	sp, #12
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
 8005b6a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005b72:	605a      	str	r2, [r3, #4]
	return 0;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	370c      	adds	r7, #12
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr

08005b82 <_isatty>:

int _isatty(int file)
{
 8005b82:	b480      	push	{r7}
 8005b84:	b083      	sub	sp, #12
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
	return 1;
 8005b8a:	2301      	movs	r3, #1
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	370c      	adds	r7, #12
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b085      	sub	sp, #20
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	607a      	str	r2, [r7, #4]
	(void)file;
	(void)ptr;
	(void)dir;
	return 0;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3714      	adds	r7, #20
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr
	...

08005bb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b086      	sub	sp, #24
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005bbc:	4a14      	ldr	r2, [pc, #80]	; (8005c10 <_sbrk+0x5c>)
 8005bbe:	4b15      	ldr	r3, [pc, #84]	; (8005c14 <_sbrk+0x60>)
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005bc8:	4b13      	ldr	r3, [pc, #76]	; (8005c18 <_sbrk+0x64>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d102      	bne.n	8005bd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005bd0:	4b11      	ldr	r3, [pc, #68]	; (8005c18 <_sbrk+0x64>)
 8005bd2:	4a12      	ldr	r2, [pc, #72]	; (8005c1c <_sbrk+0x68>)
 8005bd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005bd6:	4b10      	ldr	r3, [pc, #64]	; (8005c18 <_sbrk+0x64>)
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4413      	add	r3, r2
 8005bde:	693a      	ldr	r2, [r7, #16]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d207      	bcs.n	8005bf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005be4:	f003 f824 	bl	8008c30 <__errno>
 8005be8:	4603      	mov	r3, r0
 8005bea:	220c      	movs	r2, #12
 8005bec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005bee:	f04f 33ff 	mov.w	r3, #4294967295
 8005bf2:	e009      	b.n	8005c08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005bf4:	4b08      	ldr	r3, [pc, #32]	; (8005c18 <_sbrk+0x64>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005bfa:	4b07      	ldr	r3, [pc, #28]	; (8005c18 <_sbrk+0x64>)
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4413      	add	r3, r2
 8005c02:	4a05      	ldr	r2, [pc, #20]	; (8005c18 <_sbrk+0x64>)
 8005c04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005c06:	68fb      	ldr	r3, [r7, #12]
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3718      	adds	r7, #24
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	20018000 	.word	0x20018000
 8005c14:	00000400 	.word	0x00000400
 8005c18:	200000d0 	.word	0x200000d0
 8005c1c:	20000590 	.word	0x20000590

08005c20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005c20:	b480      	push	{r7}
 8005c22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005c24:	4b06      	ldr	r3, [pc, #24]	; (8005c40 <SystemInit+0x20>)
 8005c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c2a:	4a05      	ldr	r2, [pc, #20]	; (8005c40 <SystemInit+0x20>)
 8005c2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005c30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005c34:	bf00      	nop
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop
 8005c40:	e000ed00 	.word	0xe000ed00

08005c44 <VPC3_GetModeReg2Shadow>:
/* External SPI handle declaration */
extern SPI_HandleTypeDef hspi1;

/* Shadow copy for write-only MODE_REG_2 (0x0C) */
static volatile uint8_t g_vpc3_mode_reg2_shadow = INIT_VPC3_MODE_REG_2;
uint8_t VPC3_GetModeReg2Shadow(void) { return g_vpc3_mode_reg2_shadow; }
 8005c44:	b480      	push	{r7}
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	4b03      	ldr	r3, [pc, #12]	; (8005c58 <VPC3_GetModeReg2Shadow+0x14>)
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	4618      	mov	r0, r3
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr
 8005c58:	20000014 	.word	0x20000014

08005c5c <vpc3_cs_delay>:
extern void DpAppl_EnableInterruptVPC3Channel1(void);

/*-------------------------------------------------------------------------*//**
 * @brief Delay for CS setup/hold timing
 *//*-------------------------------------------------------------------------*/
static inline void vpc3_cs_delay(void) {
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
    for (volatile int i = 0; i < VPC3_CSS_CYCLES; i++);
 8005c62:	2300      	movs	r3, #0
 8005c64:	607b      	str	r3, [r7, #4]
 8005c66:	e002      	b.n	8005c6e <vpc3_cs_delay+0x12>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	607b      	str	r3, [r7, #4]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2bc7      	cmp	r3, #199	; 0xc7
 8005c72:	ddf9      	ble.n	8005c68 <vpc3_cs_delay+0xc>
}
 8005c74:	bf00      	nop
 8005c76:	bf00      	nop
 8005c78:	370c      	adds	r7, #12
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr
	...

08005c84 <vpc3_spi_transfer>:
/*-------------------------------------------------------------------------*//**
 * @brief SPI transfer of a single byte with proper timing and error handling
 * @param byte Byte to send
 * @return Received byte
 *//*-------------------------------------------------------------------------*/
static uint8_t vpc3_spi_transfer(uint8_t byte) {
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b086      	sub	sp, #24
 8005c88:	af02      	add	r7, sp, #8
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	71fb      	strb	r3, [r7, #7]
    uint8_t rx;
    HAL_StatusTypeDef status;
    
    // Use HAL_SPI_TransmitReceive for better timing control
    status = HAL_SPI_TransmitReceive(&hspi1, &byte, &rx, 1, VPC3_TIMEOUT_MS);
 8005c8e:	f107 020e 	add.w	r2, r7, #14
 8005c92:	1df9      	adds	r1, r7, #7
 8005c94:	2364      	movs	r3, #100	; 0x64
 8005c96:	9300      	str	r3, [sp, #0]
 8005c98:	2301      	movs	r3, #1
 8005c9a:	480d      	ldr	r0, [pc, #52]	; (8005cd0 <vpc3_spi_transfer+0x4c>)
 8005c9c:	f001 ff70 	bl	8007b80 <HAL_SPI_TransmitReceive>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	73fb      	strb	r3, [r7, #15]
    
    if (status != HAL_OK) {
 8005ca4:	7bfb      	ldrb	r3, [r7, #15]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d00c      	beq.n	8005cc4 <vpc3_spi_transfer+0x40>
        printf("ERROR: SPI transfer failed with status %d\r\n", status);
 8005caa:	7bfb      	ldrb	r3, [r7, #15]
 8005cac:	4619      	mov	r1, r3
 8005cae:	4809      	ldr	r0, [pc, #36]	; (8005cd4 <vpc3_spi_transfer+0x50>)
 8005cb0:	f002 fffe 	bl	8008cb0 <iprintf>
        // Don't return 0xFF as it might be a valid data value
        // Instead, try to recover the SPI bus
        HAL_SPI_Abort(&hspi1);
 8005cb4:	4806      	ldr	r0, [pc, #24]	; (8005cd0 <vpc3_spi_transfer+0x4c>)
 8005cb6:	f002 f905 	bl	8007ec4 <HAL_SPI_Abort>
        HAL_Delay(1);
 8005cba:	2001      	movs	r0, #1
 8005cbc:	f000 fc7e 	bl	80065bc <HAL_Delay>
        return 0x00; // Return 0x00 as a safer default
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	e000      	b.n	8005cc6 <vpc3_spi_transfer+0x42>
    }
    
    return rx;
 8005cc4:	7bbb      	ldrb	r3, [r7, #14]
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3710      	adds	r7, #16
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	200004dc 	.word	0x200004dc
 8005cd4:	0801126c 	.word	0x0801126c

08005cd8 <vpc3_write_with_retry>:
 * @param wAddress Address to write to
 * @param bData Data to write
 * @param maxRetries Maximum number of retry attempts
 * @return 0 on success, 1 on failure
 */
static uint8_t vpc3_write_with_retry(VPC3_ADR wAddress, uint8_t bData, uint8_t maxRetries) {
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	4603      	mov	r3, r0
 8005ce0:	80fb      	strh	r3, [r7, #6]
 8005ce2:	460b      	mov	r3, r1
 8005ce4:	717b      	strb	r3, [r7, #5]
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	713b      	strb	r3, [r7, #4]
    uint8_t attempts = 0;
 8005cea:	2300      	movs	r3, #0
 8005cec:	73fb      	strb	r3, [r7, #15]
    uint8_t verify_value;
    
    while (attempts < maxRetries) {
 8005cee:	e042      	b.n	8005d76 <vpc3_write_with_retry+0x9e>
        attempts++;
 8005cf0:	7bfb      	ldrb	r3, [r7, #15]
 8005cf2:	3301      	adds	r3, #1
 8005cf4:	73fb      	strb	r3, [r7, #15]
        
        // 1. Iniciar transacción - CS bajo
        HAL_GPIO_WritePin(VPC3_CS_PORT, VPC3_CS_PIN, GPIO_PIN_RESET);
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	2110      	movs	r1, #16
 8005cfa:	4823      	ldr	r0, [pc, #140]	; (8005d88 <vpc3_write_with_retry+0xb0>)
 8005cfc:	f000 ffdc 	bl	8006cb8 <HAL_GPIO_WritePin>
        vpc3_cs_delay(); // Delay para tCSS
 8005d00:	f7ff ffac 	bl	8005c5c <vpc3_cs_delay>
        
        DpAppl_DisableInterruptVPC3Channel1();
 8005d04:	f7fb fab1 	bl	800126a <DpAppl_DisableInterruptVPC3Channel1>
        
        // 2. Enviar byte de instrucción (0x12 para WRITE BYTE)
        vpc3_spi_transfer(OPC_WR_BYTE);
 8005d08:	2012      	movs	r0, #18
 8005d0a:	f7ff ffbb 	bl	8005c84 <vpc3_spi_transfer>
        
        // 3. Enviar dirección de 16 bits (MSB primero)
        vpc3_spi_transfer((uint8_t)(wAddress >> 8)); // Byte alto de la dirección
 8005d0e:	88fb      	ldrh	r3, [r7, #6]
 8005d10:	0a1b      	lsrs	r3, r3, #8
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	4618      	mov	r0, r3
 8005d18:	f7ff ffb4 	bl	8005c84 <vpc3_spi_transfer>
        vpc3_spi_transfer((uint8_t)wAddress);        // Byte bajo de la dirección
 8005d1c:	88fb      	ldrh	r3, [r7, #6]
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	4618      	mov	r0, r3
 8005d22:	f7ff ffaf 	bl	8005c84 <vpc3_spi_transfer>
        
        // 4. Enviar el byte de datos
        vpc3_spi_transfer(bData);
 8005d26:	797b      	ldrb	r3, [r7, #5]
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f7ff ffab 	bl	8005c84 <vpc3_spi_transfer>
        
        // 5. Finalizar transacción - CS alto
        vpc3_cs_delay(); // Delay para tCSH
 8005d2e:	f7ff ff95 	bl	8005c5c <vpc3_cs_delay>
        HAL_GPIO_WritePin(VPC3_CS_PORT, VPC3_CS_PIN, GPIO_PIN_SET);
 8005d32:	2201      	movs	r2, #1
 8005d34:	2110      	movs	r1, #16
 8005d36:	4814      	ldr	r0, [pc, #80]	; (8005d88 <vpc3_write_with_retry+0xb0>)
 8005d38:	f000 ffbe 	bl	8006cb8 <HAL_GPIO_WritePin>
        
        DpAppl_EnableInterruptVPC3Channel1();
 8005d3c:	f7fb fa9c 	bl	8001278 <DpAppl_EnableInterruptVPC3Channel1>
        
        // 6. Verificación con delay
        HAL_Delay(2); // Longer delay for stabilization
 8005d40:	2002      	movs	r0, #2
 8005d42:	f000 fc3b 	bl	80065bc <HAL_Delay>

        // 7. Read back and verify
        if (wAddress == bVpc3WoModeReg2) {
 8005d46:	4b11      	ldr	r3, [pc, #68]	; (8005d8c <vpc3_write_with_retry+0xb4>)
 8005d48:	881b      	ldrh	r3, [r3, #0]
 8005d4a:	330c      	adds	r3, #12
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	88fa      	ldrh	r2, [r7, #6]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d101      	bne.n	8005d58 <vpc3_write_with_retry+0x80>
            // MODE_REG_2 is write-only – accept write without readback
            return 0;
 8005d54:	2300      	movs	r3, #0
 8005d56:	e013      	b.n	8005d80 <vpc3_write_with_retry+0xa8>
        } else {
            verify_value = Vpc3Read(wAddress);
 8005d58:	88fb      	ldrh	r3, [r7, #6]
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f000 f8c8 	bl	8005ef0 <Vpc3Read>
 8005d60:	4603      	mov	r3, r0
 8005d62:	73bb      	strb	r3, [r7, #14]
            if (verify_value == bData) {
 8005d64:	7bba      	ldrb	r2, [r7, #14]
 8005d66:	797b      	ldrb	r3, [r7, #5]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d101      	bne.n	8005d70 <vpc3_write_with_retry+0x98>
                return 0; // Success
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	e007      	b.n	8005d80 <vpc3_write_with_retry+0xa8>
            }
        }
        
        // If verification failed, try again
        HAL_Delay(1);
 8005d70:	2001      	movs	r0, #1
 8005d72:	f000 fc23 	bl	80065bc <HAL_Delay>
    while (attempts < maxRetries) {
 8005d76:	7bfa      	ldrb	r2, [r7, #15]
 8005d78:	793b      	ldrb	r3, [r7, #4]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d3b8      	bcc.n	8005cf0 <vpc3_write_with_retry+0x18>
    }
    
    return 1; // Failure after all retries
 8005d7e:	2301      	movs	r3, #1
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3710      	adds	r7, #16
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}
 8005d88:	40020000 	.word	0x40020000
 8005d8c:	20000144 	.word	0x20000144

08005d90 <Vpc3Write>:

/**
 * @brief Escribe un byte en el VPC3+ siguiendo el protocolo exacto del manual.
 * @note La firma (void, dos parámetros) coincide con la declaración 'extern' en dp_inc.h.
 */
void Vpc3Write(VPC3_ADR wAddress, uint8_t bData) {
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	4603      	mov	r3, r0
 8005d98:	460a      	mov	r2, r1
 8005d9a:	80fb      	strh	r3, [r7, #6]
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	717b      	strb	r3, [r7, #5]
    // DEBUG: Monitoreo de escrituras a registros críticos
    if (wAddress == 0x0C) {  // MODE_REG_2 (bVpc3WoModeReg2)
 8005da0:	88fb      	ldrh	r3, [r7, #6]
 8005da2:	2b0c      	cmp	r3, #12
 8005da4:	d135      	bne.n	8005e12 <Vpc3Write+0x82>
        printf("DEBUG: [Vpc3Write] ⚠️ ESCRITURA a MODE_REG_2 (0x0C): 0x%02X\r\n", bData);
 8005da6:	797b      	ldrb	r3, [r7, #5]
 8005da8:	4619      	mov	r1, r3
 8005daa:	483e      	ldr	r0, [pc, #248]	; (8005ea4 <Vpc3Write+0x114>)
 8005dac:	f002 ff80 	bl	8008cb0 <iprintf>
        if (bData != 0x05) {
 8005db0:	797b      	ldrb	r3, [r7, #5]
 8005db2:	2b05      	cmp	r3, #5
 8005db4:	d007      	beq.n	8005dc6 <Vpc3Write+0x36>
            printf("DEBUG: [Vpc3Write] ⚠️ ADVERTENCIA: MODE_REG_2 se está configurando a 0x%02X en lugar de 0x05\r\n", bData);
 8005db6:	797b      	ldrb	r3, [r7, #5]
 8005db8:	4619      	mov	r1, r3
 8005dba:	483b      	ldr	r0, [pc, #236]	; (8005ea8 <Vpc3Write+0x118>)
 8005dbc:	f002 ff78 	bl	8008cb0 <iprintf>
            printf("DEBUG: [Vpc3Write] ⚠️ VALOR INCORRECTO DETECTADO - Esto causará LECTURAS ILEGALES\r\n");
 8005dc0:	483a      	ldr	r0, [pc, #232]	; (8005eac <Vpc3Write+0x11c>)
 8005dc2:	f003 f811 	bl	8008de8 <puts>
        }
        
        // Stack trace para identificar quién está escribiendo
        printf("DEBUG: [Vpc3Write] 📍 Stack trace - Escritura a MODE_REG_2 desde:\r\n");
 8005dc6:	483a      	ldr	r0, [pc, #232]	; (8005eb0 <Vpc3Write+0x120>)
 8005dc8:	f003 f80e 	bl	8008de8 <puts>
        printf("DEBUG: [Vpc3Write] 📍 - Función llamadora: %s\r\n", __FUNCTION__);
 8005dcc:	4939      	ldr	r1, [pc, #228]	; (8005eb4 <Vpc3Write+0x124>)
 8005dce:	483a      	ldr	r0, [pc, #232]	; (8005eb8 <Vpc3Write+0x128>)
 8005dd0:	f002 ff6e 	bl	8008cb0 <iprintf>
        printf("DEBUG: [Vpc3Write] 📍 - Línea: %d\r\n", __LINE__);
 8005dd4:	219e      	movs	r1, #158	; 0x9e
 8005dd6:	4839      	ldr	r0, [pc, #228]	; (8005ebc <Vpc3Write+0x12c>)
 8005dd8:	f002 ff6a 	bl	8008cb0 <iprintf>
        printf("DEBUG: [Vpc3Write] 📍 - Archivo: %s\r\n", __FILE__);
 8005ddc:	4938      	ldr	r1, [pc, #224]	; (8005ec0 <Vpc3Write+0x130>)
 8005dde:	4839      	ldr	r0, [pc, #228]	; (8005ec4 <Vpc3Write+0x134>)
 8005de0:	f002 ff66 	bl	8008cb0 <iprintf>
        
        // SPI Protocol Debug
        printf("DEBUG: [Vpc3Write] 🔧 SPI Protocol Debug - MODE_REG_2 write:\r\n");
 8005de4:	4838      	ldr	r0, [pc, #224]	; (8005ec8 <Vpc3Write+0x138>)
 8005de6:	f002 ffff 	bl	8008de8 <puts>
        printf("DEBUG: [Vpc3Write] 🔧 - Instruction: 0x%02X (OPC_WR_BYTE)\r\n", OPC_WR_BYTE);
 8005dea:	2112      	movs	r1, #18
 8005dec:	4837      	ldr	r0, [pc, #220]	; (8005ecc <Vpc3Write+0x13c>)
 8005dee:	f002 ff5f 	bl	8008cb0 <iprintf>
        printf("DEBUG: [Vpc3Write] 🔧 - Address: 0x%04X (High: 0x%02X, Low: 0x%02X)\r\n", wAddress, (uint8_t)(wAddress >> 8), (uint8_t)wAddress);
 8005df2:	88f9      	ldrh	r1, [r7, #6]
 8005df4:	88fb      	ldrh	r3, [r7, #6]
 8005df6:	0a1b      	lsrs	r3, r3, #8
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	88fb      	ldrh	r3, [r7, #6]
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	4833      	ldr	r0, [pc, #204]	; (8005ed0 <Vpc3Write+0x140>)
 8005e04:	f002 ff54 	bl	8008cb0 <iprintf>
        printf("DEBUG: [Vpc3Write] 🔧 - Data: 0x%02X\r\n", bData);
 8005e08:	797b      	ldrb	r3, [r7, #5]
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	4831      	ldr	r0, [pc, #196]	; (8005ed4 <Vpc3Write+0x144>)
 8005e0e:	f002 ff4f 	bl	8008cb0 <iprintf>
    }
    
    if (wAddress == 0x09) {  // MODE_REG_1_R (bVpc3WoModeReg1_R)
 8005e12:	88fb      	ldrh	r3, [r7, #6]
 8005e14:	2b09      	cmp	r3, #9
 8005e16:	d104      	bne.n	8005e22 <Vpc3Write+0x92>
        printf("DEBUG: [Vpc3Write] ESCRITURA a MODE_REG_1_R (0x09): 0x%02X\r\n", bData);
 8005e18:	797b      	ldrb	r3, [r7, #5]
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	482e      	ldr	r0, [pc, #184]	; (8005ed8 <Vpc3Write+0x148>)
 8005e1e:	f002 ff47 	bl	8008cb0 <iprintf>
    }
    
    if (wAddress == 0x07 || wAddress == 0x08) {  // MODE_REG_0_H, MODE_REG_0_L
 8005e22:	88fb      	ldrh	r3, [r7, #6]
 8005e24:	2b07      	cmp	r3, #7
 8005e26:	d002      	beq.n	8005e2e <Vpc3Write+0x9e>
 8005e28:	88fb      	ldrh	r3, [r7, #6]
 8005e2a:	2b08      	cmp	r3, #8
 8005e2c:	d10a      	bne.n	8005e44 <Vpc3Write+0xb4>
        printf("DEBUG: [Vpc3Write] ESCRITURA a MODE_REG_0_%c (0x%02X): 0x%02X\r\n", 
 8005e2e:	88fb      	ldrh	r3, [r7, #6]
 8005e30:	2b07      	cmp	r3, #7
 8005e32:	d101      	bne.n	8005e38 <Vpc3Write+0xa8>
 8005e34:	2148      	movs	r1, #72	; 0x48
 8005e36:	e000      	b.n	8005e3a <Vpc3Write+0xaa>
 8005e38:	214c      	movs	r1, #76	; 0x4c
 8005e3a:	88fa      	ldrh	r2, [r7, #6]
 8005e3c:	797b      	ldrb	r3, [r7, #5]
 8005e3e:	4827      	ldr	r0, [pc, #156]	; (8005edc <Vpc3Write+0x14c>)
 8005e40:	f002 ff36 	bl	8008cb0 <iprintf>
               (wAddress == 0x07) ? 'H' : 'L', wAddress, bData);
    }
    
    if (wAddress == 0x0B) {  // MODE_REG_3
 8005e44:	88fb      	ldrh	r3, [r7, #6]
 8005e46:	2b0b      	cmp	r3, #11
 8005e48:	d104      	bne.n	8005e54 <Vpc3Write+0xc4>
        printf("DEBUG: [Vpc3Write] ESCRITURA a MODE_REG_3 (0x0B): 0x%02X\r\n", bData);
 8005e4a:	797b      	ldrb	r3, [r7, #5]
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	4824      	ldr	r0, [pc, #144]	; (8005ee0 <Vpc3Write+0x150>)
 8005e50:	f002 ff2e 	bl	8008cb0 <iprintf>
    }

    // Maintain shadow for write-only MODE_REG_2
    if (wAddress == bVpc3WoModeReg2) {
 8005e54:	4b23      	ldr	r3, [pc, #140]	; (8005ee4 <Vpc3Write+0x154>)
 8005e56:	881b      	ldrh	r3, [r3, #0]
 8005e58:	330c      	adds	r3, #12
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	88fa      	ldrh	r2, [r7, #6]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d102      	bne.n	8005e68 <Vpc3Write+0xd8>
        g_vpc3_mode_reg2_shadow = bData;
 8005e62:	4a21      	ldr	r2, [pc, #132]	; (8005ee8 <Vpc3Write+0x158>)
 8005e64:	797b      	ldrb	r3, [r7, #5]
 8005e66:	7013      	strb	r3, [r2, #0]
    }

    // Use retry mechanism for critical registers
    uint8_t maxRetries = (wAddress == 0x0C) ? 5 : 1; // More retries for MODE_REG_2
 8005e68:	88fb      	ldrh	r3, [r7, #6]
 8005e6a:	2b0c      	cmp	r3, #12
 8005e6c:	d101      	bne.n	8005e72 <Vpc3Write+0xe2>
 8005e6e:	2305      	movs	r3, #5
 8005e70:	e000      	b.n	8005e74 <Vpc3Write+0xe4>
 8005e72:	2301      	movs	r3, #1
 8005e74:	73fb      	strb	r3, [r7, #15]
    uint8_t result = vpc3_write_with_retry(wAddress, bData, maxRetries);
 8005e76:	7bfa      	ldrb	r2, [r7, #15]
 8005e78:	7979      	ldrb	r1, [r7, #5]
 8005e7a:	88fb      	ldrh	r3, [r7, #6]
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f7ff ff2b 	bl	8005cd8 <vpc3_write_with_retry>
 8005e82:	4603      	mov	r3, r0
 8005e84:	73bb      	strb	r3, [r7, #14]
    
    if (result != 0 && wAddress == 0x0C) {
 8005e86:	7bbb      	ldrb	r3, [r7, #14]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d007      	beq.n	8005e9c <Vpc3Write+0x10c>
 8005e8c:	88fb      	ldrh	r3, [r7, #6]
 8005e8e:	2b0c      	cmp	r3, #12
 8005e90:	d104      	bne.n	8005e9c <Vpc3Write+0x10c>
        printf("DEBUG: [Vpc3Write] ❌ ERROR: MODE_REG_2 write failed after %d retries!\r\n", maxRetries);
 8005e92:	7bfb      	ldrb	r3, [r7, #15]
 8005e94:	4619      	mov	r1, r3
 8005e96:	4815      	ldr	r0, [pc, #84]	; (8005eec <Vpc3Write+0x15c>)
 8005e98:	f002 ff0a 	bl	8008cb0 <iprintf>
    }
}
 8005e9c:	bf00      	nop
 8005e9e:	3710      	adds	r7, #16
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}
 8005ea4:	08011298 	.word	0x08011298
 8005ea8:	080112dc 	.word	0x080112dc
 8005eac:	08011340 	.word	0x08011340
 8005eb0:	08011398 	.word	0x08011398
 8005eb4:	08012328 	.word	0x08012328
 8005eb8:	080113e0 	.word	0x080113e0
 8005ebc:	08011414 	.word	0x08011414
 8005ec0:	0801143c 	.word	0x0801143c
 8005ec4:	08011454 	.word	0x08011454
 8005ec8:	0801147c 	.word	0x0801147c
 8005ecc:	080114bc 	.word	0x080114bc
 8005ed0:	080114fc 	.word	0x080114fc
 8005ed4:	08011544 	.word	0x08011544
 8005ed8:	08011570 	.word	0x08011570
 8005edc:	080115b0 	.word	0x080115b0
 8005ee0:	080115f0 	.word	0x080115f0
 8005ee4:	20000144 	.word	0x20000144
 8005ee8:	20000014 	.word	0x20000014
 8005eec:	0801162c 	.word	0x0801162c

08005ef0 <Vpc3Read>:

/**
 * @brief Lee un byte del VPC3+.
 * @note La firma (retorna uint8_t, un parámetro) coincide con la declaración 'extern' en dp_inc.h.
 */
uint8_t Vpc3Read(VPC3_ADR wAddress) {
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	80fb      	strh	r3, [r7, #6]
    // --- Logging detallado de acceso a memoria ---
    VPC3_LogMemoryAccess(wAddress, "READ", "Vpc3Read");
 8005efa:	88fb      	ldrh	r3, [r7, #6]
 8005efc:	4a25      	ldr	r2, [pc, #148]	; (8005f94 <Vpc3Read+0xa4>)
 8005efe:	4926      	ldr	r1, [pc, #152]	; (8005f98 <Vpc3Read+0xa8>)
 8005f00:	4618      	mov	r0, r3
 8005f02:	f000 f871 	bl	8005fe8 <VPC3_LogMemoryAccess>
    VPC3_LogDiagnosticAccess(wAddress, "READ");
 8005f06:	88fb      	ldrh	r3, [r7, #6]
 8005f08:	4923      	ldr	r1, [pc, #140]	; (8005f98 <Vpc3Read+0xa8>)
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f000 f912 	bl	8006134 <VPC3_LogDiagnosticAccess>
    
    // --- Programación Defensiva: Verificación de Límites Adaptativa ---
    if (!VPC3_IsAddressValid(wAddress)) {
 8005f10:	88fb      	ldrh	r3, [r7, #6]
 8005f12:	4618      	mov	r0, r3
 8005f14:	f000 f84c 	bl	8005fb0 <VPC3_IsAddressValid>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d10f      	bne.n	8005f3e <Vpc3Read+0x4e>
        printf("\r\n--- LECTURA ILEGAL DETECTADA EN Vpc3Read ---\r\n");
 8005f1e:	481f      	ldr	r0, [pc, #124]	; (8005f9c <Vpc3Read+0xac>)
 8005f20:	f002 ff62 	bl	8008de8 <puts>
        printf("ERROR: Intento de leer un byte desde una dirección (0x%04X) que está fuera de los límites de la RAM.\r\n",
 8005f24:	88fb      	ldrh	r3, [r7, #6]
 8005f26:	4619      	mov	r1, r3
 8005f28:	481d      	ldr	r0, [pc, #116]	; (8005fa0 <Vpc3Read+0xb0>)
 8005f2a:	f002 fec1 	bl	8008cb0 <iprintf>
               (unsigned int)wAddress);
        printf("Esta es una condición FATAL. Se retornará 0x00 para indicar el error.\r\n");
 8005f2e:	481d      	ldr	r0, [pc, #116]	; (8005fa4 <Vpc3Read+0xb4>)
 8005f30:	f002 ff5a 	bl	8008de8 <puts>
        printf("--- FIN LECTURA ILEGAL ---\r\n");
 8005f34:	481c      	ldr	r0, [pc, #112]	; (8005fa8 <Vpc3Read+0xb8>)
 8005f36:	f002 ff57 	bl	8008de8 <puts>
        return 0x00; // Retornar un valor de error claro
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	e026      	b.n	8005f8c <Vpc3Read+0x9c>
    }
    // --- Fin de la Verificación ---

    // 1. Iniciar transacción - CS bajo
    HAL_GPIO_WritePin(VPC3_CS_PORT, VPC3_CS_PIN, GPIO_PIN_RESET);
 8005f3e:	2200      	movs	r2, #0
 8005f40:	2110      	movs	r1, #16
 8005f42:	481a      	ldr	r0, [pc, #104]	; (8005fac <Vpc3Read+0xbc>)
 8005f44:	f000 feb8 	bl	8006cb8 <HAL_GPIO_WritePin>
    vpc3_cs_delay(); // Delay para tCSS
 8005f48:	f7ff fe88 	bl	8005c5c <vpc3_cs_delay>
    
    DpAppl_DisableInterruptVPC3Channel1();
 8005f4c:	f7fb f98d 	bl	800126a <DpAppl_DisableInterruptVPC3Channel1>
    
    // 2. Enviar byte de instrucción (0x13 para READ BYTE)
    vpc3_spi_transfer(OPC_RD_BYTE);
 8005f50:	2013      	movs	r0, #19
 8005f52:	f7ff fe97 	bl	8005c84 <vpc3_spi_transfer>
    
    // 3. Enviar dirección de 16 bits (MSB primero)
    vpc3_spi_transfer((uint8_t)(wAddress >> 8)); // Byte alto de la dirección
 8005f56:	88fb      	ldrh	r3, [r7, #6]
 8005f58:	0a1b      	lsrs	r3, r3, #8
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f7ff fe90 	bl	8005c84 <vpc3_spi_transfer>
    vpc3_spi_transfer((uint8_t)wAddress);        // Byte bajo de la dirección
 8005f64:	88fb      	ldrh	r3, [r7, #6]
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f7ff fe8b 	bl	8005c84 <vpc3_spi_transfer>
    
    // 4. Continuar generando 8 pulsos de reloj para leer el byte de datos
    uint8_t bData = vpc3_spi_transfer(0x00); // Enviar dummy byte, recibir datos
 8005f6e:	2000      	movs	r0, #0
 8005f70:	f7ff fe88 	bl	8005c84 <vpc3_spi_transfer>
 8005f74:	4603      	mov	r3, r0
 8005f76:	73fb      	strb	r3, [r7, #15]
    
    // 5. Finalizar transacción - CS alto
    vpc3_cs_delay(); // Delay para tCSH
 8005f78:	f7ff fe70 	bl	8005c5c <vpc3_cs_delay>
    HAL_GPIO_WritePin(VPC3_CS_PORT, VPC3_CS_PIN, GPIO_PIN_SET);
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	2110      	movs	r1, #16
 8005f80:	480a      	ldr	r0, [pc, #40]	; (8005fac <Vpc3Read+0xbc>)
 8005f82:	f000 fe99 	bl	8006cb8 <HAL_GPIO_WritePin>
    
    DpAppl_EnableInterruptVPC3Channel1();
 8005f86:	f7fb f977 	bl	8001278 <DpAppl_EnableInterruptVPC3Channel1>
    
    return bData;
 8005f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3710      	adds	r7, #16
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	08011678 	.word	0x08011678
 8005f98:	08011684 	.word	0x08011684
 8005f9c:	0801168c 	.word	0x0801168c
 8005fa0:	080116bc 	.word	0x080116bc
 8005fa4:	08011728 	.word	0x08011728
 8005fa8:	08011774 	.word	0x08011774
 8005fac:	40020000 	.word	0x40020000

08005fb0 <VPC3_IsAddressValid>:
/**
 * @brief Enhanced boundary check that adapts to actual memory mode
 * @param address Address to check
 * @return 1 if address is valid, 0 if invalid
 */
uint8_t VPC3_IsAddressValid(VPC3_ADR address) {
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	80fb      	strh	r3, [r7, #6]
    // Use a conservative approach during initialization to prevent hangs
    // For now, use the configured ASIC_RAM_LENGTH instead of trying to detect it
    uint16_t ram_limit = ASIC_RAM_LENGTH;
 8005fba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005fbe:	81fb      	strh	r3, [r7, #14]
    
    if (address >= ram_limit) {
 8005fc0:	88fa      	ldrh	r2, [r7, #6]
 8005fc2:	89fb      	ldrh	r3, [r7, #14]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d307      	bcc.n	8005fd8 <VPC3_IsAddressValid+0x28>
        printf("DEBUG: [VPC3_IsAddressValid] ❌ Address 0x%04X exceeds RAM limit 0x%04X\r\n", 
 8005fc8:	88fb      	ldrh	r3, [r7, #6]
 8005fca:	89fa      	ldrh	r2, [r7, #14]
 8005fcc:	4619      	mov	r1, r3
 8005fce:	4805      	ldr	r0, [pc, #20]	; (8005fe4 <VPC3_IsAddressValid+0x34>)
 8005fd0:	f002 fe6e 	bl	8008cb0 <iprintf>
               address, ram_limit);
        return 0;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	e000      	b.n	8005fda <VPC3_IsAddressValid+0x2a>
    }
    
    return 1;
 8005fd8:	2301      	movs	r3, #1
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3710      	adds	r7, #16
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	08011988 	.word	0x08011988

08005fe8 <VPC3_LogMemoryAccess>:
 * @brief Logs detailed memory address analysis for debugging
 * @param address The address being accessed
 * @param operation "READ" or "WRITE"
 * @param function_name The calling function name
 */
static void VPC3_LogMemoryAccess(VPC3_ADR address, const char* operation, const char* function_name) {
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b086      	sub	sp, #24
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	4603      	mov	r3, r0
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	607a      	str	r2, [r7, #4]
 8005ff4:	81fb      	strh	r3, [r7, #14]
    // Solo mostrar logs para direcciones fuera de rango o críticas
    if (address >= ASIC_RAM_LENGTH || address == 2046) {
 8005ff6:	89fb      	ldrh	r3, [r7, #14]
 8005ff8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ffc:	d204      	bcs.n	8006008 <VPC3_LogMemoryAccess+0x20>
 8005ffe:	89fb      	ldrh	r3, [r7, #14]
 8006000:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8006004:	4293      	cmp	r3, r2
 8006006:	d167      	bne.n	80060d8 <VPC3_LogMemoryAccess+0xf0>
        printf("🔍 [VPC3_LogMemoryAccess] === ANÁLISIS DE DIRECCIÓN DE MEMORIA ===\r\n");
 8006008:	4835      	ldr	r0, [pc, #212]	; (80060e0 <VPC3_LogMemoryAccess+0xf8>)
 800600a:	f002 feed 	bl	8008de8 <puts>
        printf("🔍 [VPC3_LogMemoryAccess] Operación: %s\r\n", operation);
 800600e:	68b9      	ldr	r1, [r7, #8]
 8006010:	4834      	ldr	r0, [pc, #208]	; (80060e4 <VPC3_LogMemoryAccess+0xfc>)
 8006012:	f002 fe4d 	bl	8008cb0 <iprintf>
        printf("🔍 [VPC3_LogMemoryAccess] Función llamadora: %s\r\n", function_name);
 8006016:	6879      	ldr	r1, [r7, #4]
 8006018:	4833      	ldr	r0, [pc, #204]	; (80060e8 <VPC3_LogMemoryAccess+0x100>)
 800601a:	f002 fe49 	bl	8008cb0 <iprintf>
        printf("🔍 [VPC3_LogMemoryAccess] Dirección: 0x%04X (%u decimal)\r\n", address, address);
 800601e:	89fb      	ldrh	r3, [r7, #14]
 8006020:	89fa      	ldrh	r2, [r7, #14]
 8006022:	4619      	mov	r1, r3
 8006024:	4831      	ldr	r0, [pc, #196]	; (80060ec <VPC3_LogMemoryAccess+0x104>)
 8006026:	f002 fe43 	bl	8008cb0 <iprintf>
        
        // Análisis de rangos de memoria
        printf("🔍 [VPC3_LogMemoryAccess] Rangos de memoria:\r\n");
 800602a:	4831      	ldr	r0, [pc, #196]	; (80060f0 <VPC3_LogMemoryAccess+0x108>)
 800602c:	f002 fedc 	bl	8008de8 <puts>
        printf("🔍 [VPC3_LogMemoryAccess] - 2KB: 0x0000-0x07FF (0-2047)\r\n");
 8006030:	4830      	ldr	r0, [pc, #192]	; (80060f4 <VPC3_LogMemoryAccess+0x10c>)
 8006032:	f002 fed9 	bl	8008de8 <puts>
        printf("🔍 [VPC3_LogMemoryAccess] - 4KB: 0x0000-0x0FFF (0-4095)\r\n");
 8006036:	4830      	ldr	r0, [pc, #192]	; (80060f8 <VPC3_LogMemoryAccess+0x110>)
 8006038:	f002 fed6 	bl	8008de8 <puts>
        printf("🔍 [VPC3_LogMemoryAccess] - ASIC_RAM_LENGTH: 0x%04X (%u)\r\n", ASIC_RAM_LENGTH, ASIC_RAM_LENGTH);
 800603c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006040:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006044:	482d      	ldr	r0, [pc, #180]	; (80060fc <VPC3_LogMemoryAccess+0x114>)
 8006046:	f002 fe33 	bl	8008cb0 <iprintf>
        
        // Verificar si la dirección está en rango
        if (address < ASIC_RAM_LENGTH) {
 800604a:	89fb      	ldrh	r3, [r7, #14]
 800604c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006050:	d203      	bcs.n	800605a <VPC3_LogMemoryAccess+0x72>
            printf("🔍 [VPC3_LogMemoryAccess] ✅ Dirección VÁLIDA dentro del rango\r\n");
 8006052:	482b      	ldr	r0, [pc, #172]	; (8006100 <VPC3_LogMemoryAccess+0x118>)
 8006054:	f002 fec8 	bl	8008de8 <puts>
 8006058:	e009      	b.n	800606e <VPC3_LogMemoryAccess+0x86>
        } else {
            printf("🔍 [VPC3_LogMemoryAccess] ❌ Dirección FUERA DE RANGO!\r\n");
 800605a:	482a      	ldr	r0, [pc, #168]	; (8006104 <VPC3_LogMemoryAccess+0x11c>)
 800605c:	f002 fec4 	bl	8008de8 <puts>
            printf("🔍 [VPC3_LogMemoryAccess] ❌ Excede ASIC_RAM_LENGTH en %u bytes\r\n", address - ASIC_RAM_LENGTH);
 8006060:	89fb      	ldrh	r3, [r7, #14]
 8006062:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8006066:	4619      	mov	r1, r3
 8006068:	4827      	ldr	r0, [pc, #156]	; (8006108 <VPC3_LogMemoryAccess+0x120>)
 800606a:	f002 fe21 	bl	8008cb0 <iprintf>
        }
        
        // Análisis especial para dirección 2046
        if (address == 2046) {
 800606e:	89fb      	ldrh	r3, [r7, #14]
 8006070:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8006074:	4293      	cmp	r3, r2
 8006076:	d12c      	bne.n	80060d2 <VPC3_LogMemoryAccess+0xea>
            printf("🔍 [VPC3_LogMemoryAccess] 🚨 DIRECCIÓN CRÍTICA 2046 DETECTADA!\r\n");
 8006078:	4824      	ldr	r0, [pc, #144]	; (800610c <VPC3_LogMemoryAccess+0x124>)
 800607a:	f002 feb5 	bl	8008de8 <puts>
            printf("🔍 [VPC3_LogMemoryAccess] 🚨 Esta es la dirección del registro de diagnóstico\r\n");
 800607e:	4824      	ldr	r0, [pc, #144]	; (8006110 <VPC3_LogMemoryAccess+0x128>)
 8006080:	f002 feb2 	bl	8008de8 <puts>
            printf("🔍 [VPC3_LogMemoryAccess] 🚨 En modo 2KB: 2046 está en el ÚLTIMO byte (0x7FE)\r\n");
 8006084:	4823      	ldr	r0, [pc, #140]	; (8006114 <VPC3_LogMemoryAccess+0x12c>)
 8006086:	f002 feaf 	bl	8008de8 <puts>
            printf("🔍 [VPC3_LogMemoryAccess] 🚨 En modo 4KB: 2046 está en el rango medio (0x7FE)\r\n");
 800608a:	4823      	ldr	r0, [pc, #140]	; (8006118 <VPC3_LogMemoryAccess+0x130>)
 800608c:	f002 feac 	bl	8008de8 <puts>
            
            // Verificar MODE_REG_2 para determinar el modo actual
            uint8_t mode_reg_2 = VPC3_GetModeReg2Shadow();
 8006090:	f7ff fdd8 	bl	8005c44 <VPC3_GetModeReg2Shadow>
 8006094:	4603      	mov	r3, r0
 8006096:	75fb      	strb	r3, [r7, #23]
            uint8_t bit_7 = (mode_reg_2 >> 7) & 0x01;
 8006098:	7dfb      	ldrb	r3, [r7, #23]
 800609a:	09db      	lsrs	r3, r3, #7
 800609c:	75bb      	strb	r3, [r7, #22]
            printf("🔍 [VPC3_LogMemoryAccess] 🚨 MODE_REG_2 actual: 0x%02X, bit7=%d\r\n", mode_reg_2, bit_7);
 800609e:	7dfb      	ldrb	r3, [r7, #23]
 80060a0:	7dba      	ldrb	r2, [r7, #22]
 80060a2:	4619      	mov	r1, r3
 80060a4:	481d      	ldr	r0, [pc, #116]	; (800611c <VPC3_LogMemoryAccess+0x134>)
 80060a6:	f002 fe03 	bl	8008cb0 <iprintf>
            printf("🔍 [VPC3_LogMemoryAccess] 🚨 Modo detectado: %s\r\n", bit_7 ? "4KB" : "2KB");
 80060aa:	7dbb      	ldrb	r3, [r7, #22]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d001      	beq.n	80060b4 <VPC3_LogMemoryAccess+0xcc>
 80060b0:	4b1b      	ldr	r3, [pc, #108]	; (8006120 <VPC3_LogMemoryAccess+0x138>)
 80060b2:	e000      	b.n	80060b6 <VPC3_LogMemoryAccess+0xce>
 80060b4:	4b1b      	ldr	r3, [pc, #108]	; (8006124 <VPC3_LogMemoryAccess+0x13c>)
 80060b6:	4619      	mov	r1, r3
 80060b8:	481b      	ldr	r0, [pc, #108]	; (8006128 <VPC3_LogMemoryAccess+0x140>)
 80060ba:	f002 fdf9 	bl	8008cb0 <iprintf>
            
            if (bit_7 == 0 && address >= 2048) {
 80060be:	7dbb      	ldrb	r3, [r7, #22]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d106      	bne.n	80060d2 <VPC3_LogMemoryAccess+0xea>
 80060c4:	89fb      	ldrh	r3, [r7, #14]
 80060c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060ca:	d302      	bcc.n	80060d2 <VPC3_LogMemoryAccess+0xea>
                printf("🔍 [VPC3_LogMemoryAccess] 🚨 CONFLICTO: Modo 2KB pero dirección >= 2048\r\n");
 80060cc:	4817      	ldr	r0, [pc, #92]	; (800612c <VPC3_LogMemoryAccess+0x144>)
 80060ce:	f002 fe8b 	bl	8008de8 <puts>
            }
        }
        
        printf("🔍 [VPC3_LogMemoryAccess] === FIN ANÁLISIS ===\r\n");
 80060d2:	4817      	ldr	r0, [pc, #92]	; (8006130 <VPC3_LogMemoryAccess+0x148>)
 80060d4:	f002 fe88 	bl	8008de8 <puts>
    }
}
 80060d8:	bf00      	nop
 80060da:	3718      	adds	r7, #24
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	080119d4 	.word	0x080119d4
 80060e4:	08011a1c 	.word	0x08011a1c
 80060e8:	08011a4c 	.word	0x08011a4c
 80060ec:	08011a84 	.word	0x08011a84
 80060f0:	08011ac4 	.word	0x08011ac4
 80060f4:	08011af4 	.word	0x08011af4
 80060f8:	08011b30 	.word	0x08011b30
 80060fc:	08011b6c 	.word	0x08011b6c
 8006100:	08011bac 	.word	0x08011bac
 8006104:	08011bf4 	.word	0x08011bf4
 8006108:	08011c30 	.word	0x08011c30
 800610c:	08011c78 	.word	0x08011c78
 8006110:	08011cc0 	.word	0x08011cc0
 8006114:	08011d18 	.word	0x08011d18
 8006118:	08011d70 	.word	0x08011d70
 800611c:	08011dc4 	.word	0x08011dc4
 8006120:	08011e0c 	.word	0x08011e0c
 8006124:	08011e10 	.word	0x08011e10
 8006128:	08011e14 	.word	0x08011e14
 800612c:	08011e4c 	.word	0x08011e4c
 8006130:	08011e9c 	.word	0x08011e9c

08006134 <VPC3_LogDiagnosticAccess>:
/**
 * @brief Logs specific analysis for diagnostic register access
 * @param address The diagnostic register address
 * @param operation "READ" or "WRITE"
 */
static void VPC3_LogDiagnosticAccess(VPC3_ADR address, const char* operation) {
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	4603      	mov	r3, r0
 800613c:	6039      	str	r1, [r7, #0]
 800613e:	80fb      	strh	r3, [r7, #6]
    if (address == 2046 || address == 0x7FE) {
 8006140:	88fb      	ldrh	r3, [r7, #6]
 8006142:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8006146:	4293      	cmp	r3, r2
 8006148:	d004      	beq.n	8006154 <VPC3_LogDiagnosticAccess+0x20>
 800614a:	88fb      	ldrh	r3, [r7, #6]
 800614c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8006150:	4293      	cmp	r3, r2
 8006152:	d14c      	bne.n	80061ee <VPC3_LogDiagnosticAccess+0xba>
        printf("🚨 [VPC3_LogDiagnosticAccess] === ACCESO AL REGISTRO DE DIAGNÓSTICO ===\r\n");
 8006154:	4828      	ldr	r0, [pc, #160]	; (80061f8 <VPC3_LogDiagnosticAccess+0xc4>)
 8006156:	f002 fe47 	bl	8008de8 <puts>
        printf("🚨 [VPC3_LogDiagnosticAccess] Operación: %s\r\n", operation);
 800615a:	6839      	ldr	r1, [r7, #0]
 800615c:	4827      	ldr	r0, [pc, #156]	; (80061fc <VPC3_LogDiagnosticAccess+0xc8>)
 800615e:	f002 fda7 	bl	8008cb0 <iprintf>
        printf("🚨 [VPC3_LogDiagnosticAccess] Dirección: 0x%04X (%u decimal)\r\n", address, address);
 8006162:	88fb      	ldrh	r3, [r7, #6]
 8006164:	88fa      	ldrh	r2, [r7, #6]
 8006166:	4619      	mov	r1, r3
 8006168:	4825      	ldr	r0, [pc, #148]	; (8006200 <VPC3_LogDiagnosticAccess+0xcc>)
 800616a:	f002 fda1 	bl	8008cb0 <iprintf>
        
        // Análisis del modo de memoria actual
        uint8_t mode_reg_2 = VPC3_GetModeReg2Shadow();
 800616e:	f7ff fd69 	bl	8005c44 <VPC3_GetModeReg2Shadow>
 8006172:	4603      	mov	r3, r0
 8006174:	73fb      	strb	r3, [r7, #15]
        uint8_t bit_7 = (mode_reg_2 >> 7) & 0x01;
 8006176:	7bfb      	ldrb	r3, [r7, #15]
 8006178:	09db      	lsrs	r3, r3, #7
 800617a:	73bb      	strb	r3, [r7, #14]
        
        printf("🚨 [VPC3_LogDiagnosticAccess] MODE_REG_2: 0x%02X (bit7=%d)\r\n", mode_reg_2, bit_7);
 800617c:	7bfb      	ldrb	r3, [r7, #15]
 800617e:	7bba      	ldrb	r2, [r7, #14]
 8006180:	4619      	mov	r1, r3
 8006182:	4820      	ldr	r0, [pc, #128]	; (8006204 <VPC3_LogDiagnosticAccess+0xd0>)
 8006184:	f002 fd94 	bl	8008cb0 <iprintf>
        printf("🚨 [VPC3_LogDiagnosticAccess] Modo actual: %s\r\n", bit_7 ? "4KB" : "2KB");
 8006188:	7bbb      	ldrb	r3, [r7, #14]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d001      	beq.n	8006192 <VPC3_LogDiagnosticAccess+0x5e>
 800618e:	4b1e      	ldr	r3, [pc, #120]	; (8006208 <VPC3_LogDiagnosticAccess+0xd4>)
 8006190:	e000      	b.n	8006194 <VPC3_LogDiagnosticAccess+0x60>
 8006192:	4b1e      	ldr	r3, [pc, #120]	; (800620c <VPC3_LogDiagnosticAccess+0xd8>)
 8006194:	4619      	mov	r1, r3
 8006196:	481e      	ldr	r0, [pc, #120]	; (8006210 <VPC3_LogDiagnosticAccess+0xdc>)
 8006198:	f002 fd8a 	bl	8008cb0 <iprintf>
        printf("🚨 [VPC3_LogDiagnosticAccess] ASIC_RAM_LENGTH: 0x%04X (%u)\r\n", ASIC_RAM_LENGTH, ASIC_RAM_LENGTH);
 800619c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80061a4:	481b      	ldr	r0, [pc, #108]	; (8006214 <VPC3_LogDiagnosticAccess+0xe0>)
 80061a6:	f002 fd83 	bl	8008cb0 <iprintf>
        
        // Verificar si hay conflicto
        if (bit_7 == 0 && address >= 2048) {
 80061aa:	7bbb      	ldrb	r3, [r7, #14]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d10d      	bne.n	80061cc <VPC3_LogDiagnosticAccess+0x98>
 80061b0:	88fb      	ldrh	r3, [r7, #6]
 80061b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061b6:	d309      	bcc.n	80061cc <VPC3_LogDiagnosticAccess+0x98>
            printf("🚨 [VPC3_LogDiagnosticAccess] ❌ CONFLICTO DETECTADO!\r\n");
 80061b8:	4817      	ldr	r0, [pc, #92]	; (8006218 <VPC3_LogDiagnosticAccess+0xe4>)
 80061ba:	f002 fe15 	bl	8008de8 <puts>
            printf("🚨 [VPC3_LogDiagnosticAccess] ❌ Modo 2KB pero dirección >= 2048\r\n");
 80061be:	4817      	ldr	r0, [pc, #92]	; (800621c <VPC3_LogDiagnosticAccess+0xe8>)
 80061c0:	f002 fe12 	bl	8008de8 <puts>
            printf("🚨 [VPC3_LogDiagnosticAccess] ❌ Esto puede causar desbordamiento de memoria\r\n");
 80061c4:	4816      	ldr	r0, [pc, #88]	; (8006220 <VPC3_LogDiagnosticAccess+0xec>)
 80061c6:	f002 fe0f 	bl	8008de8 <puts>
 80061ca:	e00d      	b.n	80061e8 <VPC3_LogDiagnosticAccess+0xb4>
        } else if (bit_7 == 1 && address < 2048) {
 80061cc:	7bbb      	ldrb	r3, [r7, #14]
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d107      	bne.n	80061e2 <VPC3_LogDiagnosticAccess+0xae>
 80061d2:	88fb      	ldrh	r3, [r7, #6]
 80061d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061d8:	d203      	bcs.n	80061e2 <VPC3_LogDiagnosticAccess+0xae>
            printf("🚨 [VPC3_LogDiagnosticAccess] ⚠️ Posible subutilización de memoria 4KB\r\n");
 80061da:	4812      	ldr	r0, [pc, #72]	; (8006224 <VPC3_LogDiagnosticAccess+0xf0>)
 80061dc:	f002 fe04 	bl	8008de8 <puts>
 80061e0:	e002      	b.n	80061e8 <VPC3_LogDiagnosticAccess+0xb4>
        } else {
            printf("🚨 [VPC3_LogDiagnosticAccess] ✅ Configuración coherente\r\n");
 80061e2:	4811      	ldr	r0, [pc, #68]	; (8006228 <VPC3_LogDiagnosticAccess+0xf4>)
 80061e4:	f002 fe00 	bl	8008de8 <puts>
        }
        
        printf("🚨 [VPC3_LogDiagnosticAccess] === FIN ANÁLISIS DIAGNÓSTICO ===\r\n");
 80061e8:	4810      	ldr	r0, [pc, #64]	; (800622c <VPC3_LogDiagnosticAccess+0xf8>)
 80061ea:	f002 fdfd 	bl	8008de8 <puts>
    }
}
 80061ee:	bf00      	nop
 80061f0:	3710      	adds	r7, #16
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	08011ed0 	.word	0x08011ed0
 80061fc:	08011f1c 	.word	0x08011f1c
 8006200:	08011f50 	.word	0x08011f50
 8006204:	08011f94 	.word	0x08011f94
 8006208:	08011e0c 	.word	0x08011e0c
 800620c:	08011e10 	.word	0x08011e10
 8006210:	08011fd4 	.word	0x08011fd4
 8006214:	08012008 	.word	0x08012008
 8006218:	08012048 	.word	0x08012048
 800621c:	08012084 	.word	0x08012084
 8006220:	080120cc 	.word	0x080120cc
 8006224:	08012120 	.word	0x08012120
 8006228:	08012170 	.word	0x08012170
 800622c:	080121b0 	.word	0x080121b0

08006230 <CopyToVpc3>:
}

/**
 * @brief Escribe un array de bytes en el VPC3+. Esta función es llamada por el macro CopyToVpc3.
 */
void CopyToVpc3(VPC3_UNSIGNED8_PTR pToVpc3Memory, MEM_UNSIGNED8_PTR pLocalMemory, uint16_t wLength) {
 8006230:	b580      	push	{r7, lr}
 8006232:	b088      	sub	sp, #32
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	4613      	mov	r3, r2
 800623c:	80fb      	strh	r3, [r7, #6]
    const uint16_t MAX_TRANSFER_SIZE = 240; // Tamaño máximo seguro para transferencias SPI
 800623e:	23f0      	movs	r3, #240	; 0xf0
 8006240:	837b      	strh	r3, [r7, #26]
    VPC3_ADR addr = (VPC3_ADR)(uintptr_t)pToVpc3Memory;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	833b      	strh	r3, [r7, #24]
    
    uint16_t remaining = wLength;
 8006246:	88fb      	ldrh	r3, [r7, #6]
 8006248:	83fb      	strh	r3, [r7, #30]
    uint16_t offset = 0;
 800624a:	2300      	movs	r3, #0
 800624c:	83bb      	strh	r3, [r7, #28]
    
    while (remaining > 0) {
 800624e:	e039      	b.n	80062c4 <CopyToVpc3+0x94>
        uint16_t transferSize = (remaining > MAX_TRANSFER_SIZE) ? MAX_TRANSFER_SIZE : remaining;
 8006250:	8bfa      	ldrh	r2, [r7, #30]
 8006252:	8b7b      	ldrh	r3, [r7, #26]
 8006254:	4293      	cmp	r3, r2
 8006256:	bf28      	it	cs
 8006258:	4613      	movcs	r3, r2
 800625a:	82fb      	strh	r3, [r7, #22]
        uint8_t cmd[3] = {OPC_WR_ARRAY, (uint8_t)((addr + offset) >> 8), (uint8_t)(addr + offset)};
 800625c:	2302      	movs	r3, #2
 800625e:	743b      	strb	r3, [r7, #16]
 8006260:	8b3a      	ldrh	r2, [r7, #24]
 8006262:	8bbb      	ldrh	r3, [r7, #28]
 8006264:	4413      	add	r3, r2
 8006266:	121b      	asrs	r3, r3, #8
 8006268:	b2db      	uxtb	r3, r3
 800626a:	747b      	strb	r3, [r7, #17]
 800626c:	8b3b      	ldrh	r3, [r7, #24]
 800626e:	b2da      	uxtb	r2, r3
 8006270:	8bbb      	ldrh	r3, [r7, #28]
 8006272:	b2db      	uxtb	r3, r3
 8006274:	4413      	add	r3, r2
 8006276:	b2db      	uxtb	r3, r3
 8006278:	74bb      	strb	r3, [r7, #18]

        DpAppl_DisableInterruptVPC3Channel1();
 800627a:	f7fa fff6 	bl	800126a <DpAppl_DisableInterruptVPC3Channel1>
        VPC3_CS_LOW();
 800627e:	2200      	movs	r2, #0
 8006280:	2110      	movs	r1, #16
 8006282:	4814      	ldr	r0, [pc, #80]	; (80062d4 <CopyToVpc3+0xa4>)
 8006284:	f000 fd18 	bl	8006cb8 <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(&hspi1, cmd, 3, VPC3_TIMEOUT_MS);
 8006288:	f107 0110 	add.w	r1, r7, #16
 800628c:	2364      	movs	r3, #100	; 0x64
 800628e:	2203      	movs	r2, #3
 8006290:	4811      	ldr	r0, [pc, #68]	; (80062d8 <CopyToVpc3+0xa8>)
 8006292:	f001 fa28 	bl	80076e6 <HAL_SPI_Transmit>
        HAL_SPI_Transmit(&hspi1, (uint8_t*)pLocalMemory + offset, transferSize, VPC3_TIMEOUT_MS);
 8006296:	8bbb      	ldrh	r3, [r7, #28]
 8006298:	68ba      	ldr	r2, [r7, #8]
 800629a:	18d1      	adds	r1, r2, r3
 800629c:	8afa      	ldrh	r2, [r7, #22]
 800629e:	2364      	movs	r3, #100	; 0x64
 80062a0:	480d      	ldr	r0, [pc, #52]	; (80062d8 <CopyToVpc3+0xa8>)
 80062a2:	f001 fa20 	bl	80076e6 <HAL_SPI_Transmit>
        VPC3_CS_HIGH();
 80062a6:	2201      	movs	r2, #1
 80062a8:	2110      	movs	r1, #16
 80062aa:	480a      	ldr	r0, [pc, #40]	; (80062d4 <CopyToVpc3+0xa4>)
 80062ac:	f000 fd04 	bl	8006cb8 <HAL_GPIO_WritePin>
        DpAppl_EnableInterruptVPC3Channel1();
 80062b0:	f7fa ffe2 	bl	8001278 <DpAppl_EnableInterruptVPC3Channel1>
        
        offset += transferSize;
 80062b4:	8bba      	ldrh	r2, [r7, #28]
 80062b6:	8afb      	ldrh	r3, [r7, #22]
 80062b8:	4413      	add	r3, r2
 80062ba:	83bb      	strh	r3, [r7, #28]
        remaining -= transferSize;
 80062bc:	8bfa      	ldrh	r2, [r7, #30]
 80062be:	8afb      	ldrh	r3, [r7, #22]
 80062c0:	1ad3      	subs	r3, r2, r3
 80062c2:	83fb      	strh	r3, [r7, #30]
    while (remaining > 0) {
 80062c4:	8bfb      	ldrh	r3, [r7, #30]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d1c2      	bne.n	8006250 <CopyToVpc3+0x20>
    }
}
 80062ca:	bf00      	nop
 80062cc:	bf00      	nop
 80062ce:	3720      	adds	r7, #32
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	40020000 	.word	0x40020000
 80062d8:	200004dc 	.word	0x200004dc

080062dc <CopyFromVpc3>:

/**
 * @brief Lee un array de bytes del VPC3+. Esta es llamada por el macro CopyFromVpc3.
 */
void CopyFromVpc3(MEM_UNSIGNED8_PTR pLocalMemory, VPC3_UNSIGNED8_PTR pToVpc3Memory, uint16_t wLength) {
 80062dc:	b580      	push	{r7, lr}
 80062de:	b088      	sub	sp, #32
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	4613      	mov	r3, r2
 80062e8:	80fb      	strh	r3, [r7, #6]
    VPC3_ADR addr = (VPC3_ADR)(uintptr_t)pToVpc3Memory;
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	837b      	strh	r3, [r7, #26]

    // --- Programación Defensiva: Verificación de Límites Conservativa ---
    uint16_t ram_limit = ASIC_RAM_LENGTH;
 80062ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80062f2:	833b      	strh	r3, [r7, #24]
    if ( (addr + wLength) > ram_limit ) {
 80062f4:	8b7a      	ldrh	r2, [r7, #26]
 80062f6:	88fb      	ldrh	r3, [r7, #6]
 80062f8:	441a      	add	r2, r3
 80062fa:	8b3b      	ldrh	r3, [r7, #24]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	dd15      	ble.n	800632c <CopyFromVpc3+0x50>
        printf("\r\n--- LECTURA ILEGAL DETECTADA EN CopyFromVpc3 ---\r\n");
 8006300:	482e      	ldr	r0, [pc, #184]	; (80063bc <CopyFromVpc3+0xe0>)
 8006302:	f002 fd71 	bl	8008de8 <puts>
        printf("ERROR: Intento de leer un bloque de %u bytes desde una dirección (0x%04X) que excede los límites de la RAM (0x%04X).\r\n",
 8006306:	88f9      	ldrh	r1, [r7, #6]
 8006308:	8b7a      	ldrh	r2, [r7, #26]
 800630a:	8b3b      	ldrh	r3, [r7, #24]
 800630c:	482c      	ldr	r0, [pc, #176]	; (80063c0 <CopyFromVpc3+0xe4>)
 800630e:	f002 fccf 	bl	8008cb0 <iprintf>
               wLength, (unsigned int)addr, ram_limit);
        printf("Esta es una condición FATAL que probablemente cause un crash. La operación de copia será OMITIDA.\r\n");
 8006312:	482c      	ldr	r0, [pc, #176]	; (80063c4 <CopyFromVpc3+0xe8>)
 8006314:	f002 fd68 	bl	8008de8 <puts>
        printf("--- FIN LECTURA ILEGAL ---\r\n");
 8006318:	482b      	ldr	r0, [pc, #172]	; (80063c8 <CopyFromVpc3+0xec>)
 800631a:	f002 fd65 	bl	8008de8 <puts>
        // Opcional: llenar el buffer local con un patrón de error para que sea obvio en el debug
        memset(pLocalMemory, 0xDE, wLength); // 0xDE for 'dead' or 'deleted'
 800631e:	88fb      	ldrh	r3, [r7, #6]
 8006320:	461a      	mov	r2, r3
 8006322:	21de      	movs	r1, #222	; 0xde
 8006324:	68f8      	ldr	r0, [r7, #12]
 8006326:	f002 fcbb 	bl	8008ca0 <memset>
        return; // Detener la ejecución para prevenir el crash del SPI
 800632a:	e043      	b.n	80063b4 <CopyFromVpc3+0xd8>
    }
    // --- Fin de la Verificación ---

    const uint16_t MAX_TRANSFER_SIZE = 240; // Tamaño máximo seguro para transferencias SPI
 800632c:	23f0      	movs	r3, #240	; 0xf0
 800632e:	82fb      	strh	r3, [r7, #22]
    uint16_t remaining = wLength;
 8006330:	88fb      	ldrh	r3, [r7, #6]
 8006332:	83fb      	strh	r3, [r7, #30]
    uint16_t offset = 0;
 8006334:	2300      	movs	r3, #0
 8006336:	83bb      	strh	r3, [r7, #28]
    
    // --- NUEVAS LÍNEAS DE DEBUG ---
    //printf("DEBUG: [CopyFromVpc3] Lectura de 0x%04X, longitud %d\r\n", (unsigned int)addr, wLength);
    // -----------------------------

    while (remaining > 0) {
 8006338:	e039      	b.n	80063ae <CopyFromVpc3+0xd2>
        uint16_t transferSize = (remaining > MAX_TRANSFER_SIZE) ? MAX_TRANSFER_SIZE : remaining;
 800633a:	8bfa      	ldrh	r2, [r7, #30]
 800633c:	8afb      	ldrh	r3, [r7, #22]
 800633e:	4293      	cmp	r3, r2
 8006340:	bf28      	it	cs
 8006342:	4613      	movcs	r3, r2
 8006344:	82bb      	strh	r3, [r7, #20]
        uint8_t cmd[3] = {OPC_RD_ARRAY, (uint8_t)((addr + offset) >> 8), (uint8_t)(addr + offset)};
 8006346:	2303      	movs	r3, #3
 8006348:	743b      	strb	r3, [r7, #16]
 800634a:	8b7a      	ldrh	r2, [r7, #26]
 800634c:	8bbb      	ldrh	r3, [r7, #28]
 800634e:	4413      	add	r3, r2
 8006350:	121b      	asrs	r3, r3, #8
 8006352:	b2db      	uxtb	r3, r3
 8006354:	747b      	strb	r3, [r7, #17]
 8006356:	8b7b      	ldrh	r3, [r7, #26]
 8006358:	b2da      	uxtb	r2, r3
 800635a:	8bbb      	ldrh	r3, [r7, #28]
 800635c:	b2db      	uxtb	r3, r3
 800635e:	4413      	add	r3, r2
 8006360:	b2db      	uxtb	r3, r3
 8006362:	74bb      	strb	r3, [r7, #18]

        DpAppl_DisableInterruptVPC3Channel1();
 8006364:	f7fa ff81 	bl	800126a <DpAppl_DisableInterruptVPC3Channel1>
        VPC3_CS_LOW();
 8006368:	2200      	movs	r2, #0
 800636a:	2110      	movs	r1, #16
 800636c:	4817      	ldr	r0, [pc, #92]	; (80063cc <CopyFromVpc3+0xf0>)
 800636e:	f000 fca3 	bl	8006cb8 <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(&hspi1, cmd, 3, VPC3_TIMEOUT_MS);
 8006372:	f107 0110 	add.w	r1, r7, #16
 8006376:	2364      	movs	r3, #100	; 0x64
 8006378:	2203      	movs	r2, #3
 800637a:	4815      	ldr	r0, [pc, #84]	; (80063d0 <CopyFromVpc3+0xf4>)
 800637c:	f001 f9b3 	bl	80076e6 <HAL_SPI_Transmit>
        HAL_SPI_Receive(&hspi1, (uint8_t*)pLocalMemory + offset, transferSize, VPC3_TIMEOUT_MS);
 8006380:	8bbb      	ldrh	r3, [r7, #28]
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	18d1      	adds	r1, r2, r3
 8006386:	8aba      	ldrh	r2, [r7, #20]
 8006388:	2364      	movs	r3, #100	; 0x64
 800638a:	4811      	ldr	r0, [pc, #68]	; (80063d0 <CopyFromVpc3+0xf4>)
 800638c:	f001 fae7 	bl	800795e <HAL_SPI_Receive>
        VPC3_CS_HIGH();
 8006390:	2201      	movs	r2, #1
 8006392:	2110      	movs	r1, #16
 8006394:	480d      	ldr	r0, [pc, #52]	; (80063cc <CopyFromVpc3+0xf0>)
 8006396:	f000 fc8f 	bl	8006cb8 <HAL_GPIO_WritePin>
        DpAppl_EnableInterruptVPC3Channel1();
 800639a:	f7fa ff6d 	bl	8001278 <DpAppl_EnableInterruptVPC3Channel1>
        
        offset += transferSize;
 800639e:	8bba      	ldrh	r2, [r7, #28]
 80063a0:	8abb      	ldrh	r3, [r7, #20]
 80063a2:	4413      	add	r3, r2
 80063a4:	83bb      	strh	r3, [r7, #28]
        remaining -= transferSize;
 80063a6:	8bfa      	ldrh	r2, [r7, #30]
 80063a8:	8abb      	ldrh	r3, [r7, #20]
 80063aa:	1ad3      	subs	r3, r2, r3
 80063ac:	83fb      	strh	r3, [r7, #30]
    while (remaining > 0) {
 80063ae:	8bfb      	ldrh	r3, [r7, #30]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d1c2      	bne.n	800633a <CopyFromVpc3+0x5e>
    //for(int k=0; k<wLength; k++) {
    //    printf("0x%02X ", ((uint8_t*)pLocalMemory)[k]);
    //}
    //printf("\r\n");
    // -----------------------------
}
 80063b4:	3720      	adds	r7, #32
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	080121f4 	.word	0x080121f4
 80063c0:	08012228 	.word	0x08012228
 80063c4:	080122a4 	.word	0x080122a4
 80063c8:	08011774 	.word	0x08011774
 80063cc:	40020000 	.word	0x40020000
 80063d0:	200004dc 	.word	0x200004dc

080063d4 <Vpc3MemSet>:

/**
 * @brief Llena una sección de memoria del VPC3+ con un valor.
 */
void Vpc3MemSet(VPC3_ADR wAddress, uint8_t bValue, uint16_t wLength) {
 80063d4:	b590      	push	{r4, r7, lr}
 80063d6:	b089      	sub	sp, #36	; 0x24
 80063d8:	af00      	add	r7, sp, #0
 80063da:	4603      	mov	r3, r0
 80063dc:	80fb      	strh	r3, [r7, #6]
 80063de:	460b      	mov	r3, r1
 80063e0:	717b      	strb	r3, [r7, #5]
 80063e2:	4613      	mov	r3, r2
 80063e4:	807b      	strh	r3, [r7, #2]
 80063e6:	466b      	mov	r3, sp
 80063e8:	461c      	mov	r4, r3
    const uint16_t BLOCK_SIZE = 256; // Tamaño de bloque para transferencias grandes
 80063ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80063ee:	837b      	strh	r3, [r7, #26]
    uint8_t buffer[BLOCK_SIZE];
 80063f0:	8b7b      	ldrh	r3, [r7, #26]
 80063f2:	3b01      	subs	r3, #1
 80063f4:	617b      	str	r3, [r7, #20]
 80063f6:	8b78      	ldrh	r0, [r7, #26]
 80063f8:	f04f 0100 	mov.w	r1, #0
 80063fc:	f04f 0200 	mov.w	r2, #0
 8006400:	f04f 0300 	mov.w	r3, #0
 8006404:	00cb      	lsls	r3, r1, #3
 8006406:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800640a:	00c2      	lsls	r2, r0, #3
 800640c:	8b78      	ldrh	r0, [r7, #26]
 800640e:	f04f 0100 	mov.w	r1, #0
 8006412:	f04f 0200 	mov.w	r2, #0
 8006416:	f04f 0300 	mov.w	r3, #0
 800641a:	00cb      	lsls	r3, r1, #3
 800641c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8006420:	00c2      	lsls	r2, r0, #3
 8006422:	8b7b      	ldrh	r3, [r7, #26]
 8006424:	3307      	adds	r3, #7
 8006426:	08db      	lsrs	r3, r3, #3
 8006428:	00db      	lsls	r3, r3, #3
 800642a:	ebad 0d03 	sub.w	sp, sp, r3
 800642e:	466b      	mov	r3, sp
 8006430:	3300      	adds	r3, #0
 8006432:	613b      	str	r3, [r7, #16]
    
    // Llenar el buffer con el valor deseado
    memset(buffer, bValue, BLOCK_SIZE);
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	7979      	ldrb	r1, [r7, #5]
 8006438:	8b7a      	ldrh	r2, [r7, #26]
 800643a:	4618      	mov	r0, r3
 800643c:	f002 fc30 	bl	8008ca0 <memset>
    
    // Procesar en bloques
    uint16_t remaining = wLength;
 8006440:	887b      	ldrh	r3, [r7, #2]
 8006442:	83bb      	strh	r3, [r7, #28]
    VPC3_ADR currentAddr = wAddress;
 8006444:	88fb      	ldrh	r3, [r7, #6]
 8006446:	83fb      	strh	r3, [r7, #30]
    
    while (remaining > 0) {
 8006448:	e014      	b.n	8006474 <Vpc3MemSet+0xa0>
        uint16_t blockSize = (remaining > BLOCK_SIZE) ? BLOCK_SIZE : remaining;
 800644a:	8bba      	ldrh	r2, [r7, #28]
 800644c:	8b7b      	ldrh	r3, [r7, #26]
 800644e:	4293      	cmp	r3, r2
 8006450:	bf28      	it	cs
 8006452:	4613      	movcs	r3, r2
 8006454:	81fb      	strh	r3, [r7, #14]
        CopyToVpc3((VPC3_UNSIGNED8_PTR)(uintptr_t)currentAddr, buffer, blockSize);
 8006456:	8bfb      	ldrh	r3, [r7, #30]
 8006458:	4618      	mov	r0, r3
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	89fa      	ldrh	r2, [r7, #14]
 800645e:	4619      	mov	r1, r3
 8006460:	f7ff fee6 	bl	8006230 <CopyToVpc3>
        
        currentAddr += blockSize;
 8006464:	8bfa      	ldrh	r2, [r7, #30]
 8006466:	89fb      	ldrh	r3, [r7, #14]
 8006468:	4413      	add	r3, r2
 800646a:	83fb      	strh	r3, [r7, #30]
        remaining -= blockSize;
 800646c:	8bba      	ldrh	r2, [r7, #28]
 800646e:	89fb      	ldrh	r3, [r7, #14]
 8006470:	1ad3      	subs	r3, r2, r3
 8006472:	83bb      	strh	r3, [r7, #28]
    while (remaining > 0) {
 8006474:	8bbb      	ldrh	r3, [r7, #28]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d1e7      	bne.n	800644a <Vpc3MemSet+0x76>
 800647a:	46a5      	mov	sp, r4
    }
}
 800647c:	bf00      	nop
 800647e:	3724      	adds	r7, #36	; 0x24
 8006480:	46bd      	mov	sp, r7
 8006482:	bd90      	pop	{r4, r7, pc}

08006484 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8006484:	f8df d034 	ldr.w	sp, [pc, #52]	; 80064bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006488:	480d      	ldr	r0, [pc, #52]	; (80064c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800648a:	490e      	ldr	r1, [pc, #56]	; (80064c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800648c:	4a0e      	ldr	r2, [pc, #56]	; (80064c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800648e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006490:	e002      	b.n	8006498 <LoopCopyDataInit>

08006492 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006492:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006494:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006496:	3304      	adds	r3, #4

08006498 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006498:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800649a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800649c:	d3f9      	bcc.n	8006492 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800649e:	4a0b      	ldr	r2, [pc, #44]	; (80064cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80064a0:	4c0b      	ldr	r4, [pc, #44]	; (80064d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80064a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80064a4:	e001      	b.n	80064aa <LoopFillZerobss>

080064a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80064a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80064a8:	3204      	adds	r2, #4

080064aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80064aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80064ac:	d3fb      	bcc.n	80064a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80064ae:	f7ff fbb7 	bl	8005c20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80064b2:	f002 fbc3 	bl	8008c3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80064b6:	f7fe fe39 	bl	800512c <main>
  bx  lr    
 80064ba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80064bc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80064c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80064c4:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80064c8:	080123dc 	.word	0x080123dc
  ldr r2, =_sbss
 80064cc:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80064d0:	2000058c 	.word	0x2000058c

080064d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80064d4:	e7fe      	b.n	80064d4 <ADC_IRQHandler>
	...

080064d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80064dc:	4b0e      	ldr	r3, [pc, #56]	; (8006518 <HAL_Init+0x40>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a0d      	ldr	r2, [pc, #52]	; (8006518 <HAL_Init+0x40>)
 80064e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80064e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80064e8:	4b0b      	ldr	r3, [pc, #44]	; (8006518 <HAL_Init+0x40>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a0a      	ldr	r2, [pc, #40]	; (8006518 <HAL_Init+0x40>)
 80064ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80064f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80064f4:	4b08      	ldr	r3, [pc, #32]	; (8006518 <HAL_Init+0x40>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a07      	ldr	r2, [pc, #28]	; (8006518 <HAL_Init+0x40>)
 80064fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006500:	2003      	movs	r0, #3
 8006502:	f000 f973 	bl	80067ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006506:	2000      	movs	r0, #0
 8006508:	f000 f808 	bl	800651c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800650c:	f7ff f9e8 	bl	80058e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop
 8006518:	40023c00 	.word	0x40023c00

0800651c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b082      	sub	sp, #8
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006524:	4b12      	ldr	r3, [pc, #72]	; (8006570 <HAL_InitTick+0x54>)
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	4b12      	ldr	r3, [pc, #72]	; (8006574 <HAL_InitTick+0x58>)
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	4619      	mov	r1, r3
 800652e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006532:	fbb3 f3f1 	udiv	r3, r3, r1
 8006536:	fbb2 f3f3 	udiv	r3, r2, r3
 800653a:	4618      	mov	r0, r3
 800653c:	f000 f999 	bl	8006872 <HAL_SYSTICK_Config>
 8006540:	4603      	mov	r3, r0
 8006542:	2b00      	cmp	r3, #0
 8006544:	d001      	beq.n	800654a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	e00e      	b.n	8006568 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2b0f      	cmp	r3, #15
 800654e:	d80a      	bhi.n	8006566 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006550:	2200      	movs	r2, #0
 8006552:	6879      	ldr	r1, [r7, #4]
 8006554:	f04f 30ff 	mov.w	r0, #4294967295
 8006558:	f000 f953 	bl	8006802 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800655c:	4a06      	ldr	r2, [pc, #24]	; (8006578 <HAL_InitTick+0x5c>)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006562:	2300      	movs	r3, #0
 8006564:	e000      	b.n	8006568 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006566:	2301      	movs	r3, #1
}
 8006568:	4618      	mov	r0, r3
 800656a:	3708      	adds	r7, #8
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}
 8006570:	20000010 	.word	0x20000010
 8006574:	2000001c 	.word	0x2000001c
 8006578:	20000018 	.word	0x20000018

0800657c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800657c:	b480      	push	{r7}
 800657e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006580:	4b06      	ldr	r3, [pc, #24]	; (800659c <HAL_IncTick+0x20>)
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	461a      	mov	r2, r3
 8006586:	4b06      	ldr	r3, [pc, #24]	; (80065a0 <HAL_IncTick+0x24>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4413      	add	r3, r2
 800658c:	4a04      	ldr	r2, [pc, #16]	; (80065a0 <HAL_IncTick+0x24>)
 800658e:	6013      	str	r3, [r2, #0]
}
 8006590:	bf00      	nop
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop
 800659c:	2000001c 	.word	0x2000001c
 80065a0:	20000578 	.word	0x20000578

080065a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80065a4:	b480      	push	{r7}
 80065a6:	af00      	add	r7, sp, #0
  return uwTick;
 80065a8:	4b03      	ldr	r3, [pc, #12]	; (80065b8 <HAL_GetTick+0x14>)
 80065aa:	681b      	ldr	r3, [r3, #0]
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr
 80065b6:	bf00      	nop
 80065b8:	20000578 	.word	0x20000578

080065bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80065c4:	f7ff ffee 	bl	80065a4 <HAL_GetTick>
 80065c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065d4:	d005      	beq.n	80065e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80065d6:	4b0a      	ldr	r3, [pc, #40]	; (8006600 <HAL_Delay+0x44>)
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	461a      	mov	r2, r3
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	4413      	add	r3, r2
 80065e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80065e2:	bf00      	nop
 80065e4:	f7ff ffde 	bl	80065a4 <HAL_GetTick>
 80065e8:	4602      	mov	r2, r0
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	1ad3      	subs	r3, r2, r3
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d8f7      	bhi.n	80065e4 <HAL_Delay+0x28>
  {
  }
}
 80065f4:	bf00      	nop
 80065f6:	bf00      	nop
 80065f8:	3710      	adds	r7, #16
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	2000001c 	.word	0x2000001c

08006604 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006604:	b480      	push	{r7}
 8006606:	b085      	sub	sp, #20
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f003 0307 	and.w	r3, r3, #7
 8006612:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006614:	4b0c      	ldr	r3, [pc, #48]	; (8006648 <__NVIC_SetPriorityGrouping+0x44>)
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800661a:	68ba      	ldr	r2, [r7, #8]
 800661c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006620:	4013      	ands	r3, r2
 8006622:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800662c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006634:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006636:	4a04      	ldr	r2, [pc, #16]	; (8006648 <__NVIC_SetPriorityGrouping+0x44>)
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	60d3      	str	r3, [r2, #12]
}
 800663c:	bf00      	nop
 800663e:	3714      	adds	r7, #20
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr
 8006648:	e000ed00 	.word	0xe000ed00

0800664c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800664c:	b480      	push	{r7}
 800664e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006650:	4b04      	ldr	r3, [pc, #16]	; (8006664 <__NVIC_GetPriorityGrouping+0x18>)
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	0a1b      	lsrs	r3, r3, #8
 8006656:	f003 0307 	and.w	r3, r3, #7
}
 800665a:	4618      	mov	r0, r3
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr
 8006664:	e000ed00 	.word	0xe000ed00

08006668 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	4603      	mov	r3, r0
 8006670:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006676:	2b00      	cmp	r3, #0
 8006678:	db0b      	blt.n	8006692 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800667a:	79fb      	ldrb	r3, [r7, #7]
 800667c:	f003 021f 	and.w	r2, r3, #31
 8006680:	4907      	ldr	r1, [pc, #28]	; (80066a0 <__NVIC_EnableIRQ+0x38>)
 8006682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006686:	095b      	lsrs	r3, r3, #5
 8006688:	2001      	movs	r0, #1
 800668a:	fa00 f202 	lsl.w	r2, r0, r2
 800668e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006692:	bf00      	nop
 8006694:	370c      	adds	r7, #12
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr
 800669e:	bf00      	nop
 80066a0:	e000e100 	.word	0xe000e100

080066a4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	4603      	mov	r3, r0
 80066ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	db12      	blt.n	80066dc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80066b6:	79fb      	ldrb	r3, [r7, #7]
 80066b8:	f003 021f 	and.w	r2, r3, #31
 80066bc:	490a      	ldr	r1, [pc, #40]	; (80066e8 <__NVIC_DisableIRQ+0x44>)
 80066be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066c2:	095b      	lsrs	r3, r3, #5
 80066c4:	2001      	movs	r0, #1
 80066c6:	fa00 f202 	lsl.w	r2, r0, r2
 80066ca:	3320      	adds	r3, #32
 80066cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80066d0:	f3bf 8f4f 	dsb	sy
}
 80066d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80066d6:	f3bf 8f6f 	isb	sy
}
 80066da:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80066dc:	bf00      	nop
 80066de:	370c      	adds	r7, #12
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr
 80066e8:	e000e100 	.word	0xe000e100

080066ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	4603      	mov	r3, r0
 80066f4:	6039      	str	r1, [r7, #0]
 80066f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	db0a      	blt.n	8006716 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	b2da      	uxtb	r2, r3
 8006704:	490c      	ldr	r1, [pc, #48]	; (8006738 <__NVIC_SetPriority+0x4c>)
 8006706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800670a:	0112      	lsls	r2, r2, #4
 800670c:	b2d2      	uxtb	r2, r2
 800670e:	440b      	add	r3, r1
 8006710:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006714:	e00a      	b.n	800672c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	b2da      	uxtb	r2, r3
 800671a:	4908      	ldr	r1, [pc, #32]	; (800673c <__NVIC_SetPriority+0x50>)
 800671c:	79fb      	ldrb	r3, [r7, #7]
 800671e:	f003 030f 	and.w	r3, r3, #15
 8006722:	3b04      	subs	r3, #4
 8006724:	0112      	lsls	r2, r2, #4
 8006726:	b2d2      	uxtb	r2, r2
 8006728:	440b      	add	r3, r1
 800672a:	761a      	strb	r2, [r3, #24]
}
 800672c:	bf00      	nop
 800672e:	370c      	adds	r7, #12
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr
 8006738:	e000e100 	.word	0xe000e100
 800673c:	e000ed00 	.word	0xe000ed00

08006740 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006740:	b480      	push	{r7}
 8006742:	b089      	sub	sp, #36	; 0x24
 8006744:	af00      	add	r7, sp, #0
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f003 0307 	and.w	r3, r3, #7
 8006752:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	f1c3 0307 	rsb	r3, r3, #7
 800675a:	2b04      	cmp	r3, #4
 800675c:	bf28      	it	cs
 800675e:	2304      	movcs	r3, #4
 8006760:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	3304      	adds	r3, #4
 8006766:	2b06      	cmp	r3, #6
 8006768:	d902      	bls.n	8006770 <NVIC_EncodePriority+0x30>
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	3b03      	subs	r3, #3
 800676e:	e000      	b.n	8006772 <NVIC_EncodePriority+0x32>
 8006770:	2300      	movs	r3, #0
 8006772:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006774:	f04f 32ff 	mov.w	r2, #4294967295
 8006778:	69bb      	ldr	r3, [r7, #24]
 800677a:	fa02 f303 	lsl.w	r3, r2, r3
 800677e:	43da      	mvns	r2, r3
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	401a      	ands	r2, r3
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006788:	f04f 31ff 	mov.w	r1, #4294967295
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	fa01 f303 	lsl.w	r3, r1, r3
 8006792:	43d9      	mvns	r1, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006798:	4313      	orrs	r3, r2
         );
}
 800679a:	4618      	mov	r0, r3
 800679c:	3724      	adds	r7, #36	; 0x24
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr
	...

080067a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	3b01      	subs	r3, #1
 80067b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80067b8:	d301      	bcc.n	80067be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80067ba:	2301      	movs	r3, #1
 80067bc:	e00f      	b.n	80067de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80067be:	4a0a      	ldr	r2, [pc, #40]	; (80067e8 <SysTick_Config+0x40>)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	3b01      	subs	r3, #1
 80067c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80067c6:	210f      	movs	r1, #15
 80067c8:	f04f 30ff 	mov.w	r0, #4294967295
 80067cc:	f7ff ff8e 	bl	80066ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80067d0:	4b05      	ldr	r3, [pc, #20]	; (80067e8 <SysTick_Config+0x40>)
 80067d2:	2200      	movs	r2, #0
 80067d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80067d6:	4b04      	ldr	r3, [pc, #16]	; (80067e8 <SysTick_Config+0x40>)
 80067d8:	2207      	movs	r2, #7
 80067da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3708      	adds	r7, #8
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	e000e010 	.word	0xe000e010

080067ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b082      	sub	sp, #8
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f7ff ff05 	bl	8006604 <__NVIC_SetPriorityGrouping>
}
 80067fa:	bf00      	nop
 80067fc:	3708      	adds	r7, #8
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}

08006802 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006802:	b580      	push	{r7, lr}
 8006804:	b086      	sub	sp, #24
 8006806:	af00      	add	r7, sp, #0
 8006808:	4603      	mov	r3, r0
 800680a:	60b9      	str	r1, [r7, #8]
 800680c:	607a      	str	r2, [r7, #4]
 800680e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006810:	2300      	movs	r3, #0
 8006812:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006814:	f7ff ff1a 	bl	800664c <__NVIC_GetPriorityGrouping>
 8006818:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	68b9      	ldr	r1, [r7, #8]
 800681e:	6978      	ldr	r0, [r7, #20]
 8006820:	f7ff ff8e 	bl	8006740 <NVIC_EncodePriority>
 8006824:	4602      	mov	r2, r0
 8006826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800682a:	4611      	mov	r1, r2
 800682c:	4618      	mov	r0, r3
 800682e:	f7ff ff5d 	bl	80066ec <__NVIC_SetPriority>
}
 8006832:	bf00      	nop
 8006834:	3718      	adds	r7, #24
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}

0800683a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800683a:	b580      	push	{r7, lr}
 800683c:	b082      	sub	sp, #8
 800683e:	af00      	add	r7, sp, #0
 8006840:	4603      	mov	r3, r0
 8006842:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006848:	4618      	mov	r0, r3
 800684a:	f7ff ff0d 	bl	8006668 <__NVIC_EnableIRQ>
}
 800684e:	bf00      	nop
 8006850:	3708      	adds	r7, #8
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}

08006856 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006856:	b580      	push	{r7, lr}
 8006858:	b082      	sub	sp, #8
 800685a:	af00      	add	r7, sp, #0
 800685c:	4603      	mov	r3, r0
 800685e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006864:	4618      	mov	r0, r3
 8006866:	f7ff ff1d 	bl	80066a4 <__NVIC_DisableIRQ>
}
 800686a:	bf00      	nop
 800686c:	3708      	adds	r7, #8
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}

08006872 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006872:	b580      	push	{r7, lr}
 8006874:	b082      	sub	sp, #8
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f7ff ff94 	bl	80067a8 <SysTick_Config>
 8006880:	4603      	mov	r3, r0
}
 8006882:	4618      	mov	r0, r3
 8006884:	3708      	adds	r7, #8
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}

0800688a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800688a:	b580      	push	{r7, lr}
 800688c:	b084      	sub	sp, #16
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006896:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006898:	f7ff fe84 	bl	80065a4 <HAL_GetTick>
 800689c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	2b02      	cmp	r3, #2
 80068a8:	d008      	beq.n	80068bc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2280      	movs	r2, #128	; 0x80
 80068ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	e052      	b.n	8006962 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f022 0216 	bic.w	r2, r2, #22
 80068ca:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	695a      	ldr	r2, [r3, #20]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068da:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d103      	bne.n	80068ec <HAL_DMA_Abort+0x62>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d007      	beq.n	80068fc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f022 0208 	bic.w	r2, r2, #8
 80068fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f022 0201 	bic.w	r2, r2, #1
 800690a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800690c:	e013      	b.n	8006936 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800690e:	f7ff fe49 	bl	80065a4 <HAL_GetTick>
 8006912:	4602      	mov	r2, r0
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	1ad3      	subs	r3, r2, r3
 8006918:	2b05      	cmp	r3, #5
 800691a:	d90c      	bls.n	8006936 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2220      	movs	r2, #32
 8006920:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2203      	movs	r2, #3
 8006926:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006932:	2303      	movs	r3, #3
 8006934:	e015      	b.n	8006962 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 0301 	and.w	r3, r3, #1
 8006940:	2b00      	cmp	r3, #0
 8006942:	d1e4      	bne.n	800690e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006948:	223f      	movs	r2, #63	; 0x3f
 800694a:	409a      	lsls	r2, r3
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2201      	movs	r2, #1
 8006954:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006960:	2300      	movs	r3, #0
}
 8006962:	4618      	mov	r0, r3
 8006964:	3710      	adds	r7, #16
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}

0800696a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800696a:	b480      	push	{r7}
 800696c:	b083      	sub	sp, #12
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006978:	b2db      	uxtb	r3, r3
 800697a:	2b02      	cmp	r3, #2
 800697c:	d004      	beq.n	8006988 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2280      	movs	r2, #128	; 0x80
 8006982:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006984:	2301      	movs	r3, #1
 8006986:	e00c      	b.n	80069a2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2205      	movs	r2, #5
 800698c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f022 0201 	bic.w	r2, r2, #1
 800699e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80069a0:	2300      	movs	r3, #0
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	370c      	adds	r7, #12
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr
	...

080069b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b089      	sub	sp, #36	; 0x24
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80069ba:	2300      	movs	r3, #0
 80069bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80069be:	2300      	movs	r3, #0
 80069c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80069c2:	2300      	movs	r3, #0
 80069c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80069c6:	2300      	movs	r3, #0
 80069c8:	61fb      	str	r3, [r7, #28]
 80069ca:	e159      	b.n	8006c80 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80069cc:	2201      	movs	r2, #1
 80069ce:	69fb      	ldr	r3, [r7, #28]
 80069d0:	fa02 f303 	lsl.w	r3, r2, r3
 80069d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	697a      	ldr	r2, [r7, #20]
 80069dc:	4013      	ands	r3, r2
 80069de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80069e0:	693a      	ldr	r2, [r7, #16]
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	429a      	cmp	r2, r3
 80069e6:	f040 8148 	bne.w	8006c7a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	f003 0303 	and.w	r3, r3, #3
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d005      	beq.n	8006a02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80069fe:	2b02      	cmp	r3, #2
 8006a00:	d130      	bne.n	8006a64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006a08:	69fb      	ldr	r3, [r7, #28]
 8006a0a:	005b      	lsls	r3, r3, #1
 8006a0c:	2203      	movs	r2, #3
 8006a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a12:	43db      	mvns	r3, r3
 8006a14:	69ba      	ldr	r2, [r7, #24]
 8006a16:	4013      	ands	r3, r2
 8006a18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	68da      	ldr	r2, [r3, #12]
 8006a1e:	69fb      	ldr	r3, [r7, #28]
 8006a20:	005b      	lsls	r3, r3, #1
 8006a22:	fa02 f303 	lsl.w	r3, r2, r3
 8006a26:	69ba      	ldr	r2, [r7, #24]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	69ba      	ldr	r2, [r7, #24]
 8006a30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006a38:	2201      	movs	r2, #1
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a40:	43db      	mvns	r3, r3
 8006a42:	69ba      	ldr	r2, [r7, #24]
 8006a44:	4013      	ands	r3, r2
 8006a46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	091b      	lsrs	r3, r3, #4
 8006a4e:	f003 0201 	and.w	r2, r3, #1
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	fa02 f303 	lsl.w	r3, r2, r3
 8006a58:	69ba      	ldr	r2, [r7, #24]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	69ba      	ldr	r2, [r7, #24]
 8006a62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	f003 0303 	and.w	r3, r3, #3
 8006a6c:	2b03      	cmp	r3, #3
 8006a6e:	d017      	beq.n	8006aa0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	005b      	lsls	r3, r3, #1
 8006a7a:	2203      	movs	r2, #3
 8006a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a80:	43db      	mvns	r3, r3
 8006a82:	69ba      	ldr	r2, [r7, #24]
 8006a84:	4013      	ands	r3, r2
 8006a86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	689a      	ldr	r2, [r3, #8]
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	005b      	lsls	r3, r3, #1
 8006a90:	fa02 f303 	lsl.w	r3, r2, r3
 8006a94:	69ba      	ldr	r2, [r7, #24]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	69ba      	ldr	r2, [r7, #24]
 8006a9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	f003 0303 	and.w	r3, r3, #3
 8006aa8:	2b02      	cmp	r3, #2
 8006aaa:	d123      	bne.n	8006af4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	08da      	lsrs	r2, r3, #3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	3208      	adds	r2, #8
 8006ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006aba:	69fb      	ldr	r3, [r7, #28]
 8006abc:	f003 0307 	and.w	r3, r3, #7
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	220f      	movs	r2, #15
 8006ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ac8:	43db      	mvns	r3, r3
 8006aca:	69ba      	ldr	r2, [r7, #24]
 8006acc:	4013      	ands	r3, r2
 8006ace:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	691a      	ldr	r2, [r3, #16]
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	f003 0307 	and.w	r3, r3, #7
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ae0:	69ba      	ldr	r2, [r7, #24]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006ae6:	69fb      	ldr	r3, [r7, #28]
 8006ae8:	08da      	lsrs	r2, r3, #3
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	3208      	adds	r2, #8
 8006aee:	69b9      	ldr	r1, [r7, #24]
 8006af0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	005b      	lsls	r3, r3, #1
 8006afe:	2203      	movs	r2, #3
 8006b00:	fa02 f303 	lsl.w	r3, r2, r3
 8006b04:	43db      	mvns	r3, r3
 8006b06:	69ba      	ldr	r2, [r7, #24]
 8006b08:	4013      	ands	r3, r2
 8006b0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	f003 0203 	and.w	r2, r3, #3
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	005b      	lsls	r3, r3, #1
 8006b18:	fa02 f303 	lsl.w	r3, r2, r3
 8006b1c:	69ba      	ldr	r2, [r7, #24]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	69ba      	ldr	r2, [r7, #24]
 8006b26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	f000 80a2 	beq.w	8006c7a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b36:	2300      	movs	r3, #0
 8006b38:	60fb      	str	r3, [r7, #12]
 8006b3a:	4b57      	ldr	r3, [pc, #348]	; (8006c98 <HAL_GPIO_Init+0x2e8>)
 8006b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b3e:	4a56      	ldr	r2, [pc, #344]	; (8006c98 <HAL_GPIO_Init+0x2e8>)
 8006b40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b44:	6453      	str	r3, [r2, #68]	; 0x44
 8006b46:	4b54      	ldr	r3, [pc, #336]	; (8006c98 <HAL_GPIO_Init+0x2e8>)
 8006b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b4e:	60fb      	str	r3, [r7, #12]
 8006b50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006b52:	4a52      	ldr	r2, [pc, #328]	; (8006c9c <HAL_GPIO_Init+0x2ec>)
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	089b      	lsrs	r3, r3, #2
 8006b58:	3302      	adds	r3, #2
 8006b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	f003 0303 	and.w	r3, r3, #3
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	220f      	movs	r2, #15
 8006b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b6e:	43db      	mvns	r3, r3
 8006b70:	69ba      	ldr	r2, [r7, #24]
 8006b72:	4013      	ands	r3, r2
 8006b74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a49      	ldr	r2, [pc, #292]	; (8006ca0 <HAL_GPIO_Init+0x2f0>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d019      	beq.n	8006bb2 <HAL_GPIO_Init+0x202>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	4a48      	ldr	r2, [pc, #288]	; (8006ca4 <HAL_GPIO_Init+0x2f4>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d013      	beq.n	8006bae <HAL_GPIO_Init+0x1fe>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	4a47      	ldr	r2, [pc, #284]	; (8006ca8 <HAL_GPIO_Init+0x2f8>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d00d      	beq.n	8006baa <HAL_GPIO_Init+0x1fa>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a46      	ldr	r2, [pc, #280]	; (8006cac <HAL_GPIO_Init+0x2fc>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d007      	beq.n	8006ba6 <HAL_GPIO_Init+0x1f6>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	4a45      	ldr	r2, [pc, #276]	; (8006cb0 <HAL_GPIO_Init+0x300>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d101      	bne.n	8006ba2 <HAL_GPIO_Init+0x1f2>
 8006b9e:	2304      	movs	r3, #4
 8006ba0:	e008      	b.n	8006bb4 <HAL_GPIO_Init+0x204>
 8006ba2:	2307      	movs	r3, #7
 8006ba4:	e006      	b.n	8006bb4 <HAL_GPIO_Init+0x204>
 8006ba6:	2303      	movs	r3, #3
 8006ba8:	e004      	b.n	8006bb4 <HAL_GPIO_Init+0x204>
 8006baa:	2302      	movs	r3, #2
 8006bac:	e002      	b.n	8006bb4 <HAL_GPIO_Init+0x204>
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e000      	b.n	8006bb4 <HAL_GPIO_Init+0x204>
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	69fa      	ldr	r2, [r7, #28]
 8006bb6:	f002 0203 	and.w	r2, r2, #3
 8006bba:	0092      	lsls	r2, r2, #2
 8006bbc:	4093      	lsls	r3, r2
 8006bbe:	69ba      	ldr	r2, [r7, #24]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006bc4:	4935      	ldr	r1, [pc, #212]	; (8006c9c <HAL_GPIO_Init+0x2ec>)
 8006bc6:	69fb      	ldr	r3, [r7, #28]
 8006bc8:	089b      	lsrs	r3, r3, #2
 8006bca:	3302      	adds	r3, #2
 8006bcc:	69ba      	ldr	r2, [r7, #24]
 8006bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006bd2:	4b38      	ldr	r3, [pc, #224]	; (8006cb4 <HAL_GPIO_Init+0x304>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	43db      	mvns	r3, r3
 8006bdc:	69ba      	ldr	r2, [r7, #24]
 8006bde:	4013      	ands	r3, r2
 8006be0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d003      	beq.n	8006bf6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006bee:	69ba      	ldr	r2, [r7, #24]
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006bf6:	4a2f      	ldr	r2, [pc, #188]	; (8006cb4 <HAL_GPIO_Init+0x304>)
 8006bf8:	69bb      	ldr	r3, [r7, #24]
 8006bfa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006bfc:	4b2d      	ldr	r3, [pc, #180]	; (8006cb4 <HAL_GPIO_Init+0x304>)
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	43db      	mvns	r3, r3
 8006c06:	69ba      	ldr	r2, [r7, #24]
 8006c08:	4013      	ands	r3, r2
 8006c0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d003      	beq.n	8006c20 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006c18:	69ba      	ldr	r2, [r7, #24]
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006c20:	4a24      	ldr	r2, [pc, #144]	; (8006cb4 <HAL_GPIO_Init+0x304>)
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006c26:	4b23      	ldr	r3, [pc, #140]	; (8006cb4 <HAL_GPIO_Init+0x304>)
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	43db      	mvns	r3, r3
 8006c30:	69ba      	ldr	r2, [r7, #24]
 8006c32:	4013      	ands	r3, r2
 8006c34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d003      	beq.n	8006c4a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006c42:	69ba      	ldr	r2, [r7, #24]
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006c4a:	4a1a      	ldr	r2, [pc, #104]	; (8006cb4 <HAL_GPIO_Init+0x304>)
 8006c4c:	69bb      	ldr	r3, [r7, #24]
 8006c4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006c50:	4b18      	ldr	r3, [pc, #96]	; (8006cb4 <HAL_GPIO_Init+0x304>)
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	43db      	mvns	r3, r3
 8006c5a:	69ba      	ldr	r2, [r7, #24]
 8006c5c:	4013      	ands	r3, r2
 8006c5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d003      	beq.n	8006c74 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006c6c:	69ba      	ldr	r2, [r7, #24]
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	4313      	orrs	r3, r2
 8006c72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006c74:	4a0f      	ldr	r2, [pc, #60]	; (8006cb4 <HAL_GPIO_Init+0x304>)
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	61fb      	str	r3, [r7, #28]
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	2b0f      	cmp	r3, #15
 8006c84:	f67f aea2 	bls.w	80069cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006c88:	bf00      	nop
 8006c8a:	bf00      	nop
 8006c8c:	3724      	adds	r7, #36	; 0x24
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr
 8006c96:	bf00      	nop
 8006c98:	40023800 	.word	0x40023800
 8006c9c:	40013800 	.word	0x40013800
 8006ca0:	40020000 	.word	0x40020000
 8006ca4:	40020400 	.word	0x40020400
 8006ca8:	40020800 	.word	0x40020800
 8006cac:	40020c00 	.word	0x40020c00
 8006cb0:	40021000 	.word	0x40021000
 8006cb4:	40013c00 	.word	0x40013c00

08006cb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b083      	sub	sp, #12
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	460b      	mov	r3, r1
 8006cc2:	807b      	strh	r3, [r7, #2]
 8006cc4:	4613      	mov	r3, r2
 8006cc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006cc8:	787b      	ldrb	r3, [r7, #1]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d003      	beq.n	8006cd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006cce:	887a      	ldrh	r2, [r7, #2]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006cd4:	e003      	b.n	8006cde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006cd6:	887b      	ldrh	r3, [r7, #2]
 8006cd8:	041a      	lsls	r2, r3, #16
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	619a      	str	r2, [r3, #24]
}
 8006cde:	bf00      	nop
 8006ce0:	370c      	adds	r7, #12
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr
	...

08006cec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b086      	sub	sp, #24
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d101      	bne.n	8006cfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e264      	b.n	80071c8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f003 0301 	and.w	r3, r3, #1
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d075      	beq.n	8006df6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006d0a:	4ba3      	ldr	r3, [pc, #652]	; (8006f98 <HAL_RCC_OscConfig+0x2ac>)
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	f003 030c 	and.w	r3, r3, #12
 8006d12:	2b04      	cmp	r3, #4
 8006d14:	d00c      	beq.n	8006d30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d16:	4ba0      	ldr	r3, [pc, #640]	; (8006f98 <HAL_RCC_OscConfig+0x2ac>)
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006d1e:	2b08      	cmp	r3, #8
 8006d20:	d112      	bne.n	8006d48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d22:	4b9d      	ldr	r3, [pc, #628]	; (8006f98 <HAL_RCC_OscConfig+0x2ac>)
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d2e:	d10b      	bne.n	8006d48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d30:	4b99      	ldr	r3, [pc, #612]	; (8006f98 <HAL_RCC_OscConfig+0x2ac>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d05b      	beq.n	8006df4 <HAL_RCC_OscConfig+0x108>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d157      	bne.n	8006df4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	e23f      	b.n	80071c8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d50:	d106      	bne.n	8006d60 <HAL_RCC_OscConfig+0x74>
 8006d52:	4b91      	ldr	r3, [pc, #580]	; (8006f98 <HAL_RCC_OscConfig+0x2ac>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a90      	ldr	r2, [pc, #576]	; (8006f98 <HAL_RCC_OscConfig+0x2ac>)
 8006d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d5c:	6013      	str	r3, [r2, #0]
 8006d5e:	e01d      	b.n	8006d9c <HAL_RCC_OscConfig+0xb0>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d68:	d10c      	bne.n	8006d84 <HAL_RCC_OscConfig+0x98>
 8006d6a:	4b8b      	ldr	r3, [pc, #556]	; (8006f98 <HAL_RCC_OscConfig+0x2ac>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a8a      	ldr	r2, [pc, #552]	; (8006f98 <HAL_RCC_OscConfig+0x2ac>)
 8006d70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d74:	6013      	str	r3, [r2, #0]
 8006d76:	4b88      	ldr	r3, [pc, #544]	; (8006f98 <HAL_RCC_OscConfig+0x2ac>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a87      	ldr	r2, [pc, #540]	; (8006f98 <HAL_RCC_OscConfig+0x2ac>)
 8006d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d80:	6013      	str	r3, [r2, #0]
 8006d82:	e00b      	b.n	8006d9c <HAL_RCC_OscConfig+0xb0>
 8006d84:	4b84      	ldr	r3, [pc, #528]	; (8006f98 <HAL_RCC_OscConfig+0x2ac>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a83      	ldr	r2, [pc, #524]	; (8006f98 <HAL_RCC_OscConfig+0x2ac>)
 8006d8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d8e:	6013      	str	r3, [r2, #0]
 8006d90:	4b81      	ldr	r3, [pc, #516]	; (8006f98 <HAL_RCC_OscConfig+0x2ac>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a80      	ldr	r2, [pc, #512]	; (8006f98 <HAL_RCC_OscConfig+0x2ac>)
 8006d96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d013      	beq.n	8006dcc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006da4:	f7ff fbfe 	bl	80065a4 <HAL_GetTick>
 8006da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006daa:	e008      	b.n	8006dbe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006dac:	f7ff fbfa 	bl	80065a4 <HAL_GetTick>
 8006db0:	4602      	mov	r2, r0
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	1ad3      	subs	r3, r2, r3
 8006db6:	2b64      	cmp	r3, #100	; 0x64
 8006db8:	d901      	bls.n	8006dbe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006dba:	2303      	movs	r3, #3
 8006dbc:	e204      	b.n	80071c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006dbe:	4b76      	ldr	r3, [pc, #472]	; (8006f98 <HAL_RCC_OscConfig+0x2ac>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d0f0      	beq.n	8006dac <HAL_RCC_OscConfig+0xc0>
 8006dca:	e014      	b.n	8006df6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dcc:	f7ff fbea 	bl	80065a4 <HAL_GetTick>
 8006dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006dd2:	e008      	b.n	8006de6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006dd4:	f7ff fbe6 	bl	80065a4 <HAL_GetTick>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	1ad3      	subs	r3, r2, r3
 8006dde:	2b64      	cmp	r3, #100	; 0x64
 8006de0:	d901      	bls.n	8006de6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006de2:	2303      	movs	r3, #3
 8006de4:	e1f0      	b.n	80071c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006de6:	4b6c      	ldr	r3, [pc, #432]	; (8006f98 <HAL_RCC_OscConfig+0x2ac>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d1f0      	bne.n	8006dd4 <HAL_RCC_OscConfig+0xe8>
 8006df2:	e000      	b.n	8006df6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006df4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f003 0302 	and.w	r3, r3, #2
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d063      	beq.n	8006eca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006e02:	4b65      	ldr	r3, [pc, #404]	; (8006f98 <HAL_RCC_OscConfig+0x2ac>)
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	f003 030c 	and.w	r3, r3, #12
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d00b      	beq.n	8006e26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e0e:	4b62      	ldr	r3, [pc, #392]	; (8006f98 <HAL_RCC_OscConfig+0x2ac>)
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006e16:	2b08      	cmp	r3, #8
 8006e18:	d11c      	bne.n	8006e54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e1a:	4b5f      	ldr	r3, [pc, #380]	; (8006f98 <HAL_RCC_OscConfig+0x2ac>)
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d116      	bne.n	8006e54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e26:	4b5c      	ldr	r3, [pc, #368]	; (8006f98 <HAL_RCC_OscConfig+0x2ac>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f003 0302 	and.w	r3, r3, #2
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d005      	beq.n	8006e3e <HAL_RCC_OscConfig+0x152>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d001      	beq.n	8006e3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e1c4      	b.n	80071c8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e3e:	4b56      	ldr	r3, [pc, #344]	; (8006f98 <HAL_RCC_OscConfig+0x2ac>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	691b      	ldr	r3, [r3, #16]
 8006e4a:	00db      	lsls	r3, r3, #3
 8006e4c:	4952      	ldr	r1, [pc, #328]	; (8006f98 <HAL_RCC_OscConfig+0x2ac>)
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e52:	e03a      	b.n	8006eca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d020      	beq.n	8006e9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e5c:	4b4f      	ldr	r3, [pc, #316]	; (8006f9c <HAL_RCC_OscConfig+0x2b0>)
 8006e5e:	2201      	movs	r2, #1
 8006e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e62:	f7ff fb9f 	bl	80065a4 <HAL_GetTick>
 8006e66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e68:	e008      	b.n	8006e7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e6a:	f7ff fb9b 	bl	80065a4 <HAL_GetTick>
 8006e6e:	4602      	mov	r2, r0
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	1ad3      	subs	r3, r2, r3
 8006e74:	2b02      	cmp	r3, #2
 8006e76:	d901      	bls.n	8006e7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006e78:	2303      	movs	r3, #3
 8006e7a:	e1a5      	b.n	80071c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e7c:	4b46      	ldr	r3, [pc, #280]	; (8006f98 <HAL_RCC_OscConfig+0x2ac>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f003 0302 	and.w	r3, r3, #2
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d0f0      	beq.n	8006e6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e88:	4b43      	ldr	r3, [pc, #268]	; (8006f98 <HAL_RCC_OscConfig+0x2ac>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	691b      	ldr	r3, [r3, #16]
 8006e94:	00db      	lsls	r3, r3, #3
 8006e96:	4940      	ldr	r1, [pc, #256]	; (8006f98 <HAL_RCC_OscConfig+0x2ac>)
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	600b      	str	r3, [r1, #0]
 8006e9c:	e015      	b.n	8006eca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e9e:	4b3f      	ldr	r3, [pc, #252]	; (8006f9c <HAL_RCC_OscConfig+0x2b0>)
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ea4:	f7ff fb7e 	bl	80065a4 <HAL_GetTick>
 8006ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006eaa:	e008      	b.n	8006ebe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006eac:	f7ff fb7a 	bl	80065a4 <HAL_GetTick>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	1ad3      	subs	r3, r2, r3
 8006eb6:	2b02      	cmp	r3, #2
 8006eb8:	d901      	bls.n	8006ebe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006eba:	2303      	movs	r3, #3
 8006ebc:	e184      	b.n	80071c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ebe:	4b36      	ldr	r3, [pc, #216]	; (8006f98 <HAL_RCC_OscConfig+0x2ac>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f003 0302 	and.w	r3, r3, #2
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d1f0      	bne.n	8006eac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f003 0308 	and.w	r3, r3, #8
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d030      	beq.n	8006f38 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	695b      	ldr	r3, [r3, #20]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d016      	beq.n	8006f0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ede:	4b30      	ldr	r3, [pc, #192]	; (8006fa0 <HAL_RCC_OscConfig+0x2b4>)
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ee4:	f7ff fb5e 	bl	80065a4 <HAL_GetTick>
 8006ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006eea:	e008      	b.n	8006efe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006eec:	f7ff fb5a 	bl	80065a4 <HAL_GetTick>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	1ad3      	subs	r3, r2, r3
 8006ef6:	2b02      	cmp	r3, #2
 8006ef8:	d901      	bls.n	8006efe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006efa:	2303      	movs	r3, #3
 8006efc:	e164      	b.n	80071c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006efe:	4b26      	ldr	r3, [pc, #152]	; (8006f98 <HAL_RCC_OscConfig+0x2ac>)
 8006f00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f02:	f003 0302 	and.w	r3, r3, #2
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d0f0      	beq.n	8006eec <HAL_RCC_OscConfig+0x200>
 8006f0a:	e015      	b.n	8006f38 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f0c:	4b24      	ldr	r3, [pc, #144]	; (8006fa0 <HAL_RCC_OscConfig+0x2b4>)
 8006f0e:	2200      	movs	r2, #0
 8006f10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f12:	f7ff fb47 	bl	80065a4 <HAL_GetTick>
 8006f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f18:	e008      	b.n	8006f2c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f1a:	f7ff fb43 	bl	80065a4 <HAL_GetTick>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	1ad3      	subs	r3, r2, r3
 8006f24:	2b02      	cmp	r3, #2
 8006f26:	d901      	bls.n	8006f2c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006f28:	2303      	movs	r3, #3
 8006f2a:	e14d      	b.n	80071c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f2c:	4b1a      	ldr	r3, [pc, #104]	; (8006f98 <HAL_RCC_OscConfig+0x2ac>)
 8006f2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f30:	f003 0302 	and.w	r3, r3, #2
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d1f0      	bne.n	8006f1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f003 0304 	and.w	r3, r3, #4
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	f000 80a0 	beq.w	8007086 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f46:	2300      	movs	r3, #0
 8006f48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f4a:	4b13      	ldr	r3, [pc, #76]	; (8006f98 <HAL_RCC_OscConfig+0x2ac>)
 8006f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d10f      	bne.n	8006f76 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f56:	2300      	movs	r3, #0
 8006f58:	60bb      	str	r3, [r7, #8]
 8006f5a:	4b0f      	ldr	r3, [pc, #60]	; (8006f98 <HAL_RCC_OscConfig+0x2ac>)
 8006f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5e:	4a0e      	ldr	r2, [pc, #56]	; (8006f98 <HAL_RCC_OscConfig+0x2ac>)
 8006f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f64:	6413      	str	r3, [r2, #64]	; 0x40
 8006f66:	4b0c      	ldr	r3, [pc, #48]	; (8006f98 <HAL_RCC_OscConfig+0x2ac>)
 8006f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f6e:	60bb      	str	r3, [r7, #8]
 8006f70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f72:	2301      	movs	r3, #1
 8006f74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f76:	4b0b      	ldr	r3, [pc, #44]	; (8006fa4 <HAL_RCC_OscConfig+0x2b8>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d121      	bne.n	8006fc6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006f82:	4b08      	ldr	r3, [pc, #32]	; (8006fa4 <HAL_RCC_OscConfig+0x2b8>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a07      	ldr	r2, [pc, #28]	; (8006fa4 <HAL_RCC_OscConfig+0x2b8>)
 8006f88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f8e:	f7ff fb09 	bl	80065a4 <HAL_GetTick>
 8006f92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f94:	e011      	b.n	8006fba <HAL_RCC_OscConfig+0x2ce>
 8006f96:	bf00      	nop
 8006f98:	40023800 	.word	0x40023800
 8006f9c:	42470000 	.word	0x42470000
 8006fa0:	42470e80 	.word	0x42470e80
 8006fa4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fa8:	f7ff fafc 	bl	80065a4 <HAL_GetTick>
 8006fac:	4602      	mov	r2, r0
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	1ad3      	subs	r3, r2, r3
 8006fb2:	2b02      	cmp	r3, #2
 8006fb4:	d901      	bls.n	8006fba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006fb6:	2303      	movs	r3, #3
 8006fb8:	e106      	b.n	80071c8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fba:	4b85      	ldr	r3, [pc, #532]	; (80071d0 <HAL_RCC_OscConfig+0x4e4>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d0f0      	beq.n	8006fa8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	d106      	bne.n	8006fdc <HAL_RCC_OscConfig+0x2f0>
 8006fce:	4b81      	ldr	r3, [pc, #516]	; (80071d4 <HAL_RCC_OscConfig+0x4e8>)
 8006fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fd2:	4a80      	ldr	r2, [pc, #512]	; (80071d4 <HAL_RCC_OscConfig+0x4e8>)
 8006fd4:	f043 0301 	orr.w	r3, r3, #1
 8006fd8:	6713      	str	r3, [r2, #112]	; 0x70
 8006fda:	e01c      	b.n	8007016 <HAL_RCC_OscConfig+0x32a>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	2b05      	cmp	r3, #5
 8006fe2:	d10c      	bne.n	8006ffe <HAL_RCC_OscConfig+0x312>
 8006fe4:	4b7b      	ldr	r3, [pc, #492]	; (80071d4 <HAL_RCC_OscConfig+0x4e8>)
 8006fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fe8:	4a7a      	ldr	r2, [pc, #488]	; (80071d4 <HAL_RCC_OscConfig+0x4e8>)
 8006fea:	f043 0304 	orr.w	r3, r3, #4
 8006fee:	6713      	str	r3, [r2, #112]	; 0x70
 8006ff0:	4b78      	ldr	r3, [pc, #480]	; (80071d4 <HAL_RCC_OscConfig+0x4e8>)
 8006ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ff4:	4a77      	ldr	r2, [pc, #476]	; (80071d4 <HAL_RCC_OscConfig+0x4e8>)
 8006ff6:	f043 0301 	orr.w	r3, r3, #1
 8006ffa:	6713      	str	r3, [r2, #112]	; 0x70
 8006ffc:	e00b      	b.n	8007016 <HAL_RCC_OscConfig+0x32a>
 8006ffe:	4b75      	ldr	r3, [pc, #468]	; (80071d4 <HAL_RCC_OscConfig+0x4e8>)
 8007000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007002:	4a74      	ldr	r2, [pc, #464]	; (80071d4 <HAL_RCC_OscConfig+0x4e8>)
 8007004:	f023 0301 	bic.w	r3, r3, #1
 8007008:	6713      	str	r3, [r2, #112]	; 0x70
 800700a:	4b72      	ldr	r3, [pc, #456]	; (80071d4 <HAL_RCC_OscConfig+0x4e8>)
 800700c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800700e:	4a71      	ldr	r2, [pc, #452]	; (80071d4 <HAL_RCC_OscConfig+0x4e8>)
 8007010:	f023 0304 	bic.w	r3, r3, #4
 8007014:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d015      	beq.n	800704a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800701e:	f7ff fac1 	bl	80065a4 <HAL_GetTick>
 8007022:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007024:	e00a      	b.n	800703c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007026:	f7ff fabd 	bl	80065a4 <HAL_GetTick>
 800702a:	4602      	mov	r2, r0
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	1ad3      	subs	r3, r2, r3
 8007030:	f241 3288 	movw	r2, #5000	; 0x1388
 8007034:	4293      	cmp	r3, r2
 8007036:	d901      	bls.n	800703c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007038:	2303      	movs	r3, #3
 800703a:	e0c5      	b.n	80071c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800703c:	4b65      	ldr	r3, [pc, #404]	; (80071d4 <HAL_RCC_OscConfig+0x4e8>)
 800703e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007040:	f003 0302 	and.w	r3, r3, #2
 8007044:	2b00      	cmp	r3, #0
 8007046:	d0ee      	beq.n	8007026 <HAL_RCC_OscConfig+0x33a>
 8007048:	e014      	b.n	8007074 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800704a:	f7ff faab 	bl	80065a4 <HAL_GetTick>
 800704e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007050:	e00a      	b.n	8007068 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007052:	f7ff faa7 	bl	80065a4 <HAL_GetTick>
 8007056:	4602      	mov	r2, r0
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	1ad3      	subs	r3, r2, r3
 800705c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007060:	4293      	cmp	r3, r2
 8007062:	d901      	bls.n	8007068 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007064:	2303      	movs	r3, #3
 8007066:	e0af      	b.n	80071c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007068:	4b5a      	ldr	r3, [pc, #360]	; (80071d4 <HAL_RCC_OscConfig+0x4e8>)
 800706a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800706c:	f003 0302 	and.w	r3, r3, #2
 8007070:	2b00      	cmp	r3, #0
 8007072:	d1ee      	bne.n	8007052 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007074:	7dfb      	ldrb	r3, [r7, #23]
 8007076:	2b01      	cmp	r3, #1
 8007078:	d105      	bne.n	8007086 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800707a:	4b56      	ldr	r3, [pc, #344]	; (80071d4 <HAL_RCC_OscConfig+0x4e8>)
 800707c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800707e:	4a55      	ldr	r2, [pc, #340]	; (80071d4 <HAL_RCC_OscConfig+0x4e8>)
 8007080:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007084:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	699b      	ldr	r3, [r3, #24]
 800708a:	2b00      	cmp	r3, #0
 800708c:	f000 809b 	beq.w	80071c6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007090:	4b50      	ldr	r3, [pc, #320]	; (80071d4 <HAL_RCC_OscConfig+0x4e8>)
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	f003 030c 	and.w	r3, r3, #12
 8007098:	2b08      	cmp	r3, #8
 800709a:	d05c      	beq.n	8007156 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	699b      	ldr	r3, [r3, #24]
 80070a0:	2b02      	cmp	r3, #2
 80070a2:	d141      	bne.n	8007128 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070a4:	4b4c      	ldr	r3, [pc, #304]	; (80071d8 <HAL_RCC_OscConfig+0x4ec>)
 80070a6:	2200      	movs	r2, #0
 80070a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070aa:	f7ff fa7b 	bl	80065a4 <HAL_GetTick>
 80070ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070b0:	e008      	b.n	80070c4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070b2:	f7ff fa77 	bl	80065a4 <HAL_GetTick>
 80070b6:	4602      	mov	r2, r0
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	1ad3      	subs	r3, r2, r3
 80070bc:	2b02      	cmp	r3, #2
 80070be:	d901      	bls.n	80070c4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80070c0:	2303      	movs	r3, #3
 80070c2:	e081      	b.n	80071c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070c4:	4b43      	ldr	r3, [pc, #268]	; (80071d4 <HAL_RCC_OscConfig+0x4e8>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d1f0      	bne.n	80070b2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	69da      	ldr	r2, [r3, #28]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6a1b      	ldr	r3, [r3, #32]
 80070d8:	431a      	orrs	r2, r3
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070de:	019b      	lsls	r3, r3, #6
 80070e0:	431a      	orrs	r2, r3
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070e6:	085b      	lsrs	r3, r3, #1
 80070e8:	3b01      	subs	r3, #1
 80070ea:	041b      	lsls	r3, r3, #16
 80070ec:	431a      	orrs	r2, r3
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f2:	061b      	lsls	r3, r3, #24
 80070f4:	4937      	ldr	r1, [pc, #220]	; (80071d4 <HAL_RCC_OscConfig+0x4e8>)
 80070f6:	4313      	orrs	r3, r2
 80070f8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80070fa:	4b37      	ldr	r3, [pc, #220]	; (80071d8 <HAL_RCC_OscConfig+0x4ec>)
 80070fc:	2201      	movs	r2, #1
 80070fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007100:	f7ff fa50 	bl	80065a4 <HAL_GetTick>
 8007104:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007106:	e008      	b.n	800711a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007108:	f7ff fa4c 	bl	80065a4 <HAL_GetTick>
 800710c:	4602      	mov	r2, r0
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	1ad3      	subs	r3, r2, r3
 8007112:	2b02      	cmp	r3, #2
 8007114:	d901      	bls.n	800711a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007116:	2303      	movs	r3, #3
 8007118:	e056      	b.n	80071c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800711a:	4b2e      	ldr	r3, [pc, #184]	; (80071d4 <HAL_RCC_OscConfig+0x4e8>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007122:	2b00      	cmp	r3, #0
 8007124:	d0f0      	beq.n	8007108 <HAL_RCC_OscConfig+0x41c>
 8007126:	e04e      	b.n	80071c6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007128:	4b2b      	ldr	r3, [pc, #172]	; (80071d8 <HAL_RCC_OscConfig+0x4ec>)
 800712a:	2200      	movs	r2, #0
 800712c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800712e:	f7ff fa39 	bl	80065a4 <HAL_GetTick>
 8007132:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007134:	e008      	b.n	8007148 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007136:	f7ff fa35 	bl	80065a4 <HAL_GetTick>
 800713a:	4602      	mov	r2, r0
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	1ad3      	subs	r3, r2, r3
 8007140:	2b02      	cmp	r3, #2
 8007142:	d901      	bls.n	8007148 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007144:	2303      	movs	r3, #3
 8007146:	e03f      	b.n	80071c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007148:	4b22      	ldr	r3, [pc, #136]	; (80071d4 <HAL_RCC_OscConfig+0x4e8>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007150:	2b00      	cmp	r3, #0
 8007152:	d1f0      	bne.n	8007136 <HAL_RCC_OscConfig+0x44a>
 8007154:	e037      	b.n	80071c6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	699b      	ldr	r3, [r3, #24]
 800715a:	2b01      	cmp	r3, #1
 800715c:	d101      	bne.n	8007162 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	e032      	b.n	80071c8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007162:	4b1c      	ldr	r3, [pc, #112]	; (80071d4 <HAL_RCC_OscConfig+0x4e8>)
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	699b      	ldr	r3, [r3, #24]
 800716c:	2b01      	cmp	r3, #1
 800716e:	d028      	beq.n	80071c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800717a:	429a      	cmp	r2, r3
 800717c:	d121      	bne.n	80071c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007188:	429a      	cmp	r2, r3
 800718a:	d11a      	bne.n	80071c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800718c:	68fa      	ldr	r2, [r7, #12]
 800718e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007192:	4013      	ands	r3, r2
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007198:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800719a:	4293      	cmp	r3, r2
 800719c:	d111      	bne.n	80071c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071a8:	085b      	lsrs	r3, r3, #1
 80071aa:	3b01      	subs	r3, #1
 80071ac:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d107      	bne.n	80071c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071bc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80071be:	429a      	cmp	r2, r3
 80071c0:	d001      	beq.n	80071c6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	e000      	b.n	80071c8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80071c6:	2300      	movs	r3, #0
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3718      	adds	r7, #24
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}
 80071d0:	40007000 	.word	0x40007000
 80071d4:	40023800 	.word	0x40023800
 80071d8:	42470060 	.word	0x42470060

080071dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b084      	sub	sp, #16
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d101      	bne.n	80071f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80071ec:	2301      	movs	r3, #1
 80071ee:	e0cc      	b.n	800738a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80071f0:	4b68      	ldr	r3, [pc, #416]	; (8007394 <HAL_RCC_ClockConfig+0x1b8>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f003 0307 	and.w	r3, r3, #7
 80071f8:	683a      	ldr	r2, [r7, #0]
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d90c      	bls.n	8007218 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071fe:	4b65      	ldr	r3, [pc, #404]	; (8007394 <HAL_RCC_ClockConfig+0x1b8>)
 8007200:	683a      	ldr	r2, [r7, #0]
 8007202:	b2d2      	uxtb	r2, r2
 8007204:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007206:	4b63      	ldr	r3, [pc, #396]	; (8007394 <HAL_RCC_ClockConfig+0x1b8>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f003 0307 	and.w	r3, r3, #7
 800720e:	683a      	ldr	r2, [r7, #0]
 8007210:	429a      	cmp	r2, r3
 8007212:	d001      	beq.n	8007218 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007214:	2301      	movs	r3, #1
 8007216:	e0b8      	b.n	800738a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f003 0302 	and.w	r3, r3, #2
 8007220:	2b00      	cmp	r3, #0
 8007222:	d020      	beq.n	8007266 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f003 0304 	and.w	r3, r3, #4
 800722c:	2b00      	cmp	r3, #0
 800722e:	d005      	beq.n	800723c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007230:	4b59      	ldr	r3, [pc, #356]	; (8007398 <HAL_RCC_ClockConfig+0x1bc>)
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	4a58      	ldr	r2, [pc, #352]	; (8007398 <HAL_RCC_ClockConfig+0x1bc>)
 8007236:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800723a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f003 0308 	and.w	r3, r3, #8
 8007244:	2b00      	cmp	r3, #0
 8007246:	d005      	beq.n	8007254 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007248:	4b53      	ldr	r3, [pc, #332]	; (8007398 <HAL_RCC_ClockConfig+0x1bc>)
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	4a52      	ldr	r2, [pc, #328]	; (8007398 <HAL_RCC_ClockConfig+0x1bc>)
 800724e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007252:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007254:	4b50      	ldr	r3, [pc, #320]	; (8007398 <HAL_RCC_ClockConfig+0x1bc>)
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	494d      	ldr	r1, [pc, #308]	; (8007398 <HAL_RCC_ClockConfig+0x1bc>)
 8007262:	4313      	orrs	r3, r2
 8007264:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f003 0301 	and.w	r3, r3, #1
 800726e:	2b00      	cmp	r3, #0
 8007270:	d044      	beq.n	80072fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	2b01      	cmp	r3, #1
 8007278:	d107      	bne.n	800728a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800727a:	4b47      	ldr	r3, [pc, #284]	; (8007398 <HAL_RCC_ClockConfig+0x1bc>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007282:	2b00      	cmp	r3, #0
 8007284:	d119      	bne.n	80072ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007286:	2301      	movs	r3, #1
 8007288:	e07f      	b.n	800738a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	2b02      	cmp	r3, #2
 8007290:	d003      	beq.n	800729a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007296:	2b03      	cmp	r3, #3
 8007298:	d107      	bne.n	80072aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800729a:	4b3f      	ldr	r3, [pc, #252]	; (8007398 <HAL_RCC_ClockConfig+0x1bc>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d109      	bne.n	80072ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	e06f      	b.n	800738a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072aa:	4b3b      	ldr	r3, [pc, #236]	; (8007398 <HAL_RCC_ClockConfig+0x1bc>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f003 0302 	and.w	r3, r3, #2
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d101      	bne.n	80072ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
 80072b8:	e067      	b.n	800738a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80072ba:	4b37      	ldr	r3, [pc, #220]	; (8007398 <HAL_RCC_ClockConfig+0x1bc>)
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	f023 0203 	bic.w	r2, r3, #3
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	4934      	ldr	r1, [pc, #208]	; (8007398 <HAL_RCC_ClockConfig+0x1bc>)
 80072c8:	4313      	orrs	r3, r2
 80072ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80072cc:	f7ff f96a 	bl	80065a4 <HAL_GetTick>
 80072d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072d2:	e00a      	b.n	80072ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072d4:	f7ff f966 	bl	80065a4 <HAL_GetTick>
 80072d8:	4602      	mov	r2, r0
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	1ad3      	subs	r3, r2, r3
 80072de:	f241 3288 	movw	r2, #5000	; 0x1388
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d901      	bls.n	80072ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80072e6:	2303      	movs	r3, #3
 80072e8:	e04f      	b.n	800738a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072ea:	4b2b      	ldr	r3, [pc, #172]	; (8007398 <HAL_RCC_ClockConfig+0x1bc>)
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	f003 020c 	and.w	r2, r3, #12
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	009b      	lsls	r3, r3, #2
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d1eb      	bne.n	80072d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80072fc:	4b25      	ldr	r3, [pc, #148]	; (8007394 <HAL_RCC_ClockConfig+0x1b8>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f003 0307 	and.w	r3, r3, #7
 8007304:	683a      	ldr	r2, [r7, #0]
 8007306:	429a      	cmp	r2, r3
 8007308:	d20c      	bcs.n	8007324 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800730a:	4b22      	ldr	r3, [pc, #136]	; (8007394 <HAL_RCC_ClockConfig+0x1b8>)
 800730c:	683a      	ldr	r2, [r7, #0]
 800730e:	b2d2      	uxtb	r2, r2
 8007310:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007312:	4b20      	ldr	r3, [pc, #128]	; (8007394 <HAL_RCC_ClockConfig+0x1b8>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f003 0307 	and.w	r3, r3, #7
 800731a:	683a      	ldr	r2, [r7, #0]
 800731c:	429a      	cmp	r2, r3
 800731e:	d001      	beq.n	8007324 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007320:	2301      	movs	r3, #1
 8007322:	e032      	b.n	800738a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f003 0304 	and.w	r3, r3, #4
 800732c:	2b00      	cmp	r3, #0
 800732e:	d008      	beq.n	8007342 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007330:	4b19      	ldr	r3, [pc, #100]	; (8007398 <HAL_RCC_ClockConfig+0x1bc>)
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	4916      	ldr	r1, [pc, #88]	; (8007398 <HAL_RCC_ClockConfig+0x1bc>)
 800733e:	4313      	orrs	r3, r2
 8007340:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f003 0308 	and.w	r3, r3, #8
 800734a:	2b00      	cmp	r3, #0
 800734c:	d009      	beq.n	8007362 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800734e:	4b12      	ldr	r3, [pc, #72]	; (8007398 <HAL_RCC_ClockConfig+0x1bc>)
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	691b      	ldr	r3, [r3, #16]
 800735a:	00db      	lsls	r3, r3, #3
 800735c:	490e      	ldr	r1, [pc, #56]	; (8007398 <HAL_RCC_ClockConfig+0x1bc>)
 800735e:	4313      	orrs	r3, r2
 8007360:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007362:	f000 f821 	bl	80073a8 <HAL_RCC_GetSysClockFreq>
 8007366:	4602      	mov	r2, r0
 8007368:	4b0b      	ldr	r3, [pc, #44]	; (8007398 <HAL_RCC_ClockConfig+0x1bc>)
 800736a:	689b      	ldr	r3, [r3, #8]
 800736c:	091b      	lsrs	r3, r3, #4
 800736e:	f003 030f 	and.w	r3, r3, #15
 8007372:	490a      	ldr	r1, [pc, #40]	; (800739c <HAL_RCC_ClockConfig+0x1c0>)
 8007374:	5ccb      	ldrb	r3, [r1, r3]
 8007376:	fa22 f303 	lsr.w	r3, r2, r3
 800737a:	4a09      	ldr	r2, [pc, #36]	; (80073a0 <HAL_RCC_ClockConfig+0x1c4>)
 800737c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800737e:	4b09      	ldr	r3, [pc, #36]	; (80073a4 <HAL_RCC_ClockConfig+0x1c8>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4618      	mov	r0, r3
 8007384:	f7ff f8ca 	bl	800651c <HAL_InitTick>

  return HAL_OK;
 8007388:	2300      	movs	r3, #0
}
 800738a:	4618      	mov	r0, r3
 800738c:	3710      	adds	r7, #16
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
 8007392:	bf00      	nop
 8007394:	40023c00 	.word	0x40023c00
 8007398:	40023800 	.word	0x40023800
 800739c:	08012310 	.word	0x08012310
 80073a0:	20000010 	.word	0x20000010
 80073a4:	20000018 	.word	0x20000018

080073a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80073a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80073ac:	b084      	sub	sp, #16
 80073ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80073b0:	2300      	movs	r3, #0
 80073b2:	607b      	str	r3, [r7, #4]
 80073b4:	2300      	movs	r3, #0
 80073b6:	60fb      	str	r3, [r7, #12]
 80073b8:	2300      	movs	r3, #0
 80073ba:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80073bc:	2300      	movs	r3, #0
 80073be:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80073c0:	4b67      	ldr	r3, [pc, #412]	; (8007560 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	f003 030c 	and.w	r3, r3, #12
 80073c8:	2b08      	cmp	r3, #8
 80073ca:	d00d      	beq.n	80073e8 <HAL_RCC_GetSysClockFreq+0x40>
 80073cc:	2b08      	cmp	r3, #8
 80073ce:	f200 80bd 	bhi.w	800754c <HAL_RCC_GetSysClockFreq+0x1a4>
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d002      	beq.n	80073dc <HAL_RCC_GetSysClockFreq+0x34>
 80073d6:	2b04      	cmp	r3, #4
 80073d8:	d003      	beq.n	80073e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80073da:	e0b7      	b.n	800754c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80073dc:	4b61      	ldr	r3, [pc, #388]	; (8007564 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80073de:	60bb      	str	r3, [r7, #8]
       break;
 80073e0:	e0b7      	b.n	8007552 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80073e2:	4b61      	ldr	r3, [pc, #388]	; (8007568 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80073e4:	60bb      	str	r3, [r7, #8]
      break;
 80073e6:	e0b4      	b.n	8007552 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80073e8:	4b5d      	ldr	r3, [pc, #372]	; (8007560 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073f0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80073f2:	4b5b      	ldr	r3, [pc, #364]	; (8007560 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d04d      	beq.n	800749a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80073fe:	4b58      	ldr	r3, [pc, #352]	; (8007560 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	099b      	lsrs	r3, r3, #6
 8007404:	461a      	mov	r2, r3
 8007406:	f04f 0300 	mov.w	r3, #0
 800740a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800740e:	f04f 0100 	mov.w	r1, #0
 8007412:	ea02 0800 	and.w	r8, r2, r0
 8007416:	ea03 0901 	and.w	r9, r3, r1
 800741a:	4640      	mov	r0, r8
 800741c:	4649      	mov	r1, r9
 800741e:	f04f 0200 	mov.w	r2, #0
 8007422:	f04f 0300 	mov.w	r3, #0
 8007426:	014b      	lsls	r3, r1, #5
 8007428:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800742c:	0142      	lsls	r2, r0, #5
 800742e:	4610      	mov	r0, r2
 8007430:	4619      	mov	r1, r3
 8007432:	ebb0 0008 	subs.w	r0, r0, r8
 8007436:	eb61 0109 	sbc.w	r1, r1, r9
 800743a:	f04f 0200 	mov.w	r2, #0
 800743e:	f04f 0300 	mov.w	r3, #0
 8007442:	018b      	lsls	r3, r1, #6
 8007444:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007448:	0182      	lsls	r2, r0, #6
 800744a:	1a12      	subs	r2, r2, r0
 800744c:	eb63 0301 	sbc.w	r3, r3, r1
 8007450:	f04f 0000 	mov.w	r0, #0
 8007454:	f04f 0100 	mov.w	r1, #0
 8007458:	00d9      	lsls	r1, r3, #3
 800745a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800745e:	00d0      	lsls	r0, r2, #3
 8007460:	4602      	mov	r2, r0
 8007462:	460b      	mov	r3, r1
 8007464:	eb12 0208 	adds.w	r2, r2, r8
 8007468:	eb43 0309 	adc.w	r3, r3, r9
 800746c:	f04f 0000 	mov.w	r0, #0
 8007470:	f04f 0100 	mov.w	r1, #0
 8007474:	0259      	lsls	r1, r3, #9
 8007476:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800747a:	0250      	lsls	r0, r2, #9
 800747c:	4602      	mov	r2, r0
 800747e:	460b      	mov	r3, r1
 8007480:	4610      	mov	r0, r2
 8007482:	4619      	mov	r1, r3
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	461a      	mov	r2, r3
 8007488:	f04f 0300 	mov.w	r3, #0
 800748c:	f7f8 fef8 	bl	8000280 <__aeabi_uldivmod>
 8007490:	4602      	mov	r2, r0
 8007492:	460b      	mov	r3, r1
 8007494:	4613      	mov	r3, r2
 8007496:	60fb      	str	r3, [r7, #12]
 8007498:	e04a      	b.n	8007530 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800749a:	4b31      	ldr	r3, [pc, #196]	; (8007560 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	099b      	lsrs	r3, r3, #6
 80074a0:	461a      	mov	r2, r3
 80074a2:	f04f 0300 	mov.w	r3, #0
 80074a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80074aa:	f04f 0100 	mov.w	r1, #0
 80074ae:	ea02 0400 	and.w	r4, r2, r0
 80074b2:	ea03 0501 	and.w	r5, r3, r1
 80074b6:	4620      	mov	r0, r4
 80074b8:	4629      	mov	r1, r5
 80074ba:	f04f 0200 	mov.w	r2, #0
 80074be:	f04f 0300 	mov.w	r3, #0
 80074c2:	014b      	lsls	r3, r1, #5
 80074c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80074c8:	0142      	lsls	r2, r0, #5
 80074ca:	4610      	mov	r0, r2
 80074cc:	4619      	mov	r1, r3
 80074ce:	1b00      	subs	r0, r0, r4
 80074d0:	eb61 0105 	sbc.w	r1, r1, r5
 80074d4:	f04f 0200 	mov.w	r2, #0
 80074d8:	f04f 0300 	mov.w	r3, #0
 80074dc:	018b      	lsls	r3, r1, #6
 80074de:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80074e2:	0182      	lsls	r2, r0, #6
 80074e4:	1a12      	subs	r2, r2, r0
 80074e6:	eb63 0301 	sbc.w	r3, r3, r1
 80074ea:	f04f 0000 	mov.w	r0, #0
 80074ee:	f04f 0100 	mov.w	r1, #0
 80074f2:	00d9      	lsls	r1, r3, #3
 80074f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80074f8:	00d0      	lsls	r0, r2, #3
 80074fa:	4602      	mov	r2, r0
 80074fc:	460b      	mov	r3, r1
 80074fe:	1912      	adds	r2, r2, r4
 8007500:	eb45 0303 	adc.w	r3, r5, r3
 8007504:	f04f 0000 	mov.w	r0, #0
 8007508:	f04f 0100 	mov.w	r1, #0
 800750c:	0299      	lsls	r1, r3, #10
 800750e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007512:	0290      	lsls	r0, r2, #10
 8007514:	4602      	mov	r2, r0
 8007516:	460b      	mov	r3, r1
 8007518:	4610      	mov	r0, r2
 800751a:	4619      	mov	r1, r3
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	461a      	mov	r2, r3
 8007520:	f04f 0300 	mov.w	r3, #0
 8007524:	f7f8 feac 	bl	8000280 <__aeabi_uldivmod>
 8007528:	4602      	mov	r2, r0
 800752a:	460b      	mov	r3, r1
 800752c:	4613      	mov	r3, r2
 800752e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007530:	4b0b      	ldr	r3, [pc, #44]	; (8007560 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	0c1b      	lsrs	r3, r3, #16
 8007536:	f003 0303 	and.w	r3, r3, #3
 800753a:	3301      	adds	r3, #1
 800753c:	005b      	lsls	r3, r3, #1
 800753e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007540:	68fa      	ldr	r2, [r7, #12]
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	fbb2 f3f3 	udiv	r3, r2, r3
 8007548:	60bb      	str	r3, [r7, #8]
      break;
 800754a:	e002      	b.n	8007552 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800754c:	4b05      	ldr	r3, [pc, #20]	; (8007564 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800754e:	60bb      	str	r3, [r7, #8]
      break;
 8007550:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007552:	68bb      	ldr	r3, [r7, #8]
}
 8007554:	4618      	mov	r0, r3
 8007556:	3710      	adds	r7, #16
 8007558:	46bd      	mov	sp, r7
 800755a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800755e:	bf00      	nop
 8007560:	40023800 	.word	0x40023800
 8007564:	00f42400 	.word	0x00f42400
 8007568:	007a1200 	.word	0x007a1200

0800756c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800756c:	b480      	push	{r7}
 800756e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007570:	4b03      	ldr	r3, [pc, #12]	; (8007580 <HAL_RCC_GetHCLKFreq+0x14>)
 8007572:	681b      	ldr	r3, [r3, #0]
}
 8007574:	4618      	mov	r0, r3
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr
 800757e:	bf00      	nop
 8007580:	20000010 	.word	0x20000010

08007584 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007588:	f7ff fff0 	bl	800756c <HAL_RCC_GetHCLKFreq>
 800758c:	4602      	mov	r2, r0
 800758e:	4b05      	ldr	r3, [pc, #20]	; (80075a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	0a9b      	lsrs	r3, r3, #10
 8007594:	f003 0307 	and.w	r3, r3, #7
 8007598:	4903      	ldr	r1, [pc, #12]	; (80075a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800759a:	5ccb      	ldrb	r3, [r1, r3]
 800759c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	bd80      	pop	{r7, pc}
 80075a4:	40023800 	.word	0x40023800
 80075a8:	08012320 	.word	0x08012320

080075ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80075b0:	f7ff ffdc 	bl	800756c <HAL_RCC_GetHCLKFreq>
 80075b4:	4602      	mov	r2, r0
 80075b6:	4b05      	ldr	r3, [pc, #20]	; (80075cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	0b5b      	lsrs	r3, r3, #13
 80075bc:	f003 0307 	and.w	r3, r3, #7
 80075c0:	4903      	ldr	r1, [pc, #12]	; (80075d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80075c2:	5ccb      	ldrb	r3, [r1, r3]
 80075c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	bd80      	pop	{r7, pc}
 80075cc:	40023800 	.word	0x40023800
 80075d0:	08012320 	.word	0x08012320

080075d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b082      	sub	sp, #8
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d101      	bne.n	80075e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	e07b      	b.n	80076de <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d108      	bne.n	8007600 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075f6:	d009      	beq.n	800760c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	61da      	str	r2, [r3, #28]
 80075fe:	e005      	b.n	800760c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2200      	movs	r2, #0
 8007604:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007618:	b2db      	uxtb	r3, r3
 800761a:	2b00      	cmp	r3, #0
 800761c:	d106      	bne.n	800762c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f7fe f982 	bl	8005930 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2202      	movs	r2, #2
 8007630:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	681a      	ldr	r2, [r3, #0]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007642:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007654:	431a      	orrs	r2, r3
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	68db      	ldr	r3, [r3, #12]
 800765a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800765e:	431a      	orrs	r2, r3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	691b      	ldr	r3, [r3, #16]
 8007664:	f003 0302 	and.w	r3, r3, #2
 8007668:	431a      	orrs	r2, r3
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	695b      	ldr	r3, [r3, #20]
 800766e:	f003 0301 	and.w	r3, r3, #1
 8007672:	431a      	orrs	r2, r3
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	699b      	ldr	r3, [r3, #24]
 8007678:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800767c:	431a      	orrs	r2, r3
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	69db      	ldr	r3, [r3, #28]
 8007682:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007686:	431a      	orrs	r2, r3
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6a1b      	ldr	r3, [r3, #32]
 800768c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007690:	ea42 0103 	orr.w	r1, r2, r3
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007698:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	430a      	orrs	r2, r1
 80076a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	699b      	ldr	r3, [r3, #24]
 80076a8:	0c1b      	lsrs	r3, r3, #16
 80076aa:	f003 0104 	and.w	r1, r3, #4
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b2:	f003 0210 	and.w	r2, r3, #16
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	430a      	orrs	r2, r1
 80076bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	69da      	ldr	r2, [r3, #28]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80076cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80076dc:	2300      	movs	r3, #0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3708      	adds	r7, #8
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b088      	sub	sp, #32
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	60f8      	str	r0, [r7, #12]
 80076ee:	60b9      	str	r1, [r7, #8]
 80076f0:	603b      	str	r3, [r7, #0]
 80076f2:	4613      	mov	r3, r2
 80076f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80076f6:	2300      	movs	r3, #0
 80076f8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007700:	2b01      	cmp	r3, #1
 8007702:	d101      	bne.n	8007708 <HAL_SPI_Transmit+0x22>
 8007704:	2302      	movs	r3, #2
 8007706:	e126      	b.n	8007956 <HAL_SPI_Transmit+0x270>
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2201      	movs	r2, #1
 800770c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007710:	f7fe ff48 	bl	80065a4 <HAL_GetTick>
 8007714:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007716:	88fb      	ldrh	r3, [r7, #6]
 8007718:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007720:	b2db      	uxtb	r3, r3
 8007722:	2b01      	cmp	r3, #1
 8007724:	d002      	beq.n	800772c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007726:	2302      	movs	r3, #2
 8007728:	77fb      	strb	r3, [r7, #31]
    goto error;
 800772a:	e10b      	b.n	8007944 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d002      	beq.n	8007738 <HAL_SPI_Transmit+0x52>
 8007732:	88fb      	ldrh	r3, [r7, #6]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d102      	bne.n	800773e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007738:	2301      	movs	r3, #1
 800773a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800773c:	e102      	b.n	8007944 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2203      	movs	r2, #3
 8007742:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2200      	movs	r2, #0
 800774a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	68ba      	ldr	r2, [r7, #8]
 8007750:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	88fa      	ldrh	r2, [r7, #6]
 8007756:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	88fa      	ldrh	r2, [r7, #6]
 800775c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2200      	movs	r2, #0
 8007762:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2200      	movs	r2, #0
 8007768:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2200      	movs	r2, #0
 800776e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2200      	movs	r2, #0
 8007774:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2200      	movs	r2, #0
 800777a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007784:	d10f      	bne.n	80077a6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007794:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80077a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077b0:	2b40      	cmp	r3, #64	; 0x40
 80077b2:	d007      	beq.n	80077c4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	68db      	ldr	r3, [r3, #12]
 80077c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077cc:	d14b      	bne.n	8007866 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d002      	beq.n	80077dc <HAL_SPI_Transmit+0xf6>
 80077d6:	8afb      	ldrh	r3, [r7, #22]
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d13e      	bne.n	800785a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077e0:	881a      	ldrh	r2, [r3, #0]
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ec:	1c9a      	adds	r2, r3, #2
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	3b01      	subs	r3, #1
 80077fa:	b29a      	uxth	r2, r3
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007800:	e02b      	b.n	800785a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	f003 0302 	and.w	r3, r3, #2
 800780c:	2b02      	cmp	r3, #2
 800780e:	d112      	bne.n	8007836 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007814:	881a      	ldrh	r2, [r3, #0]
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007820:	1c9a      	adds	r2, r3, #2
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800782a:	b29b      	uxth	r3, r3
 800782c:	3b01      	subs	r3, #1
 800782e:	b29a      	uxth	r2, r3
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	86da      	strh	r2, [r3, #54]	; 0x36
 8007834:	e011      	b.n	800785a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007836:	f7fe feb5 	bl	80065a4 <HAL_GetTick>
 800783a:	4602      	mov	r2, r0
 800783c:	69bb      	ldr	r3, [r7, #24]
 800783e:	1ad3      	subs	r3, r2, r3
 8007840:	683a      	ldr	r2, [r7, #0]
 8007842:	429a      	cmp	r2, r3
 8007844:	d803      	bhi.n	800784e <HAL_SPI_Transmit+0x168>
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800784c:	d102      	bne.n	8007854 <HAL_SPI_Transmit+0x16e>
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d102      	bne.n	800785a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007854:	2303      	movs	r3, #3
 8007856:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007858:	e074      	b.n	8007944 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800785e:	b29b      	uxth	r3, r3
 8007860:	2b00      	cmp	r3, #0
 8007862:	d1ce      	bne.n	8007802 <HAL_SPI_Transmit+0x11c>
 8007864:	e04c      	b.n	8007900 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d002      	beq.n	8007874 <HAL_SPI_Transmit+0x18e>
 800786e:	8afb      	ldrh	r3, [r7, #22]
 8007870:	2b01      	cmp	r3, #1
 8007872:	d140      	bne.n	80078f6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	330c      	adds	r3, #12
 800787e:	7812      	ldrb	r2, [r2, #0]
 8007880:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007886:	1c5a      	adds	r2, r3, #1
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007890:	b29b      	uxth	r3, r3
 8007892:	3b01      	subs	r3, #1
 8007894:	b29a      	uxth	r2, r3
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800789a:	e02c      	b.n	80078f6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	f003 0302 	and.w	r3, r3, #2
 80078a6:	2b02      	cmp	r3, #2
 80078a8:	d113      	bne.n	80078d2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	330c      	adds	r3, #12
 80078b4:	7812      	ldrb	r2, [r2, #0]
 80078b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078bc:	1c5a      	adds	r2, r3, #1
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	3b01      	subs	r3, #1
 80078ca:	b29a      	uxth	r2, r3
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	86da      	strh	r2, [r3, #54]	; 0x36
 80078d0:	e011      	b.n	80078f6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80078d2:	f7fe fe67 	bl	80065a4 <HAL_GetTick>
 80078d6:	4602      	mov	r2, r0
 80078d8:	69bb      	ldr	r3, [r7, #24]
 80078da:	1ad3      	subs	r3, r2, r3
 80078dc:	683a      	ldr	r2, [r7, #0]
 80078de:	429a      	cmp	r2, r3
 80078e0:	d803      	bhi.n	80078ea <HAL_SPI_Transmit+0x204>
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078e8:	d102      	bne.n	80078f0 <HAL_SPI_Transmit+0x20a>
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d102      	bne.n	80078f6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80078f0:	2303      	movs	r3, #3
 80078f2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80078f4:	e026      	b.n	8007944 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d1cd      	bne.n	800789c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007900:	69ba      	ldr	r2, [r7, #24]
 8007902:	6839      	ldr	r1, [r7, #0]
 8007904:	68f8      	ldr	r0, [r7, #12]
 8007906:	f000 fdd5 	bl	80084b4 <SPI_EndRxTxTransaction>
 800790a:	4603      	mov	r3, r0
 800790c:	2b00      	cmp	r3, #0
 800790e:	d002      	beq.n	8007916 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2220      	movs	r2, #32
 8007914:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d10a      	bne.n	8007934 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800791e:	2300      	movs	r3, #0
 8007920:	613b      	str	r3, [r7, #16]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	68db      	ldr	r3, [r3, #12]
 8007928:	613b      	str	r3, [r7, #16]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	689b      	ldr	r3, [r3, #8]
 8007930:	613b      	str	r3, [r7, #16]
 8007932:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007938:	2b00      	cmp	r3, #0
 800793a:	d002      	beq.n	8007942 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800793c:	2301      	movs	r3, #1
 800793e:	77fb      	strb	r3, [r7, #31]
 8007940:	e000      	b.n	8007944 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007942:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2201      	movs	r2, #1
 8007948:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2200      	movs	r2, #0
 8007950:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007954:	7ffb      	ldrb	r3, [r7, #31]
}
 8007956:	4618      	mov	r0, r3
 8007958:	3720      	adds	r7, #32
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}

0800795e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800795e:	b580      	push	{r7, lr}
 8007960:	b088      	sub	sp, #32
 8007962:	af02      	add	r7, sp, #8
 8007964:	60f8      	str	r0, [r7, #12]
 8007966:	60b9      	str	r1, [r7, #8]
 8007968:	603b      	str	r3, [r7, #0]
 800796a:	4613      	mov	r3, r2
 800796c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800796e:	2300      	movs	r3, #0
 8007970:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800797a:	d112      	bne.n	80079a2 <HAL_SPI_Receive+0x44>
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	689b      	ldr	r3, [r3, #8]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d10e      	bne.n	80079a2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2204      	movs	r2, #4
 8007988:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800798c:	88fa      	ldrh	r2, [r7, #6]
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	9300      	str	r3, [sp, #0]
 8007992:	4613      	mov	r3, r2
 8007994:	68ba      	ldr	r2, [r7, #8]
 8007996:	68b9      	ldr	r1, [r7, #8]
 8007998:	68f8      	ldr	r0, [r7, #12]
 800799a:	f000 f8f1 	bl	8007b80 <HAL_SPI_TransmitReceive>
 800799e:	4603      	mov	r3, r0
 80079a0:	e0ea      	b.n	8007b78 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d101      	bne.n	80079b0 <HAL_SPI_Receive+0x52>
 80079ac:	2302      	movs	r3, #2
 80079ae:	e0e3      	b.n	8007b78 <HAL_SPI_Receive+0x21a>
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2201      	movs	r2, #1
 80079b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80079b8:	f7fe fdf4 	bl	80065a4 <HAL_GetTick>
 80079bc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d002      	beq.n	80079d0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80079ca:	2302      	movs	r3, #2
 80079cc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80079ce:	e0ca      	b.n	8007b66 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d002      	beq.n	80079dc <HAL_SPI_Receive+0x7e>
 80079d6:	88fb      	ldrh	r3, [r7, #6]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d102      	bne.n	80079e2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80079dc:	2301      	movs	r3, #1
 80079de:	75fb      	strb	r3, [r7, #23]
    goto error;
 80079e0:	e0c1      	b.n	8007b66 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2204      	movs	r2, #4
 80079e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2200      	movs	r2, #0
 80079ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	68ba      	ldr	r2, [r7, #8]
 80079f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	88fa      	ldrh	r2, [r7, #6]
 80079fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	88fa      	ldrh	r2, [r7, #6]
 8007a00:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2200      	movs	r2, #0
 8007a06:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2200      	movs	r2, #0
 8007a12:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2200      	movs	r2, #0
 8007a18:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a28:	d10f      	bne.n	8007a4a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	681a      	ldr	r2, [r3, #0]
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a38:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	681a      	ldr	r2, [r3, #0]
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007a48:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a54:	2b40      	cmp	r3, #64	; 0x40
 8007a56:	d007      	beq.n	8007a68 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	681a      	ldr	r2, [r3, #0]
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a66:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	68db      	ldr	r3, [r3, #12]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d162      	bne.n	8007b36 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007a70:	e02e      	b.n	8007ad0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	689b      	ldr	r3, [r3, #8]
 8007a78:	f003 0301 	and.w	r3, r3, #1
 8007a7c:	2b01      	cmp	r3, #1
 8007a7e:	d115      	bne.n	8007aac <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f103 020c 	add.w	r2, r3, #12
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a8c:	7812      	ldrb	r2, [r2, #0]
 8007a8e:	b2d2      	uxtb	r2, r2
 8007a90:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a96:	1c5a      	adds	r2, r3, #1
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	3b01      	subs	r3, #1
 8007aa4:	b29a      	uxth	r2, r3
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007aaa:	e011      	b.n	8007ad0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007aac:	f7fe fd7a 	bl	80065a4 <HAL_GetTick>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	1ad3      	subs	r3, r2, r3
 8007ab6:	683a      	ldr	r2, [r7, #0]
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d803      	bhi.n	8007ac4 <HAL_SPI_Receive+0x166>
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ac2:	d102      	bne.n	8007aca <HAL_SPI_Receive+0x16c>
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d102      	bne.n	8007ad0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007aca:	2303      	movs	r3, #3
 8007acc:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007ace:	e04a      	b.n	8007b66 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d1cb      	bne.n	8007a72 <HAL_SPI_Receive+0x114>
 8007ada:	e031      	b.n	8007b40 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	689b      	ldr	r3, [r3, #8]
 8007ae2:	f003 0301 	and.w	r3, r3, #1
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d113      	bne.n	8007b12 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	68da      	ldr	r2, [r3, #12]
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af4:	b292      	uxth	r2, r2
 8007af6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007afc:	1c9a      	adds	r2, r3, #2
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	3b01      	subs	r3, #1
 8007b0a:	b29a      	uxth	r2, r3
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007b10:	e011      	b.n	8007b36 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b12:	f7fe fd47 	bl	80065a4 <HAL_GetTick>
 8007b16:	4602      	mov	r2, r0
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	1ad3      	subs	r3, r2, r3
 8007b1c:	683a      	ldr	r2, [r7, #0]
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d803      	bhi.n	8007b2a <HAL_SPI_Receive+0x1cc>
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b28:	d102      	bne.n	8007b30 <HAL_SPI_Receive+0x1d2>
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d102      	bne.n	8007b36 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007b30:	2303      	movs	r3, #3
 8007b32:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007b34:	e017      	b.n	8007b66 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d1cd      	bne.n	8007adc <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b40:	693a      	ldr	r2, [r7, #16]
 8007b42:	6839      	ldr	r1, [r7, #0]
 8007b44:	68f8      	ldr	r0, [r7, #12]
 8007b46:	f000 fc4f 	bl	80083e8 <SPI_EndRxTransaction>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d002      	beq.n	8007b56 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2220      	movs	r2, #32
 8007b54:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d002      	beq.n	8007b64 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	75fb      	strb	r3, [r7, #23]
 8007b62:	e000      	b.n	8007b66 <HAL_SPI_Receive+0x208>
  }

error :
 8007b64:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2201      	movs	r2, #1
 8007b6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2200      	movs	r2, #0
 8007b72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007b76:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3718      	adds	r7, #24
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b08c      	sub	sp, #48	; 0x30
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	60f8      	str	r0, [r7, #12]
 8007b88:	60b9      	str	r1, [r7, #8]
 8007b8a:	607a      	str	r2, [r7, #4]
 8007b8c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007b92:	2300      	movs	r3, #0
 8007b94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d101      	bne.n	8007ba6 <HAL_SPI_TransmitReceive+0x26>
 8007ba2:	2302      	movs	r3, #2
 8007ba4:	e18a      	b.n	8007ebc <HAL_SPI_TransmitReceive+0x33c>
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2201      	movs	r2, #1
 8007baa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007bae:	f7fe fcf9 	bl	80065a4 <HAL_GetTick>
 8007bb2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007bba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007bc4:	887b      	ldrh	r3, [r7, #2]
 8007bc6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007bc8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d00f      	beq.n	8007bf0 <HAL_SPI_TransmitReceive+0x70>
 8007bd0:	69fb      	ldr	r3, [r7, #28]
 8007bd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007bd6:	d107      	bne.n	8007be8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d103      	bne.n	8007be8 <HAL_SPI_TransmitReceive+0x68>
 8007be0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007be4:	2b04      	cmp	r3, #4
 8007be6:	d003      	beq.n	8007bf0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007be8:	2302      	movs	r3, #2
 8007bea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007bee:	e15b      	b.n	8007ea8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d005      	beq.n	8007c02 <HAL_SPI_TransmitReceive+0x82>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d002      	beq.n	8007c02 <HAL_SPI_TransmitReceive+0x82>
 8007bfc:	887b      	ldrh	r3, [r7, #2]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d103      	bne.n	8007c0a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007c02:	2301      	movs	r3, #1
 8007c04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007c08:	e14e      	b.n	8007ea8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c10:	b2db      	uxtb	r3, r3
 8007c12:	2b04      	cmp	r3, #4
 8007c14:	d003      	beq.n	8007c1e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2205      	movs	r2, #5
 8007c1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2200      	movs	r2, #0
 8007c22:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	887a      	ldrh	r2, [r7, #2]
 8007c2e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	887a      	ldrh	r2, [r7, #2]
 8007c34:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	68ba      	ldr	r2, [r7, #8]
 8007c3a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	887a      	ldrh	r2, [r7, #2]
 8007c40:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	887a      	ldrh	r2, [r7, #2]
 8007c46:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2200      	movs	r2, #0
 8007c52:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c5e:	2b40      	cmp	r3, #64	; 0x40
 8007c60:	d007      	beq.n	8007c72 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	681a      	ldr	r2, [r3, #0]
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c70:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	68db      	ldr	r3, [r3, #12]
 8007c76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c7a:	d178      	bne.n	8007d6e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d002      	beq.n	8007c8a <HAL_SPI_TransmitReceive+0x10a>
 8007c84:	8b7b      	ldrh	r3, [r7, #26]
 8007c86:	2b01      	cmp	r3, #1
 8007c88:	d166      	bne.n	8007d58 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c8e:	881a      	ldrh	r2, [r3, #0]
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c9a:	1c9a      	adds	r2, r3, #2
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	3b01      	subs	r3, #1
 8007ca8:	b29a      	uxth	r2, r3
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007cae:	e053      	b.n	8007d58 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	689b      	ldr	r3, [r3, #8]
 8007cb6:	f003 0302 	and.w	r3, r3, #2
 8007cba:	2b02      	cmp	r3, #2
 8007cbc:	d11b      	bne.n	8007cf6 <HAL_SPI_TransmitReceive+0x176>
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007cc2:	b29b      	uxth	r3, r3
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d016      	beq.n	8007cf6 <HAL_SPI_TransmitReceive+0x176>
 8007cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d113      	bne.n	8007cf6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cd2:	881a      	ldrh	r2, [r3, #0]
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cde:	1c9a      	adds	r2, r3, #2
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	3b01      	subs	r3, #1
 8007cec:	b29a      	uxth	r2, r3
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	f003 0301 	and.w	r3, r3, #1
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d119      	bne.n	8007d38 <HAL_SPI_TransmitReceive+0x1b8>
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d014      	beq.n	8007d38 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	68da      	ldr	r2, [r3, #12]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d18:	b292      	uxth	r2, r2
 8007d1a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d20:	1c9a      	adds	r2, r3, #2
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	3b01      	subs	r3, #1
 8007d2e:	b29a      	uxth	r2, r3
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007d34:	2301      	movs	r3, #1
 8007d36:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007d38:	f7fe fc34 	bl	80065a4 <HAL_GetTick>
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d40:	1ad3      	subs	r3, r2, r3
 8007d42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d807      	bhi.n	8007d58 <HAL_SPI_TransmitReceive+0x1d8>
 8007d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d4e:	d003      	beq.n	8007d58 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007d50:	2303      	movs	r3, #3
 8007d52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007d56:	e0a7      	b.n	8007ea8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d1a6      	bne.n	8007cb0 <HAL_SPI_TransmitReceive+0x130>
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d1a1      	bne.n	8007cb0 <HAL_SPI_TransmitReceive+0x130>
 8007d6c:	e07c      	b.n	8007e68 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d002      	beq.n	8007d7c <HAL_SPI_TransmitReceive+0x1fc>
 8007d76:	8b7b      	ldrh	r3, [r7, #26]
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d16b      	bne.n	8007e54 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	330c      	adds	r3, #12
 8007d86:	7812      	ldrb	r2, [r2, #0]
 8007d88:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d8e:	1c5a      	adds	r2, r3, #1
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d98:	b29b      	uxth	r3, r3
 8007d9a:	3b01      	subs	r3, #1
 8007d9c:	b29a      	uxth	r2, r3
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007da2:	e057      	b.n	8007e54 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	f003 0302 	and.w	r3, r3, #2
 8007dae:	2b02      	cmp	r3, #2
 8007db0:	d11c      	bne.n	8007dec <HAL_SPI_TransmitReceive+0x26c>
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d017      	beq.n	8007dec <HAL_SPI_TransmitReceive+0x26c>
 8007dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d114      	bne.n	8007dec <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	330c      	adds	r3, #12
 8007dcc:	7812      	ldrb	r2, [r2, #0]
 8007dce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dd4:	1c5a      	adds	r2, r3, #1
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	3b01      	subs	r3, #1
 8007de2:	b29a      	uxth	r2, r3
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007de8:	2300      	movs	r3, #0
 8007dea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	689b      	ldr	r3, [r3, #8]
 8007df2:	f003 0301 	and.w	r3, r3, #1
 8007df6:	2b01      	cmp	r3, #1
 8007df8:	d119      	bne.n	8007e2e <HAL_SPI_TransmitReceive+0x2ae>
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d014      	beq.n	8007e2e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	68da      	ldr	r2, [r3, #12]
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e0e:	b2d2      	uxtb	r2, r2
 8007e10:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e16:	1c5a      	adds	r2, r3, #1
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	3b01      	subs	r3, #1
 8007e24:	b29a      	uxth	r2, r3
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007e2e:	f7fe fbb9 	bl	80065a4 <HAL_GetTick>
 8007e32:	4602      	mov	r2, r0
 8007e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e36:	1ad3      	subs	r3, r2, r3
 8007e38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e3a:	429a      	cmp	r2, r3
 8007e3c:	d803      	bhi.n	8007e46 <HAL_SPI_TransmitReceive+0x2c6>
 8007e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e44:	d102      	bne.n	8007e4c <HAL_SPI_TransmitReceive+0x2cc>
 8007e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d103      	bne.n	8007e54 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007e4c:	2303      	movs	r3, #3
 8007e4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007e52:	e029      	b.n	8007ea8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e58:	b29b      	uxth	r3, r3
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d1a2      	bne.n	8007da4 <HAL_SPI_TransmitReceive+0x224>
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e62:	b29b      	uxth	r3, r3
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d19d      	bne.n	8007da4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e6a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007e6c:	68f8      	ldr	r0, [r7, #12]
 8007e6e:	f000 fb21 	bl	80084b4 <SPI_EndRxTxTransaction>
 8007e72:	4603      	mov	r3, r0
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d006      	beq.n	8007e86 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007e78:	2301      	movs	r3, #1
 8007e7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2220      	movs	r2, #32
 8007e82:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007e84:	e010      	b.n	8007ea8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d10b      	bne.n	8007ea6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e8e:	2300      	movs	r3, #0
 8007e90:	617b      	str	r3, [r7, #20]
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	68db      	ldr	r3, [r3, #12]
 8007e98:	617b      	str	r3, [r7, #20]
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	617b      	str	r3, [r7, #20]
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	e000      	b.n	8007ea8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007ea6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2201      	movs	r2, #1
 8007eac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007eb8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3730      	adds	r7, #48	; 0x30
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <HAL_SPI_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort(SPI_HandleTypeDef *hspi)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b088      	sub	sp, #32
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	77fb      	strb	r3, [r7, #31]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8007ed0:	4b6e      	ldr	r3, [pc, #440]	; (800808c <HAL_SPI_Abort+0x1c8>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a6e      	ldr	r2, [pc, #440]	; (8008090 <HAL_SPI_Abort+0x1cc>)
 8007ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8007eda:	0a5b      	lsrs	r3, r3, #9
 8007edc:	2264      	movs	r2, #100	; 0x64
 8007ede:	fb02 f303 	mul.w	r3, r2, r3
 8007ee2:	617b      	str	r3, [r7, #20]
  count = resetcount;
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	61bb      	str	r3, [r7, #24]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	685a      	ldr	r2, [r3, #4]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f022 0220 	bic.w	r2, r2, #32
 8007ef6:	605a      	str	r2, [r3, #4]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f02:	2b80      	cmp	r3, #128	; 0x80
 8007f04:	d117      	bne.n	8007f36 <HAL_SPI_Abort+0x72>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	4a62      	ldr	r2, [pc, #392]	; (8008094 <HAL_SPI_Abort+0x1d0>)
 8007f0a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8007f0c:	69bb      	ldr	r3, [r7, #24]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d106      	bne.n	8007f20 <HAL_SPI_Abort+0x5c>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f16:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8007f1e:	e008      	b.n	8007f32 <HAL_SPI_Abort+0x6e>
      }
      count--;
 8007f20:	69bb      	ldr	r3, [r7, #24]
 8007f22:	3b01      	subs	r3, #1
 8007f24:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	2b07      	cmp	r3, #7
 8007f30:	d1ec      	bne.n	8007f0c <HAL_SPI_Abort+0x48>
    /* Reset Timeout Counter */
    count = resetcount;
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	61bb      	str	r3, [r7, #24]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f40:	2b40      	cmp	r3, #64	; 0x40
 8007f42:	d117      	bne.n	8007f74 <HAL_SPI_Abort+0xb0>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	4a54      	ldr	r2, [pc, #336]	; (8008098 <HAL_SPI_Abort+0x1d4>)
 8007f48:	641a      	str	r2, [r3, #64]	; 0x40
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8007f4a:	69bb      	ldr	r3, [r7, #24]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d106      	bne.n	8007f5e <HAL_SPI_Abort+0x9a>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f54:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8007f5c:	e008      	b.n	8007f70 <HAL_SPI_Abort+0xac>
      }
      count--;
 8007f5e:	69bb      	ldr	r3, [r7, #24]
 8007f60:	3b01      	subs	r3, #1
 8007f62:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f6a:	b2db      	uxtb	r3, r3
 8007f6c:	2b07      	cmp	r3, #7
 8007f6e:	d1ec      	bne.n	8007f4a <HAL_SPI_Abort+0x86>
    /* Reset Timeout Counter */
    count = resetcount;
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	61bb      	str	r3, [r7, #24]
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	f003 0302 	and.w	r3, r3, #2
 8007f7e:	2b02      	cmp	r3, #2
 8007f80:	d12e      	bne.n	8007fe0 <HAL_SPI_Abort+0x11c>
  {
    /* Abort the SPI DMA Tx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmatx != NULL)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d02a      	beq.n	8007fe0 <HAL_SPI_Abort+0x11c>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmatx->XferAbortCallback = NULL;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f8e:	2200      	movs	r2, #0
 8007f90:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f96:	4618      	mov	r0, r3
 8007f98:	f7fe fc77 	bl	800688a <HAL_DMA_Abort>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d002      	beq.n	8007fa8 <HAL_SPI_Abort+0xe4>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2240      	movs	r2, #64	; 0x40
 8007fa6:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Disable Tx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN));
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	685a      	ldr	r2, [r3, #4]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f022 0202 	bic.w	r2, r2, #2
 8007fb6:	605a      	str	r2, [r3, #4]

      /* Wait until TXE flag is set */
      do
      {
        if (count == 0U)
 8007fb8:	69bb      	ldr	r3, [r7, #24]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d106      	bne.n	8007fcc <HAL_SPI_Abort+0x108>
        {
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fc2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	655a      	str	r2, [r3, #84]	; 0x54
          break;
 8007fca:	e009      	b.n	8007fe0 <HAL_SPI_Abort+0x11c>
        }
        count--;
 8007fcc:	69bb      	ldr	r3, [r7, #24]
 8007fce:	3b01      	subs	r3, #1
 8007fd0:	61bb      	str	r3, [r7, #24]
      } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	f003 0302 	and.w	r3, r3, #2
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d0eb      	beq.n	8007fb8 <HAL_SPI_Abort+0xf4>
    }
  }

  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	f003 0301 	and.w	r3, r3, #1
 8007fea:	2b01      	cmp	r3, #1
 8007fec:	d122      	bne.n	8008034 <HAL_SPI_Abort+0x170>
  {
    /* Abort the SPI DMA Rx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmarx != NULL)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d01e      	beq.n	8008034 <HAL_SPI_Abort+0x170>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmarx->XferAbortCallback = NULL;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008002:	4618      	mov	r0, r3
 8008004:	f7fe fc41 	bl	800688a <HAL_DMA_Abort>
 8008008:	4603      	mov	r3, r0
 800800a:	2b00      	cmp	r3, #0
 800800c:	d002      	beq.n	8008014 <HAL_SPI_Abort+0x150>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2240      	movs	r2, #64	; 0x40
 8008012:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Disable peripheral */
      __HAL_SPI_DISABLE(hspi);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008022:	601a      	str	r2, [r3, #0]

      /* Disable Rx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXDMAEN));
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	685a      	ldr	r2, [r3, #4]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f022 0201 	bic.w	r2, r2, #1
 8008032:	605a      	str	r2, [r3, #4]
    }
  }
  /* Reset Tx and Rx transfer counters */
  hspi->RxXferCount = 0U;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2200      	movs	r2, #0
 8008038:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2200      	movs	r2, #0
 800803e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check error during Abort procedure */
  if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008044:	2b40      	cmp	r3, #64	; 0x40
 8008046:	d102      	bne.n	800804e <HAL_SPI_Abort+0x18a>
  {
    /* return HAL_Error in case of error during Abort procedure */
    errorcode = HAL_ERROR;
 8008048:	2301      	movs	r3, #1
 800804a:	77fb      	strb	r3, [r7, #31]
 800804c:	e002      	b.n	8008054 <HAL_SPI_Abort+0x190>
  }
  else
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2200      	movs	r2, #0
 8008052:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008054:	2300      	movs	r3, #0
 8008056:	613b      	str	r3, [r7, #16]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	68db      	ldr	r3, [r3, #12]
 800805e:	613b      	str	r3, [r7, #16]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	689b      	ldr	r3, [r3, #8]
 8008066:	613b      	str	r3, [r7, #16]
 8008068:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 800806a:	2300      	movs	r3, #0
 800806c:	60fb      	str	r3, [r7, #12]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	60fb      	str	r3, [r7, #12]
 8008076:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->state to ready */
  hspi->State = HAL_SPI_STATE_READY;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2201      	movs	r2, #1
 800807c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return errorcode;
 8008080:	7ffb      	ldrb	r3, [r7, #31]
}
 8008082:	4618      	mov	r0, r3
 8008084:	3720      	adds	r7, #32
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
 800808a:	bf00      	nop
 800808c:	20000010 	.word	0x20000010
 8008090:	057619f1 	.word	0x057619f1
 8008094:	080085c9 	.word	0x080085c9
 8008098:	08008539 	.word	0x08008539

0800809c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b088      	sub	sp, #32
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	689b      	ldr	r3, [r3, #8]
 80080b2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80080b4:	69bb      	ldr	r3, [r7, #24]
 80080b6:	099b      	lsrs	r3, r3, #6
 80080b8:	f003 0301 	and.w	r3, r3, #1
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d10f      	bne.n	80080e0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80080c0:	69bb      	ldr	r3, [r7, #24]
 80080c2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d00a      	beq.n	80080e0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80080ca:	69fb      	ldr	r3, [r7, #28]
 80080cc:	099b      	lsrs	r3, r3, #6
 80080ce:	f003 0301 	and.w	r3, r3, #1
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d004      	beq.n	80080e0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	4798      	blx	r3
    return;
 80080de:	e0d7      	b.n	8008290 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80080e0:	69bb      	ldr	r3, [r7, #24]
 80080e2:	085b      	lsrs	r3, r3, #1
 80080e4:	f003 0301 	and.w	r3, r3, #1
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d00a      	beq.n	8008102 <HAL_SPI_IRQHandler+0x66>
 80080ec:	69fb      	ldr	r3, [r7, #28]
 80080ee:	09db      	lsrs	r3, r3, #7
 80080f0:	f003 0301 	and.w	r3, r3, #1
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d004      	beq.n	8008102 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	4798      	blx	r3
    return;
 8008100:	e0c6      	b.n	8008290 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008102:	69bb      	ldr	r3, [r7, #24]
 8008104:	095b      	lsrs	r3, r3, #5
 8008106:	f003 0301 	and.w	r3, r3, #1
 800810a:	2b00      	cmp	r3, #0
 800810c:	d10c      	bne.n	8008128 <HAL_SPI_IRQHandler+0x8c>
 800810e:	69bb      	ldr	r3, [r7, #24]
 8008110:	099b      	lsrs	r3, r3, #6
 8008112:	f003 0301 	and.w	r3, r3, #1
 8008116:	2b00      	cmp	r3, #0
 8008118:	d106      	bne.n	8008128 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800811a:	69bb      	ldr	r3, [r7, #24]
 800811c:	0a1b      	lsrs	r3, r3, #8
 800811e:	f003 0301 	and.w	r3, r3, #1
 8008122:	2b00      	cmp	r3, #0
 8008124:	f000 80b4 	beq.w	8008290 <HAL_SPI_IRQHandler+0x1f4>
 8008128:	69fb      	ldr	r3, [r7, #28]
 800812a:	095b      	lsrs	r3, r3, #5
 800812c:	f003 0301 	and.w	r3, r3, #1
 8008130:	2b00      	cmp	r3, #0
 8008132:	f000 80ad 	beq.w	8008290 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008136:	69bb      	ldr	r3, [r7, #24]
 8008138:	099b      	lsrs	r3, r3, #6
 800813a:	f003 0301 	and.w	r3, r3, #1
 800813e:	2b00      	cmp	r3, #0
 8008140:	d023      	beq.n	800818a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008148:	b2db      	uxtb	r3, r3
 800814a:	2b03      	cmp	r3, #3
 800814c:	d011      	beq.n	8008172 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008152:	f043 0204 	orr.w	r2, r3, #4
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800815a:	2300      	movs	r3, #0
 800815c:	617b      	str	r3, [r7, #20]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	68db      	ldr	r3, [r3, #12]
 8008164:	617b      	str	r3, [r7, #20]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	617b      	str	r3, [r7, #20]
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	e00b      	b.n	800818a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008172:	2300      	movs	r3, #0
 8008174:	613b      	str	r3, [r7, #16]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	68db      	ldr	r3, [r3, #12]
 800817c:	613b      	str	r3, [r7, #16]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	613b      	str	r3, [r7, #16]
 8008186:	693b      	ldr	r3, [r7, #16]
        return;
 8008188:	e082      	b.n	8008290 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800818a:	69bb      	ldr	r3, [r7, #24]
 800818c:	095b      	lsrs	r3, r3, #5
 800818e:	f003 0301 	and.w	r3, r3, #1
 8008192:	2b00      	cmp	r3, #0
 8008194:	d014      	beq.n	80081c0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800819a:	f043 0201 	orr.w	r2, r3, #1
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80081a2:	2300      	movs	r3, #0
 80081a4:	60fb      	str	r3, [r7, #12]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	60fb      	str	r3, [r7, #12]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	681a      	ldr	r2, [r3, #0]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081bc:	601a      	str	r2, [r3, #0]
 80081be:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80081c0:	69bb      	ldr	r3, [r7, #24]
 80081c2:	0a1b      	lsrs	r3, r3, #8
 80081c4:	f003 0301 	and.w	r3, r3, #1
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d00c      	beq.n	80081e6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081d0:	f043 0208 	orr.w	r2, r3, #8
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80081d8:	2300      	movs	r3, #0
 80081da:	60bb      	str	r3, [r7, #8]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	689b      	ldr	r3, [r3, #8]
 80081e2:	60bb      	str	r3, [r7, #8]
 80081e4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d04f      	beq.n	800828e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	685a      	ldr	r2, [r3, #4]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80081fc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2201      	movs	r2, #1
 8008202:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008206:	69fb      	ldr	r3, [r7, #28]
 8008208:	f003 0302 	and.w	r3, r3, #2
 800820c:	2b00      	cmp	r3, #0
 800820e:	d104      	bne.n	800821a <HAL_SPI_IRQHandler+0x17e>
 8008210:	69fb      	ldr	r3, [r7, #28]
 8008212:	f003 0301 	and.w	r3, r3, #1
 8008216:	2b00      	cmp	r3, #0
 8008218:	d034      	beq.n	8008284 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	685a      	ldr	r2, [r3, #4]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f022 0203 	bic.w	r2, r2, #3
 8008228:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800822e:	2b00      	cmp	r3, #0
 8008230:	d011      	beq.n	8008256 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008236:	4a18      	ldr	r2, [pc, #96]	; (8008298 <HAL_SPI_IRQHandler+0x1fc>)
 8008238:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800823e:	4618      	mov	r0, r3
 8008240:	f7fe fb93 	bl	800696a <HAL_DMA_Abort_IT>
 8008244:	4603      	mov	r3, r0
 8008246:	2b00      	cmp	r3, #0
 8008248:	d005      	beq.n	8008256 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800824e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800825a:	2b00      	cmp	r3, #0
 800825c:	d016      	beq.n	800828c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008262:	4a0d      	ldr	r2, [pc, #52]	; (8008298 <HAL_SPI_IRQHandler+0x1fc>)
 8008264:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800826a:	4618      	mov	r0, r3
 800826c:	f7fe fb7d 	bl	800696a <HAL_DMA_Abort_IT>
 8008270:	4603      	mov	r3, r0
 8008272:	2b00      	cmp	r3, #0
 8008274:	d00a      	beq.n	800828c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800827a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8008282:	e003      	b.n	800828c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 f809 	bl	800829c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800828a:	e000      	b.n	800828e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800828c:	bf00      	nop
    return;
 800828e:	bf00      	nop
  }
}
 8008290:	3720      	adds	r7, #32
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}
 8008296:	bf00      	nop
 8008298:	080082b1 	.word	0x080082b1

0800829c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800829c:	b480      	push	{r7}
 800829e:	b083      	sub	sp, #12
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80082a4:	bf00      	nop
 80082a6:	370c      	adds	r7, #12
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr

080082b0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b084      	sub	sp, #16
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082bc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2200      	movs	r2, #0
 80082c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2200      	movs	r2, #0
 80082c8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80082ca:	68f8      	ldr	r0, [r7, #12]
 80082cc:	f7ff ffe6 	bl	800829c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80082d0:	bf00      	nop
 80082d2:	3710      	adds	r7, #16
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b088      	sub	sp, #32
 80082dc:	af00      	add	r7, sp, #0
 80082de:	60f8      	str	r0, [r7, #12]
 80082e0:	60b9      	str	r1, [r7, #8]
 80082e2:	603b      	str	r3, [r7, #0]
 80082e4:	4613      	mov	r3, r2
 80082e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80082e8:	f7fe f95c 	bl	80065a4 <HAL_GetTick>
 80082ec:	4602      	mov	r2, r0
 80082ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f0:	1a9b      	subs	r3, r3, r2
 80082f2:	683a      	ldr	r2, [r7, #0]
 80082f4:	4413      	add	r3, r2
 80082f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80082f8:	f7fe f954 	bl	80065a4 <HAL_GetTick>
 80082fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80082fe:	4b39      	ldr	r3, [pc, #228]	; (80083e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	015b      	lsls	r3, r3, #5
 8008304:	0d1b      	lsrs	r3, r3, #20
 8008306:	69fa      	ldr	r2, [r7, #28]
 8008308:	fb02 f303 	mul.w	r3, r2, r3
 800830c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800830e:	e054      	b.n	80083ba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008316:	d050      	beq.n	80083ba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008318:	f7fe f944 	bl	80065a4 <HAL_GetTick>
 800831c:	4602      	mov	r2, r0
 800831e:	69bb      	ldr	r3, [r7, #24]
 8008320:	1ad3      	subs	r3, r2, r3
 8008322:	69fa      	ldr	r2, [r7, #28]
 8008324:	429a      	cmp	r2, r3
 8008326:	d902      	bls.n	800832e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008328:	69fb      	ldr	r3, [r7, #28]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d13d      	bne.n	80083aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	685a      	ldr	r2, [r3, #4]
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800833c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	685b      	ldr	r3, [r3, #4]
 8008342:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008346:	d111      	bne.n	800836c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	689b      	ldr	r3, [r3, #8]
 800834c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008350:	d004      	beq.n	800835c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	689b      	ldr	r3, [r3, #8]
 8008356:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800835a:	d107      	bne.n	800836c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	681a      	ldr	r2, [r3, #0]
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800836a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008370:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008374:	d10f      	bne.n	8008396 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008384:	601a      	str	r2, [r3, #0]
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	681a      	ldr	r2, [r3, #0]
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008394:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	2201      	movs	r2, #1
 800839a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	2200      	movs	r2, #0
 80083a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80083a6:	2303      	movs	r3, #3
 80083a8:	e017      	b.n	80083da <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d101      	bne.n	80083b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80083b0:	2300      	movs	r3, #0
 80083b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	3b01      	subs	r3, #1
 80083b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	689a      	ldr	r2, [r3, #8]
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	4013      	ands	r3, r2
 80083c4:	68ba      	ldr	r2, [r7, #8]
 80083c6:	429a      	cmp	r2, r3
 80083c8:	bf0c      	ite	eq
 80083ca:	2301      	moveq	r3, #1
 80083cc:	2300      	movne	r3, #0
 80083ce:	b2db      	uxtb	r3, r3
 80083d0:	461a      	mov	r2, r3
 80083d2:	79fb      	ldrb	r3, [r7, #7]
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d19b      	bne.n	8008310 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80083d8:	2300      	movs	r3, #0
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3720      	adds	r7, #32
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}
 80083e2:	bf00      	nop
 80083e4:	20000010 	.word	0x20000010

080083e8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b086      	sub	sp, #24
 80083ec:	af02      	add	r7, sp, #8
 80083ee:	60f8      	str	r0, [r7, #12]
 80083f0:	60b9      	str	r1, [r7, #8]
 80083f2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80083fc:	d111      	bne.n	8008422 <SPI_EndRxTransaction+0x3a>
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	689b      	ldr	r3, [r3, #8]
 8008402:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008406:	d004      	beq.n	8008412 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008410:	d107      	bne.n	8008422 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	681a      	ldr	r2, [r3, #0]
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008420:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	685b      	ldr	r3, [r3, #4]
 8008426:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800842a:	d12a      	bne.n	8008482 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	689b      	ldr	r3, [r3, #8]
 8008430:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008434:	d012      	beq.n	800845c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	9300      	str	r3, [sp, #0]
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	2200      	movs	r2, #0
 800843e:	2180      	movs	r1, #128	; 0x80
 8008440:	68f8      	ldr	r0, [r7, #12]
 8008442:	f7ff ff49 	bl	80082d8 <SPI_WaitFlagStateUntilTimeout>
 8008446:	4603      	mov	r3, r0
 8008448:	2b00      	cmp	r3, #0
 800844a:	d02d      	beq.n	80084a8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008450:	f043 0220 	orr.w	r2, r3, #32
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008458:	2303      	movs	r3, #3
 800845a:	e026      	b.n	80084aa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	9300      	str	r3, [sp, #0]
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	2200      	movs	r2, #0
 8008464:	2101      	movs	r1, #1
 8008466:	68f8      	ldr	r0, [r7, #12]
 8008468:	f7ff ff36 	bl	80082d8 <SPI_WaitFlagStateUntilTimeout>
 800846c:	4603      	mov	r3, r0
 800846e:	2b00      	cmp	r3, #0
 8008470:	d01a      	beq.n	80084a8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008476:	f043 0220 	orr.w	r2, r3, #32
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800847e:	2303      	movs	r3, #3
 8008480:	e013      	b.n	80084aa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	9300      	str	r3, [sp, #0]
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	2200      	movs	r2, #0
 800848a:	2101      	movs	r1, #1
 800848c:	68f8      	ldr	r0, [r7, #12]
 800848e:	f7ff ff23 	bl	80082d8 <SPI_WaitFlagStateUntilTimeout>
 8008492:	4603      	mov	r3, r0
 8008494:	2b00      	cmp	r3, #0
 8008496:	d007      	beq.n	80084a8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800849c:	f043 0220 	orr.w	r2, r3, #32
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80084a4:	2303      	movs	r3, #3
 80084a6:	e000      	b.n	80084aa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80084a8:	2300      	movs	r3, #0
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3710      	adds	r7, #16
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}
	...

080084b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b088      	sub	sp, #32
 80084b8:	af02      	add	r7, sp, #8
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	60b9      	str	r1, [r7, #8]
 80084be:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80084c0:	4b1b      	ldr	r3, [pc, #108]	; (8008530 <SPI_EndRxTxTransaction+0x7c>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4a1b      	ldr	r2, [pc, #108]	; (8008534 <SPI_EndRxTxTransaction+0x80>)
 80084c6:	fba2 2303 	umull	r2, r3, r2, r3
 80084ca:	0d5b      	lsrs	r3, r3, #21
 80084cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80084d0:	fb02 f303 	mul.w	r3, r2, r3
 80084d4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80084de:	d112      	bne.n	8008506 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	9300      	str	r3, [sp, #0]
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	2200      	movs	r2, #0
 80084e8:	2180      	movs	r1, #128	; 0x80
 80084ea:	68f8      	ldr	r0, [r7, #12]
 80084ec:	f7ff fef4 	bl	80082d8 <SPI_WaitFlagStateUntilTimeout>
 80084f0:	4603      	mov	r3, r0
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d016      	beq.n	8008524 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084fa:	f043 0220 	orr.w	r2, r3, #32
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008502:	2303      	movs	r3, #3
 8008504:	e00f      	b.n	8008526 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d00a      	beq.n	8008522 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	3b01      	subs	r3, #1
 8008510:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	689b      	ldr	r3, [r3, #8]
 8008518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800851c:	2b80      	cmp	r3, #128	; 0x80
 800851e:	d0f2      	beq.n	8008506 <SPI_EndRxTxTransaction+0x52>
 8008520:	e000      	b.n	8008524 <SPI_EndRxTxTransaction+0x70>
        break;
 8008522:	bf00      	nop
  }

  return HAL_OK;
 8008524:	2300      	movs	r3, #0
}
 8008526:	4618      	mov	r0, r3
 8008528:	3718      	adds	r7, #24
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop
 8008530:	20000010 	.word	0x20000010
 8008534:	165e9f81 	.word	0x165e9f81

08008538 <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
 8008538:	b480      	push	{r7}
 800853a:	b085      	sub	sp, #20
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 8008540:	2300      	movs	r3, #0
 8008542:	60fb      	str	r3, [r7, #12]
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8008544:	4b1e      	ldr	r3, [pc, #120]	; (80085c0 <SPI_AbortRx_ISR+0x88>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4a1e      	ldr	r2, [pc, #120]	; (80085c4 <SPI_AbortRx_ISR+0x8c>)
 800854a:	fba2 2303 	umull	r2, r3, r2, r3
 800854e:	0a5b      	lsrs	r3, r3, #9
 8008550:	2264      	movs	r2, #100	; 0x64
 8008552:	fb02 f303 	mul.w	r3, r2, r3
 8008556:	60bb      	str	r3, [r7, #8]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d106      	bne.n	800856c <SPI_AbortRx_ISR+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008562:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800856a:	e009      	b.n	8008580 <SPI_AbortRx_ISR+0x48>
    }
    count--;
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	3b01      	subs	r3, #1
 8008570:	60bb      	str	r3, [r7, #8]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	689b      	ldr	r3, [r3, #8]
 8008578:	f003 0302 	and.w	r3, r3, #2
 800857c:	2b00      	cmp	r3, #0
 800857e:	d0eb      	beq.n	8008558 <SPI_AbortRx_ISR+0x20>

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	681a      	ldr	r2, [r3, #0]
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800858e:	601a      	str	r2, [r3, #0]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE));
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	685a      	ldr	r2, [r3, #4]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800859e:	605a      	str	r2, [r3, #4]

  /* Flush Data Register by a blank read */
  tmpreg = READ_REG(hspi->Instance->DR);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	68db      	ldr	r3, [r3, #12]
 80085a6:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 80085a8:	68fb      	ldr	r3, [r7, #12]

  hspi->State = HAL_SPI_STATE_ABORT;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2207      	movs	r2, #7
 80085ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
 80085b2:	bf00      	nop
 80085b4:	3714      	adds	r7, #20
 80085b6:	46bd      	mov	sp, r7
 80085b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085bc:	4770      	bx	lr
 80085be:	bf00      	nop
 80085c0:	20000010 	.word	0x20000010
 80085c4:	057619f1 	.word	0x057619f1

080085c8 <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b083      	sub	sp, #12
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE));
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	685a      	ldr	r2, [r3, #4]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80085de:	605a      	str	r2, [r3, #4]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	681a      	ldr	r2, [r3, #0]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085ee:	601a      	str	r2, [r3, #0]

  hspi->State = HAL_SPI_STATE_ABORT;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2207      	movs	r2, #7
 80085f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
 80085f8:	bf00      	nop
 80085fa:	370c      	adds	r7, #12
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr

08008604 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b082      	sub	sp, #8
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d101      	bne.n	8008616 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008612:	2301      	movs	r3, #1
 8008614:	e03f      	b.n	8008696 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800861c:	b2db      	uxtb	r3, r3
 800861e:	2b00      	cmp	r3, #0
 8008620:	d106      	bne.n	8008630 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2200      	movs	r2, #0
 8008626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f7fd f9d8 	bl	80059e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2224      	movs	r2, #36	; 0x24
 8008634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	68da      	ldr	r2, [r3, #12]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008646:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f000 f929 	bl	80088a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	691a      	ldr	r2, [r3, #16]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800865c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	695a      	ldr	r2, [r3, #20]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800866c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	68da      	ldr	r2, [r3, #12]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800867c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2200      	movs	r2, #0
 8008682:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2220      	movs	r2, #32
 8008688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2220      	movs	r2, #32
 8008690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008694:	2300      	movs	r3, #0
}
 8008696:	4618      	mov	r0, r3
 8008698:	3708      	adds	r7, #8
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}

0800869e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800869e:	b580      	push	{r7, lr}
 80086a0:	b08a      	sub	sp, #40	; 0x28
 80086a2:	af02      	add	r7, sp, #8
 80086a4:	60f8      	str	r0, [r7, #12]
 80086a6:	60b9      	str	r1, [r7, #8]
 80086a8:	603b      	str	r3, [r7, #0]
 80086aa:	4613      	mov	r3, r2
 80086ac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80086ae:	2300      	movs	r3, #0
 80086b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086b8:	b2db      	uxtb	r3, r3
 80086ba:	2b20      	cmp	r3, #32
 80086bc:	d17c      	bne.n	80087b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d002      	beq.n	80086ca <HAL_UART_Transmit+0x2c>
 80086c4:	88fb      	ldrh	r3, [r7, #6]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d101      	bne.n	80086ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80086ca:	2301      	movs	r3, #1
 80086cc:	e075      	b.n	80087ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d101      	bne.n	80086dc <HAL_UART_Transmit+0x3e>
 80086d8:	2302      	movs	r3, #2
 80086da:	e06e      	b.n	80087ba <HAL_UART_Transmit+0x11c>
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2201      	movs	r2, #1
 80086e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2200      	movs	r2, #0
 80086e8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2221      	movs	r2, #33	; 0x21
 80086ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80086f2:	f7fd ff57 	bl	80065a4 <HAL_GetTick>
 80086f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	88fa      	ldrh	r2, [r7, #6]
 80086fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	88fa      	ldrh	r2, [r7, #6]
 8008702:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800870c:	d108      	bne.n	8008720 <HAL_UART_Transmit+0x82>
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	691b      	ldr	r3, [r3, #16]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d104      	bne.n	8008720 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008716:	2300      	movs	r3, #0
 8008718:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	61bb      	str	r3, [r7, #24]
 800871e:	e003      	b.n	8008728 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008724:	2300      	movs	r3, #0
 8008726:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2200      	movs	r2, #0
 800872c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008730:	e02a      	b.n	8008788 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	9300      	str	r3, [sp, #0]
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	2200      	movs	r2, #0
 800873a:	2180      	movs	r1, #128	; 0x80
 800873c:	68f8      	ldr	r0, [r7, #12]
 800873e:	f000 f840 	bl	80087c2 <UART_WaitOnFlagUntilTimeout>
 8008742:	4603      	mov	r3, r0
 8008744:	2b00      	cmp	r3, #0
 8008746:	d001      	beq.n	800874c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008748:	2303      	movs	r3, #3
 800874a:	e036      	b.n	80087ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800874c:	69fb      	ldr	r3, [r7, #28]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d10b      	bne.n	800876a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008752:	69bb      	ldr	r3, [r7, #24]
 8008754:	881b      	ldrh	r3, [r3, #0]
 8008756:	461a      	mov	r2, r3
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008760:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008762:	69bb      	ldr	r3, [r7, #24]
 8008764:	3302      	adds	r3, #2
 8008766:	61bb      	str	r3, [r7, #24]
 8008768:	e007      	b.n	800877a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800876a:	69fb      	ldr	r3, [r7, #28]
 800876c:	781a      	ldrb	r2, [r3, #0]
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008774:	69fb      	ldr	r3, [r7, #28]
 8008776:	3301      	adds	r3, #1
 8008778:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800877e:	b29b      	uxth	r3, r3
 8008780:	3b01      	subs	r3, #1
 8008782:	b29a      	uxth	r2, r3
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800878c:	b29b      	uxth	r3, r3
 800878e:	2b00      	cmp	r3, #0
 8008790:	d1cf      	bne.n	8008732 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	9300      	str	r3, [sp, #0]
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	2200      	movs	r2, #0
 800879a:	2140      	movs	r1, #64	; 0x40
 800879c:	68f8      	ldr	r0, [r7, #12]
 800879e:	f000 f810 	bl	80087c2 <UART_WaitOnFlagUntilTimeout>
 80087a2:	4603      	mov	r3, r0
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d001      	beq.n	80087ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80087a8:	2303      	movs	r3, #3
 80087aa:	e006      	b.n	80087ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2220      	movs	r2, #32
 80087b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80087b4:	2300      	movs	r3, #0
 80087b6:	e000      	b.n	80087ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80087b8:	2302      	movs	r3, #2
  }
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3720      	adds	r7, #32
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}

080087c2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80087c2:	b580      	push	{r7, lr}
 80087c4:	b090      	sub	sp, #64	; 0x40
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	60f8      	str	r0, [r7, #12]
 80087ca:	60b9      	str	r1, [r7, #8]
 80087cc:	603b      	str	r3, [r7, #0]
 80087ce:	4613      	mov	r3, r2
 80087d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087d2:	e050      	b.n	8008876 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087da:	d04c      	beq.n	8008876 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80087dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d007      	beq.n	80087f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80087e2:	f7fd fedf 	bl	80065a4 <HAL_GetTick>
 80087e6:	4602      	mov	r2, r0
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	1ad3      	subs	r3, r2, r3
 80087ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d241      	bcs.n	8008876 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	330c      	adds	r3, #12
 80087f8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087fc:	e853 3f00 	ldrex	r3, [r3]
 8008800:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008804:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008808:	63fb      	str	r3, [r7, #60]	; 0x3c
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	330c      	adds	r3, #12
 8008810:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008812:	637a      	str	r2, [r7, #52]	; 0x34
 8008814:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008816:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008818:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800881a:	e841 2300 	strex	r3, r2, [r1]
 800881e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008822:	2b00      	cmp	r3, #0
 8008824:	d1e5      	bne.n	80087f2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	3314      	adds	r3, #20
 800882c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	e853 3f00 	ldrex	r3, [r3]
 8008834:	613b      	str	r3, [r7, #16]
   return(result);
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	f023 0301 	bic.w	r3, r3, #1
 800883c:	63bb      	str	r3, [r7, #56]	; 0x38
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	3314      	adds	r3, #20
 8008844:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008846:	623a      	str	r2, [r7, #32]
 8008848:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800884a:	69f9      	ldr	r1, [r7, #28]
 800884c:	6a3a      	ldr	r2, [r7, #32]
 800884e:	e841 2300 	strex	r3, r2, [r1]
 8008852:	61bb      	str	r3, [r7, #24]
   return(result);
 8008854:	69bb      	ldr	r3, [r7, #24]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d1e5      	bne.n	8008826 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	2220      	movs	r2, #32
 800885e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2220      	movs	r2, #32
 8008866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2200      	movs	r2, #0
 800886e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008872:	2303      	movs	r3, #3
 8008874:	e00f      	b.n	8008896 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	681a      	ldr	r2, [r3, #0]
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	4013      	ands	r3, r2
 8008880:	68ba      	ldr	r2, [r7, #8]
 8008882:	429a      	cmp	r2, r3
 8008884:	bf0c      	ite	eq
 8008886:	2301      	moveq	r3, #1
 8008888:	2300      	movne	r3, #0
 800888a:	b2db      	uxtb	r3, r3
 800888c:	461a      	mov	r2, r3
 800888e:	79fb      	ldrb	r3, [r7, #7]
 8008890:	429a      	cmp	r2, r3
 8008892:	d09f      	beq.n	80087d4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008894:	2300      	movs	r3, #0
}
 8008896:	4618      	mov	r0, r3
 8008898:	3740      	adds	r7, #64	; 0x40
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
	...

080088a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80088a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088a4:	b09f      	sub	sp, #124	; 0x7c
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80088aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	691b      	ldr	r3, [r3, #16]
 80088b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80088b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088b6:	68d9      	ldr	r1, [r3, #12]
 80088b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088ba:	681a      	ldr	r2, [r3, #0]
 80088bc:	ea40 0301 	orr.w	r3, r0, r1
 80088c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80088c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088c4:	689a      	ldr	r2, [r3, #8]
 80088c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088c8:	691b      	ldr	r3, [r3, #16]
 80088ca:	431a      	orrs	r2, r3
 80088cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088ce:	695b      	ldr	r3, [r3, #20]
 80088d0:	431a      	orrs	r2, r3
 80088d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088d4:	69db      	ldr	r3, [r3, #28]
 80088d6:	4313      	orrs	r3, r2
 80088d8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80088da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	68db      	ldr	r3, [r3, #12]
 80088e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80088e4:	f021 010c 	bic.w	r1, r1, #12
 80088e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088ea:	681a      	ldr	r2, [r3, #0]
 80088ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80088ee:	430b      	orrs	r3, r1
 80088f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80088f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	695b      	ldr	r3, [r3, #20]
 80088f8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80088fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088fe:	6999      	ldr	r1, [r3, #24]
 8008900:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008902:	681a      	ldr	r2, [r3, #0]
 8008904:	ea40 0301 	orr.w	r3, r0, r1
 8008908:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800890a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800890c:	681a      	ldr	r2, [r3, #0]
 800890e:	4bc5      	ldr	r3, [pc, #788]	; (8008c24 <UART_SetConfig+0x384>)
 8008910:	429a      	cmp	r2, r3
 8008912:	d004      	beq.n	800891e <UART_SetConfig+0x7e>
 8008914:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008916:	681a      	ldr	r2, [r3, #0]
 8008918:	4bc3      	ldr	r3, [pc, #780]	; (8008c28 <UART_SetConfig+0x388>)
 800891a:	429a      	cmp	r2, r3
 800891c:	d103      	bne.n	8008926 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800891e:	f7fe fe45 	bl	80075ac <HAL_RCC_GetPCLK2Freq>
 8008922:	6778      	str	r0, [r7, #116]	; 0x74
 8008924:	e002      	b.n	800892c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008926:	f7fe fe2d 	bl	8007584 <HAL_RCC_GetPCLK1Freq>
 800892a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800892c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800892e:	69db      	ldr	r3, [r3, #28]
 8008930:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008934:	f040 80b6 	bne.w	8008aa4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008938:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800893a:	461c      	mov	r4, r3
 800893c:	f04f 0500 	mov.w	r5, #0
 8008940:	4622      	mov	r2, r4
 8008942:	462b      	mov	r3, r5
 8008944:	1891      	adds	r1, r2, r2
 8008946:	6439      	str	r1, [r7, #64]	; 0x40
 8008948:	415b      	adcs	r3, r3
 800894a:	647b      	str	r3, [r7, #68]	; 0x44
 800894c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008950:	1912      	adds	r2, r2, r4
 8008952:	eb45 0303 	adc.w	r3, r5, r3
 8008956:	f04f 0000 	mov.w	r0, #0
 800895a:	f04f 0100 	mov.w	r1, #0
 800895e:	00d9      	lsls	r1, r3, #3
 8008960:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008964:	00d0      	lsls	r0, r2, #3
 8008966:	4602      	mov	r2, r0
 8008968:	460b      	mov	r3, r1
 800896a:	1911      	adds	r1, r2, r4
 800896c:	6639      	str	r1, [r7, #96]	; 0x60
 800896e:	416b      	adcs	r3, r5
 8008970:	667b      	str	r3, [r7, #100]	; 0x64
 8008972:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008974:	685b      	ldr	r3, [r3, #4]
 8008976:	461a      	mov	r2, r3
 8008978:	f04f 0300 	mov.w	r3, #0
 800897c:	1891      	adds	r1, r2, r2
 800897e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008980:	415b      	adcs	r3, r3
 8008982:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008984:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008988:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800898c:	f7f7 fc78 	bl	8000280 <__aeabi_uldivmod>
 8008990:	4602      	mov	r2, r0
 8008992:	460b      	mov	r3, r1
 8008994:	4ba5      	ldr	r3, [pc, #660]	; (8008c2c <UART_SetConfig+0x38c>)
 8008996:	fba3 2302 	umull	r2, r3, r3, r2
 800899a:	095b      	lsrs	r3, r3, #5
 800899c:	011e      	lsls	r6, r3, #4
 800899e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80089a0:	461c      	mov	r4, r3
 80089a2:	f04f 0500 	mov.w	r5, #0
 80089a6:	4622      	mov	r2, r4
 80089a8:	462b      	mov	r3, r5
 80089aa:	1891      	adds	r1, r2, r2
 80089ac:	6339      	str	r1, [r7, #48]	; 0x30
 80089ae:	415b      	adcs	r3, r3
 80089b0:	637b      	str	r3, [r7, #52]	; 0x34
 80089b2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80089b6:	1912      	adds	r2, r2, r4
 80089b8:	eb45 0303 	adc.w	r3, r5, r3
 80089bc:	f04f 0000 	mov.w	r0, #0
 80089c0:	f04f 0100 	mov.w	r1, #0
 80089c4:	00d9      	lsls	r1, r3, #3
 80089c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80089ca:	00d0      	lsls	r0, r2, #3
 80089cc:	4602      	mov	r2, r0
 80089ce:	460b      	mov	r3, r1
 80089d0:	1911      	adds	r1, r2, r4
 80089d2:	65b9      	str	r1, [r7, #88]	; 0x58
 80089d4:	416b      	adcs	r3, r5
 80089d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80089d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	461a      	mov	r2, r3
 80089de:	f04f 0300 	mov.w	r3, #0
 80089e2:	1891      	adds	r1, r2, r2
 80089e4:	62b9      	str	r1, [r7, #40]	; 0x28
 80089e6:	415b      	adcs	r3, r3
 80089e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80089ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80089ee:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80089f2:	f7f7 fc45 	bl	8000280 <__aeabi_uldivmod>
 80089f6:	4602      	mov	r2, r0
 80089f8:	460b      	mov	r3, r1
 80089fa:	4b8c      	ldr	r3, [pc, #560]	; (8008c2c <UART_SetConfig+0x38c>)
 80089fc:	fba3 1302 	umull	r1, r3, r3, r2
 8008a00:	095b      	lsrs	r3, r3, #5
 8008a02:	2164      	movs	r1, #100	; 0x64
 8008a04:	fb01 f303 	mul.w	r3, r1, r3
 8008a08:	1ad3      	subs	r3, r2, r3
 8008a0a:	00db      	lsls	r3, r3, #3
 8008a0c:	3332      	adds	r3, #50	; 0x32
 8008a0e:	4a87      	ldr	r2, [pc, #540]	; (8008c2c <UART_SetConfig+0x38c>)
 8008a10:	fba2 2303 	umull	r2, r3, r2, r3
 8008a14:	095b      	lsrs	r3, r3, #5
 8008a16:	005b      	lsls	r3, r3, #1
 8008a18:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008a1c:	441e      	add	r6, r3
 8008a1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a20:	4618      	mov	r0, r3
 8008a22:	f04f 0100 	mov.w	r1, #0
 8008a26:	4602      	mov	r2, r0
 8008a28:	460b      	mov	r3, r1
 8008a2a:	1894      	adds	r4, r2, r2
 8008a2c:	623c      	str	r4, [r7, #32]
 8008a2e:	415b      	adcs	r3, r3
 8008a30:	627b      	str	r3, [r7, #36]	; 0x24
 8008a32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008a36:	1812      	adds	r2, r2, r0
 8008a38:	eb41 0303 	adc.w	r3, r1, r3
 8008a3c:	f04f 0400 	mov.w	r4, #0
 8008a40:	f04f 0500 	mov.w	r5, #0
 8008a44:	00dd      	lsls	r5, r3, #3
 8008a46:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008a4a:	00d4      	lsls	r4, r2, #3
 8008a4c:	4622      	mov	r2, r4
 8008a4e:	462b      	mov	r3, r5
 8008a50:	1814      	adds	r4, r2, r0
 8008a52:	653c      	str	r4, [r7, #80]	; 0x50
 8008a54:	414b      	adcs	r3, r1
 8008a56:	657b      	str	r3, [r7, #84]	; 0x54
 8008a58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	f04f 0300 	mov.w	r3, #0
 8008a62:	1891      	adds	r1, r2, r2
 8008a64:	61b9      	str	r1, [r7, #24]
 8008a66:	415b      	adcs	r3, r3
 8008a68:	61fb      	str	r3, [r7, #28]
 8008a6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008a6e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008a72:	f7f7 fc05 	bl	8000280 <__aeabi_uldivmod>
 8008a76:	4602      	mov	r2, r0
 8008a78:	460b      	mov	r3, r1
 8008a7a:	4b6c      	ldr	r3, [pc, #432]	; (8008c2c <UART_SetConfig+0x38c>)
 8008a7c:	fba3 1302 	umull	r1, r3, r3, r2
 8008a80:	095b      	lsrs	r3, r3, #5
 8008a82:	2164      	movs	r1, #100	; 0x64
 8008a84:	fb01 f303 	mul.w	r3, r1, r3
 8008a88:	1ad3      	subs	r3, r2, r3
 8008a8a:	00db      	lsls	r3, r3, #3
 8008a8c:	3332      	adds	r3, #50	; 0x32
 8008a8e:	4a67      	ldr	r2, [pc, #412]	; (8008c2c <UART_SetConfig+0x38c>)
 8008a90:	fba2 2303 	umull	r2, r3, r2, r3
 8008a94:	095b      	lsrs	r3, r3, #5
 8008a96:	f003 0207 	and.w	r2, r3, #7
 8008a9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4432      	add	r2, r6
 8008aa0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008aa2:	e0b9      	b.n	8008c18 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008aa4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008aa6:	461c      	mov	r4, r3
 8008aa8:	f04f 0500 	mov.w	r5, #0
 8008aac:	4622      	mov	r2, r4
 8008aae:	462b      	mov	r3, r5
 8008ab0:	1891      	adds	r1, r2, r2
 8008ab2:	6139      	str	r1, [r7, #16]
 8008ab4:	415b      	adcs	r3, r3
 8008ab6:	617b      	str	r3, [r7, #20]
 8008ab8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008abc:	1912      	adds	r2, r2, r4
 8008abe:	eb45 0303 	adc.w	r3, r5, r3
 8008ac2:	f04f 0000 	mov.w	r0, #0
 8008ac6:	f04f 0100 	mov.w	r1, #0
 8008aca:	00d9      	lsls	r1, r3, #3
 8008acc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008ad0:	00d0      	lsls	r0, r2, #3
 8008ad2:	4602      	mov	r2, r0
 8008ad4:	460b      	mov	r3, r1
 8008ad6:	eb12 0804 	adds.w	r8, r2, r4
 8008ada:	eb43 0905 	adc.w	r9, r3, r5
 8008ade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f04f 0100 	mov.w	r1, #0
 8008ae8:	f04f 0200 	mov.w	r2, #0
 8008aec:	f04f 0300 	mov.w	r3, #0
 8008af0:	008b      	lsls	r3, r1, #2
 8008af2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008af6:	0082      	lsls	r2, r0, #2
 8008af8:	4640      	mov	r0, r8
 8008afa:	4649      	mov	r1, r9
 8008afc:	f7f7 fbc0 	bl	8000280 <__aeabi_uldivmod>
 8008b00:	4602      	mov	r2, r0
 8008b02:	460b      	mov	r3, r1
 8008b04:	4b49      	ldr	r3, [pc, #292]	; (8008c2c <UART_SetConfig+0x38c>)
 8008b06:	fba3 2302 	umull	r2, r3, r3, r2
 8008b0a:	095b      	lsrs	r3, r3, #5
 8008b0c:	011e      	lsls	r6, r3, #4
 8008b0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b10:	4618      	mov	r0, r3
 8008b12:	f04f 0100 	mov.w	r1, #0
 8008b16:	4602      	mov	r2, r0
 8008b18:	460b      	mov	r3, r1
 8008b1a:	1894      	adds	r4, r2, r2
 8008b1c:	60bc      	str	r4, [r7, #8]
 8008b1e:	415b      	adcs	r3, r3
 8008b20:	60fb      	str	r3, [r7, #12]
 8008b22:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008b26:	1812      	adds	r2, r2, r0
 8008b28:	eb41 0303 	adc.w	r3, r1, r3
 8008b2c:	f04f 0400 	mov.w	r4, #0
 8008b30:	f04f 0500 	mov.w	r5, #0
 8008b34:	00dd      	lsls	r5, r3, #3
 8008b36:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008b3a:	00d4      	lsls	r4, r2, #3
 8008b3c:	4622      	mov	r2, r4
 8008b3e:	462b      	mov	r3, r5
 8008b40:	1814      	adds	r4, r2, r0
 8008b42:	64bc      	str	r4, [r7, #72]	; 0x48
 8008b44:	414b      	adcs	r3, r1
 8008b46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f04f 0100 	mov.w	r1, #0
 8008b52:	f04f 0200 	mov.w	r2, #0
 8008b56:	f04f 0300 	mov.w	r3, #0
 8008b5a:	008b      	lsls	r3, r1, #2
 8008b5c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008b60:	0082      	lsls	r2, r0, #2
 8008b62:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008b66:	f7f7 fb8b 	bl	8000280 <__aeabi_uldivmod>
 8008b6a:	4602      	mov	r2, r0
 8008b6c:	460b      	mov	r3, r1
 8008b6e:	4b2f      	ldr	r3, [pc, #188]	; (8008c2c <UART_SetConfig+0x38c>)
 8008b70:	fba3 1302 	umull	r1, r3, r3, r2
 8008b74:	095b      	lsrs	r3, r3, #5
 8008b76:	2164      	movs	r1, #100	; 0x64
 8008b78:	fb01 f303 	mul.w	r3, r1, r3
 8008b7c:	1ad3      	subs	r3, r2, r3
 8008b7e:	011b      	lsls	r3, r3, #4
 8008b80:	3332      	adds	r3, #50	; 0x32
 8008b82:	4a2a      	ldr	r2, [pc, #168]	; (8008c2c <UART_SetConfig+0x38c>)
 8008b84:	fba2 2303 	umull	r2, r3, r2, r3
 8008b88:	095b      	lsrs	r3, r3, #5
 8008b8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008b8e:	441e      	add	r6, r3
 8008b90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b92:	4618      	mov	r0, r3
 8008b94:	f04f 0100 	mov.w	r1, #0
 8008b98:	4602      	mov	r2, r0
 8008b9a:	460b      	mov	r3, r1
 8008b9c:	1894      	adds	r4, r2, r2
 8008b9e:	603c      	str	r4, [r7, #0]
 8008ba0:	415b      	adcs	r3, r3
 8008ba2:	607b      	str	r3, [r7, #4]
 8008ba4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ba8:	1812      	adds	r2, r2, r0
 8008baa:	eb41 0303 	adc.w	r3, r1, r3
 8008bae:	f04f 0400 	mov.w	r4, #0
 8008bb2:	f04f 0500 	mov.w	r5, #0
 8008bb6:	00dd      	lsls	r5, r3, #3
 8008bb8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008bbc:	00d4      	lsls	r4, r2, #3
 8008bbe:	4622      	mov	r2, r4
 8008bc0:	462b      	mov	r3, r5
 8008bc2:	eb12 0a00 	adds.w	sl, r2, r0
 8008bc6:	eb43 0b01 	adc.w	fp, r3, r1
 8008bca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f04f 0100 	mov.w	r1, #0
 8008bd4:	f04f 0200 	mov.w	r2, #0
 8008bd8:	f04f 0300 	mov.w	r3, #0
 8008bdc:	008b      	lsls	r3, r1, #2
 8008bde:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008be2:	0082      	lsls	r2, r0, #2
 8008be4:	4650      	mov	r0, sl
 8008be6:	4659      	mov	r1, fp
 8008be8:	f7f7 fb4a 	bl	8000280 <__aeabi_uldivmod>
 8008bec:	4602      	mov	r2, r0
 8008bee:	460b      	mov	r3, r1
 8008bf0:	4b0e      	ldr	r3, [pc, #56]	; (8008c2c <UART_SetConfig+0x38c>)
 8008bf2:	fba3 1302 	umull	r1, r3, r3, r2
 8008bf6:	095b      	lsrs	r3, r3, #5
 8008bf8:	2164      	movs	r1, #100	; 0x64
 8008bfa:	fb01 f303 	mul.w	r3, r1, r3
 8008bfe:	1ad3      	subs	r3, r2, r3
 8008c00:	011b      	lsls	r3, r3, #4
 8008c02:	3332      	adds	r3, #50	; 0x32
 8008c04:	4a09      	ldr	r2, [pc, #36]	; (8008c2c <UART_SetConfig+0x38c>)
 8008c06:	fba2 2303 	umull	r2, r3, r2, r3
 8008c0a:	095b      	lsrs	r3, r3, #5
 8008c0c:	f003 020f 	and.w	r2, r3, #15
 8008c10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	4432      	add	r2, r6
 8008c16:	609a      	str	r2, [r3, #8]
}
 8008c18:	bf00      	nop
 8008c1a:	377c      	adds	r7, #124	; 0x7c
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c22:	bf00      	nop
 8008c24:	40011000 	.word	0x40011000
 8008c28:	40011400 	.word	0x40011400
 8008c2c:	51eb851f 	.word	0x51eb851f

08008c30 <__errno>:
 8008c30:	4b01      	ldr	r3, [pc, #4]	; (8008c38 <__errno+0x8>)
 8008c32:	6818      	ldr	r0, [r3, #0]
 8008c34:	4770      	bx	lr
 8008c36:	bf00      	nop
 8008c38:	20000020 	.word	0x20000020

08008c3c <__libc_init_array>:
 8008c3c:	b570      	push	{r4, r5, r6, lr}
 8008c3e:	4d0d      	ldr	r5, [pc, #52]	; (8008c74 <__libc_init_array+0x38>)
 8008c40:	4c0d      	ldr	r4, [pc, #52]	; (8008c78 <__libc_init_array+0x3c>)
 8008c42:	1b64      	subs	r4, r4, r5
 8008c44:	10a4      	asrs	r4, r4, #2
 8008c46:	2600      	movs	r6, #0
 8008c48:	42a6      	cmp	r6, r4
 8008c4a:	d109      	bne.n	8008c60 <__libc_init_array+0x24>
 8008c4c:	4d0b      	ldr	r5, [pc, #44]	; (8008c7c <__libc_init_array+0x40>)
 8008c4e:	4c0c      	ldr	r4, [pc, #48]	; (8008c80 <__libc_init_array+0x44>)
 8008c50:	f001 f858 	bl	8009d04 <_init>
 8008c54:	1b64      	subs	r4, r4, r5
 8008c56:	10a4      	asrs	r4, r4, #2
 8008c58:	2600      	movs	r6, #0
 8008c5a:	42a6      	cmp	r6, r4
 8008c5c:	d105      	bne.n	8008c6a <__libc_init_array+0x2e>
 8008c5e:	bd70      	pop	{r4, r5, r6, pc}
 8008c60:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c64:	4798      	blx	r3
 8008c66:	3601      	adds	r6, #1
 8008c68:	e7ee      	b.n	8008c48 <__libc_init_array+0xc>
 8008c6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c6e:	4798      	blx	r3
 8008c70:	3601      	adds	r6, #1
 8008c72:	e7f2      	b.n	8008c5a <__libc_init_array+0x1e>
 8008c74:	080123d4 	.word	0x080123d4
 8008c78:	080123d4 	.word	0x080123d4
 8008c7c:	080123d4 	.word	0x080123d4
 8008c80:	080123d8 	.word	0x080123d8

08008c84 <memcpy>:
 8008c84:	440a      	add	r2, r1
 8008c86:	4291      	cmp	r1, r2
 8008c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c8c:	d100      	bne.n	8008c90 <memcpy+0xc>
 8008c8e:	4770      	bx	lr
 8008c90:	b510      	push	{r4, lr}
 8008c92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c9a:	4291      	cmp	r1, r2
 8008c9c:	d1f9      	bne.n	8008c92 <memcpy+0xe>
 8008c9e:	bd10      	pop	{r4, pc}

08008ca0 <memset>:
 8008ca0:	4402      	add	r2, r0
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d100      	bne.n	8008caa <memset+0xa>
 8008ca8:	4770      	bx	lr
 8008caa:	f803 1b01 	strb.w	r1, [r3], #1
 8008cae:	e7f9      	b.n	8008ca4 <memset+0x4>

08008cb0 <iprintf>:
 8008cb0:	b40f      	push	{r0, r1, r2, r3}
 8008cb2:	4b0a      	ldr	r3, [pc, #40]	; (8008cdc <iprintf+0x2c>)
 8008cb4:	b513      	push	{r0, r1, r4, lr}
 8008cb6:	681c      	ldr	r4, [r3, #0]
 8008cb8:	b124      	cbz	r4, 8008cc4 <iprintf+0x14>
 8008cba:	69a3      	ldr	r3, [r4, #24]
 8008cbc:	b913      	cbnz	r3, 8008cc4 <iprintf+0x14>
 8008cbe:	4620      	mov	r0, r4
 8008cc0:	f000 fa74 	bl	80091ac <__sinit>
 8008cc4:	ab05      	add	r3, sp, #20
 8008cc6:	9a04      	ldr	r2, [sp, #16]
 8008cc8:	68a1      	ldr	r1, [r4, #8]
 8008cca:	9301      	str	r3, [sp, #4]
 8008ccc:	4620      	mov	r0, r4
 8008cce:	f000 fc45 	bl	800955c <_vfiprintf_r>
 8008cd2:	b002      	add	sp, #8
 8008cd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cd8:	b004      	add	sp, #16
 8008cda:	4770      	bx	lr
 8008cdc:	20000020 	.word	0x20000020

08008ce0 <putchar>:
 8008ce0:	4b09      	ldr	r3, [pc, #36]	; (8008d08 <putchar+0x28>)
 8008ce2:	b513      	push	{r0, r1, r4, lr}
 8008ce4:	681c      	ldr	r4, [r3, #0]
 8008ce6:	4601      	mov	r1, r0
 8008ce8:	b134      	cbz	r4, 8008cf8 <putchar+0x18>
 8008cea:	69a3      	ldr	r3, [r4, #24]
 8008cec:	b923      	cbnz	r3, 8008cf8 <putchar+0x18>
 8008cee:	9001      	str	r0, [sp, #4]
 8008cf0:	4620      	mov	r0, r4
 8008cf2:	f000 fa5b 	bl	80091ac <__sinit>
 8008cf6:	9901      	ldr	r1, [sp, #4]
 8008cf8:	68a2      	ldr	r2, [r4, #8]
 8008cfa:	4620      	mov	r0, r4
 8008cfc:	b002      	add	sp, #8
 8008cfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d02:	f000 beef 	b.w	8009ae4 <_putc_r>
 8008d06:	bf00      	nop
 8008d08:	20000020 	.word	0x20000020

08008d0c <_puts_r>:
 8008d0c:	b570      	push	{r4, r5, r6, lr}
 8008d0e:	460e      	mov	r6, r1
 8008d10:	4605      	mov	r5, r0
 8008d12:	b118      	cbz	r0, 8008d1c <_puts_r+0x10>
 8008d14:	6983      	ldr	r3, [r0, #24]
 8008d16:	b90b      	cbnz	r3, 8008d1c <_puts_r+0x10>
 8008d18:	f000 fa48 	bl	80091ac <__sinit>
 8008d1c:	69ab      	ldr	r3, [r5, #24]
 8008d1e:	68ac      	ldr	r4, [r5, #8]
 8008d20:	b913      	cbnz	r3, 8008d28 <_puts_r+0x1c>
 8008d22:	4628      	mov	r0, r5
 8008d24:	f000 fa42 	bl	80091ac <__sinit>
 8008d28:	4b2c      	ldr	r3, [pc, #176]	; (8008ddc <_puts_r+0xd0>)
 8008d2a:	429c      	cmp	r4, r3
 8008d2c:	d120      	bne.n	8008d70 <_puts_r+0x64>
 8008d2e:	686c      	ldr	r4, [r5, #4]
 8008d30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d32:	07db      	lsls	r3, r3, #31
 8008d34:	d405      	bmi.n	8008d42 <_puts_r+0x36>
 8008d36:	89a3      	ldrh	r3, [r4, #12]
 8008d38:	0598      	lsls	r0, r3, #22
 8008d3a:	d402      	bmi.n	8008d42 <_puts_r+0x36>
 8008d3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d3e:	f000 fad3 	bl	80092e8 <__retarget_lock_acquire_recursive>
 8008d42:	89a3      	ldrh	r3, [r4, #12]
 8008d44:	0719      	lsls	r1, r3, #28
 8008d46:	d51d      	bpl.n	8008d84 <_puts_r+0x78>
 8008d48:	6923      	ldr	r3, [r4, #16]
 8008d4a:	b1db      	cbz	r3, 8008d84 <_puts_r+0x78>
 8008d4c:	3e01      	subs	r6, #1
 8008d4e:	68a3      	ldr	r3, [r4, #8]
 8008d50:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008d54:	3b01      	subs	r3, #1
 8008d56:	60a3      	str	r3, [r4, #8]
 8008d58:	bb39      	cbnz	r1, 8008daa <_puts_r+0x9e>
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	da38      	bge.n	8008dd0 <_puts_r+0xc4>
 8008d5e:	4622      	mov	r2, r4
 8008d60:	210a      	movs	r1, #10
 8008d62:	4628      	mov	r0, r5
 8008d64:	f000 f848 	bl	8008df8 <__swbuf_r>
 8008d68:	3001      	adds	r0, #1
 8008d6a:	d011      	beq.n	8008d90 <_puts_r+0x84>
 8008d6c:	250a      	movs	r5, #10
 8008d6e:	e011      	b.n	8008d94 <_puts_r+0x88>
 8008d70:	4b1b      	ldr	r3, [pc, #108]	; (8008de0 <_puts_r+0xd4>)
 8008d72:	429c      	cmp	r4, r3
 8008d74:	d101      	bne.n	8008d7a <_puts_r+0x6e>
 8008d76:	68ac      	ldr	r4, [r5, #8]
 8008d78:	e7da      	b.n	8008d30 <_puts_r+0x24>
 8008d7a:	4b1a      	ldr	r3, [pc, #104]	; (8008de4 <_puts_r+0xd8>)
 8008d7c:	429c      	cmp	r4, r3
 8008d7e:	bf08      	it	eq
 8008d80:	68ec      	ldreq	r4, [r5, #12]
 8008d82:	e7d5      	b.n	8008d30 <_puts_r+0x24>
 8008d84:	4621      	mov	r1, r4
 8008d86:	4628      	mov	r0, r5
 8008d88:	f000 f888 	bl	8008e9c <__swsetup_r>
 8008d8c:	2800      	cmp	r0, #0
 8008d8e:	d0dd      	beq.n	8008d4c <_puts_r+0x40>
 8008d90:	f04f 35ff 	mov.w	r5, #4294967295
 8008d94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d96:	07da      	lsls	r2, r3, #31
 8008d98:	d405      	bmi.n	8008da6 <_puts_r+0x9a>
 8008d9a:	89a3      	ldrh	r3, [r4, #12]
 8008d9c:	059b      	lsls	r3, r3, #22
 8008d9e:	d402      	bmi.n	8008da6 <_puts_r+0x9a>
 8008da0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008da2:	f000 faa2 	bl	80092ea <__retarget_lock_release_recursive>
 8008da6:	4628      	mov	r0, r5
 8008da8:	bd70      	pop	{r4, r5, r6, pc}
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	da04      	bge.n	8008db8 <_puts_r+0xac>
 8008dae:	69a2      	ldr	r2, [r4, #24]
 8008db0:	429a      	cmp	r2, r3
 8008db2:	dc06      	bgt.n	8008dc2 <_puts_r+0xb6>
 8008db4:	290a      	cmp	r1, #10
 8008db6:	d004      	beq.n	8008dc2 <_puts_r+0xb6>
 8008db8:	6823      	ldr	r3, [r4, #0]
 8008dba:	1c5a      	adds	r2, r3, #1
 8008dbc:	6022      	str	r2, [r4, #0]
 8008dbe:	7019      	strb	r1, [r3, #0]
 8008dc0:	e7c5      	b.n	8008d4e <_puts_r+0x42>
 8008dc2:	4622      	mov	r2, r4
 8008dc4:	4628      	mov	r0, r5
 8008dc6:	f000 f817 	bl	8008df8 <__swbuf_r>
 8008dca:	3001      	adds	r0, #1
 8008dcc:	d1bf      	bne.n	8008d4e <_puts_r+0x42>
 8008dce:	e7df      	b.n	8008d90 <_puts_r+0x84>
 8008dd0:	6823      	ldr	r3, [r4, #0]
 8008dd2:	250a      	movs	r5, #10
 8008dd4:	1c5a      	adds	r2, r3, #1
 8008dd6:	6022      	str	r2, [r4, #0]
 8008dd8:	701d      	strb	r5, [r3, #0]
 8008dda:	e7db      	b.n	8008d94 <_puts_r+0x88>
 8008ddc:	08012358 	.word	0x08012358
 8008de0:	08012378 	.word	0x08012378
 8008de4:	08012338 	.word	0x08012338

08008de8 <puts>:
 8008de8:	4b02      	ldr	r3, [pc, #8]	; (8008df4 <puts+0xc>)
 8008dea:	4601      	mov	r1, r0
 8008dec:	6818      	ldr	r0, [r3, #0]
 8008dee:	f7ff bf8d 	b.w	8008d0c <_puts_r>
 8008df2:	bf00      	nop
 8008df4:	20000020 	.word	0x20000020

08008df8 <__swbuf_r>:
 8008df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dfa:	460e      	mov	r6, r1
 8008dfc:	4614      	mov	r4, r2
 8008dfe:	4605      	mov	r5, r0
 8008e00:	b118      	cbz	r0, 8008e0a <__swbuf_r+0x12>
 8008e02:	6983      	ldr	r3, [r0, #24]
 8008e04:	b90b      	cbnz	r3, 8008e0a <__swbuf_r+0x12>
 8008e06:	f000 f9d1 	bl	80091ac <__sinit>
 8008e0a:	4b21      	ldr	r3, [pc, #132]	; (8008e90 <__swbuf_r+0x98>)
 8008e0c:	429c      	cmp	r4, r3
 8008e0e:	d12b      	bne.n	8008e68 <__swbuf_r+0x70>
 8008e10:	686c      	ldr	r4, [r5, #4]
 8008e12:	69a3      	ldr	r3, [r4, #24]
 8008e14:	60a3      	str	r3, [r4, #8]
 8008e16:	89a3      	ldrh	r3, [r4, #12]
 8008e18:	071a      	lsls	r2, r3, #28
 8008e1a:	d52f      	bpl.n	8008e7c <__swbuf_r+0x84>
 8008e1c:	6923      	ldr	r3, [r4, #16]
 8008e1e:	b36b      	cbz	r3, 8008e7c <__swbuf_r+0x84>
 8008e20:	6923      	ldr	r3, [r4, #16]
 8008e22:	6820      	ldr	r0, [r4, #0]
 8008e24:	1ac0      	subs	r0, r0, r3
 8008e26:	6963      	ldr	r3, [r4, #20]
 8008e28:	b2f6      	uxtb	r6, r6
 8008e2a:	4283      	cmp	r3, r0
 8008e2c:	4637      	mov	r7, r6
 8008e2e:	dc04      	bgt.n	8008e3a <__swbuf_r+0x42>
 8008e30:	4621      	mov	r1, r4
 8008e32:	4628      	mov	r0, r5
 8008e34:	f000 f926 	bl	8009084 <_fflush_r>
 8008e38:	bb30      	cbnz	r0, 8008e88 <__swbuf_r+0x90>
 8008e3a:	68a3      	ldr	r3, [r4, #8]
 8008e3c:	3b01      	subs	r3, #1
 8008e3e:	60a3      	str	r3, [r4, #8]
 8008e40:	6823      	ldr	r3, [r4, #0]
 8008e42:	1c5a      	adds	r2, r3, #1
 8008e44:	6022      	str	r2, [r4, #0]
 8008e46:	701e      	strb	r6, [r3, #0]
 8008e48:	6963      	ldr	r3, [r4, #20]
 8008e4a:	3001      	adds	r0, #1
 8008e4c:	4283      	cmp	r3, r0
 8008e4e:	d004      	beq.n	8008e5a <__swbuf_r+0x62>
 8008e50:	89a3      	ldrh	r3, [r4, #12]
 8008e52:	07db      	lsls	r3, r3, #31
 8008e54:	d506      	bpl.n	8008e64 <__swbuf_r+0x6c>
 8008e56:	2e0a      	cmp	r6, #10
 8008e58:	d104      	bne.n	8008e64 <__swbuf_r+0x6c>
 8008e5a:	4621      	mov	r1, r4
 8008e5c:	4628      	mov	r0, r5
 8008e5e:	f000 f911 	bl	8009084 <_fflush_r>
 8008e62:	b988      	cbnz	r0, 8008e88 <__swbuf_r+0x90>
 8008e64:	4638      	mov	r0, r7
 8008e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e68:	4b0a      	ldr	r3, [pc, #40]	; (8008e94 <__swbuf_r+0x9c>)
 8008e6a:	429c      	cmp	r4, r3
 8008e6c:	d101      	bne.n	8008e72 <__swbuf_r+0x7a>
 8008e6e:	68ac      	ldr	r4, [r5, #8]
 8008e70:	e7cf      	b.n	8008e12 <__swbuf_r+0x1a>
 8008e72:	4b09      	ldr	r3, [pc, #36]	; (8008e98 <__swbuf_r+0xa0>)
 8008e74:	429c      	cmp	r4, r3
 8008e76:	bf08      	it	eq
 8008e78:	68ec      	ldreq	r4, [r5, #12]
 8008e7a:	e7ca      	b.n	8008e12 <__swbuf_r+0x1a>
 8008e7c:	4621      	mov	r1, r4
 8008e7e:	4628      	mov	r0, r5
 8008e80:	f000 f80c 	bl	8008e9c <__swsetup_r>
 8008e84:	2800      	cmp	r0, #0
 8008e86:	d0cb      	beq.n	8008e20 <__swbuf_r+0x28>
 8008e88:	f04f 37ff 	mov.w	r7, #4294967295
 8008e8c:	e7ea      	b.n	8008e64 <__swbuf_r+0x6c>
 8008e8e:	bf00      	nop
 8008e90:	08012358 	.word	0x08012358
 8008e94:	08012378 	.word	0x08012378
 8008e98:	08012338 	.word	0x08012338

08008e9c <__swsetup_r>:
 8008e9c:	4b32      	ldr	r3, [pc, #200]	; (8008f68 <__swsetup_r+0xcc>)
 8008e9e:	b570      	push	{r4, r5, r6, lr}
 8008ea0:	681d      	ldr	r5, [r3, #0]
 8008ea2:	4606      	mov	r6, r0
 8008ea4:	460c      	mov	r4, r1
 8008ea6:	b125      	cbz	r5, 8008eb2 <__swsetup_r+0x16>
 8008ea8:	69ab      	ldr	r3, [r5, #24]
 8008eaa:	b913      	cbnz	r3, 8008eb2 <__swsetup_r+0x16>
 8008eac:	4628      	mov	r0, r5
 8008eae:	f000 f97d 	bl	80091ac <__sinit>
 8008eb2:	4b2e      	ldr	r3, [pc, #184]	; (8008f6c <__swsetup_r+0xd0>)
 8008eb4:	429c      	cmp	r4, r3
 8008eb6:	d10f      	bne.n	8008ed8 <__swsetup_r+0x3c>
 8008eb8:	686c      	ldr	r4, [r5, #4]
 8008eba:	89a3      	ldrh	r3, [r4, #12]
 8008ebc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ec0:	0719      	lsls	r1, r3, #28
 8008ec2:	d42c      	bmi.n	8008f1e <__swsetup_r+0x82>
 8008ec4:	06dd      	lsls	r5, r3, #27
 8008ec6:	d411      	bmi.n	8008eec <__swsetup_r+0x50>
 8008ec8:	2309      	movs	r3, #9
 8008eca:	6033      	str	r3, [r6, #0]
 8008ecc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008ed0:	81a3      	strh	r3, [r4, #12]
 8008ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ed6:	e03e      	b.n	8008f56 <__swsetup_r+0xba>
 8008ed8:	4b25      	ldr	r3, [pc, #148]	; (8008f70 <__swsetup_r+0xd4>)
 8008eda:	429c      	cmp	r4, r3
 8008edc:	d101      	bne.n	8008ee2 <__swsetup_r+0x46>
 8008ede:	68ac      	ldr	r4, [r5, #8]
 8008ee0:	e7eb      	b.n	8008eba <__swsetup_r+0x1e>
 8008ee2:	4b24      	ldr	r3, [pc, #144]	; (8008f74 <__swsetup_r+0xd8>)
 8008ee4:	429c      	cmp	r4, r3
 8008ee6:	bf08      	it	eq
 8008ee8:	68ec      	ldreq	r4, [r5, #12]
 8008eea:	e7e6      	b.n	8008eba <__swsetup_r+0x1e>
 8008eec:	0758      	lsls	r0, r3, #29
 8008eee:	d512      	bpl.n	8008f16 <__swsetup_r+0x7a>
 8008ef0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ef2:	b141      	cbz	r1, 8008f06 <__swsetup_r+0x6a>
 8008ef4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ef8:	4299      	cmp	r1, r3
 8008efa:	d002      	beq.n	8008f02 <__swsetup_r+0x66>
 8008efc:	4630      	mov	r0, r6
 8008efe:	f000 fa59 	bl	80093b4 <_free_r>
 8008f02:	2300      	movs	r3, #0
 8008f04:	6363      	str	r3, [r4, #52]	; 0x34
 8008f06:	89a3      	ldrh	r3, [r4, #12]
 8008f08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008f0c:	81a3      	strh	r3, [r4, #12]
 8008f0e:	2300      	movs	r3, #0
 8008f10:	6063      	str	r3, [r4, #4]
 8008f12:	6923      	ldr	r3, [r4, #16]
 8008f14:	6023      	str	r3, [r4, #0]
 8008f16:	89a3      	ldrh	r3, [r4, #12]
 8008f18:	f043 0308 	orr.w	r3, r3, #8
 8008f1c:	81a3      	strh	r3, [r4, #12]
 8008f1e:	6923      	ldr	r3, [r4, #16]
 8008f20:	b94b      	cbnz	r3, 8008f36 <__swsetup_r+0x9a>
 8008f22:	89a3      	ldrh	r3, [r4, #12]
 8008f24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008f28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f2c:	d003      	beq.n	8008f36 <__swsetup_r+0x9a>
 8008f2e:	4621      	mov	r1, r4
 8008f30:	4630      	mov	r0, r6
 8008f32:	f000 f9ff 	bl	8009334 <__smakebuf_r>
 8008f36:	89a0      	ldrh	r0, [r4, #12]
 8008f38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f3c:	f010 0301 	ands.w	r3, r0, #1
 8008f40:	d00a      	beq.n	8008f58 <__swsetup_r+0xbc>
 8008f42:	2300      	movs	r3, #0
 8008f44:	60a3      	str	r3, [r4, #8]
 8008f46:	6963      	ldr	r3, [r4, #20]
 8008f48:	425b      	negs	r3, r3
 8008f4a:	61a3      	str	r3, [r4, #24]
 8008f4c:	6923      	ldr	r3, [r4, #16]
 8008f4e:	b943      	cbnz	r3, 8008f62 <__swsetup_r+0xc6>
 8008f50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008f54:	d1ba      	bne.n	8008ecc <__swsetup_r+0x30>
 8008f56:	bd70      	pop	{r4, r5, r6, pc}
 8008f58:	0781      	lsls	r1, r0, #30
 8008f5a:	bf58      	it	pl
 8008f5c:	6963      	ldrpl	r3, [r4, #20]
 8008f5e:	60a3      	str	r3, [r4, #8]
 8008f60:	e7f4      	b.n	8008f4c <__swsetup_r+0xb0>
 8008f62:	2000      	movs	r0, #0
 8008f64:	e7f7      	b.n	8008f56 <__swsetup_r+0xba>
 8008f66:	bf00      	nop
 8008f68:	20000020 	.word	0x20000020
 8008f6c:	08012358 	.word	0x08012358
 8008f70:	08012378 	.word	0x08012378
 8008f74:	08012338 	.word	0x08012338

08008f78 <__sflush_r>:
 8008f78:	898a      	ldrh	r2, [r1, #12]
 8008f7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f7e:	4605      	mov	r5, r0
 8008f80:	0710      	lsls	r0, r2, #28
 8008f82:	460c      	mov	r4, r1
 8008f84:	d458      	bmi.n	8009038 <__sflush_r+0xc0>
 8008f86:	684b      	ldr	r3, [r1, #4]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	dc05      	bgt.n	8008f98 <__sflush_r+0x20>
 8008f8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	dc02      	bgt.n	8008f98 <__sflush_r+0x20>
 8008f92:	2000      	movs	r0, #0
 8008f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f9a:	2e00      	cmp	r6, #0
 8008f9c:	d0f9      	beq.n	8008f92 <__sflush_r+0x1a>
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008fa4:	682f      	ldr	r7, [r5, #0]
 8008fa6:	602b      	str	r3, [r5, #0]
 8008fa8:	d032      	beq.n	8009010 <__sflush_r+0x98>
 8008faa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008fac:	89a3      	ldrh	r3, [r4, #12]
 8008fae:	075a      	lsls	r2, r3, #29
 8008fb0:	d505      	bpl.n	8008fbe <__sflush_r+0x46>
 8008fb2:	6863      	ldr	r3, [r4, #4]
 8008fb4:	1ac0      	subs	r0, r0, r3
 8008fb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008fb8:	b10b      	cbz	r3, 8008fbe <__sflush_r+0x46>
 8008fba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008fbc:	1ac0      	subs	r0, r0, r3
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008fc4:	6a21      	ldr	r1, [r4, #32]
 8008fc6:	4628      	mov	r0, r5
 8008fc8:	47b0      	blx	r6
 8008fca:	1c43      	adds	r3, r0, #1
 8008fcc:	89a3      	ldrh	r3, [r4, #12]
 8008fce:	d106      	bne.n	8008fde <__sflush_r+0x66>
 8008fd0:	6829      	ldr	r1, [r5, #0]
 8008fd2:	291d      	cmp	r1, #29
 8008fd4:	d82c      	bhi.n	8009030 <__sflush_r+0xb8>
 8008fd6:	4a2a      	ldr	r2, [pc, #168]	; (8009080 <__sflush_r+0x108>)
 8008fd8:	40ca      	lsrs	r2, r1
 8008fda:	07d6      	lsls	r6, r2, #31
 8008fdc:	d528      	bpl.n	8009030 <__sflush_r+0xb8>
 8008fde:	2200      	movs	r2, #0
 8008fe0:	6062      	str	r2, [r4, #4]
 8008fe2:	04d9      	lsls	r1, r3, #19
 8008fe4:	6922      	ldr	r2, [r4, #16]
 8008fe6:	6022      	str	r2, [r4, #0]
 8008fe8:	d504      	bpl.n	8008ff4 <__sflush_r+0x7c>
 8008fea:	1c42      	adds	r2, r0, #1
 8008fec:	d101      	bne.n	8008ff2 <__sflush_r+0x7a>
 8008fee:	682b      	ldr	r3, [r5, #0]
 8008ff0:	b903      	cbnz	r3, 8008ff4 <__sflush_r+0x7c>
 8008ff2:	6560      	str	r0, [r4, #84]	; 0x54
 8008ff4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ff6:	602f      	str	r7, [r5, #0]
 8008ff8:	2900      	cmp	r1, #0
 8008ffa:	d0ca      	beq.n	8008f92 <__sflush_r+0x1a>
 8008ffc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009000:	4299      	cmp	r1, r3
 8009002:	d002      	beq.n	800900a <__sflush_r+0x92>
 8009004:	4628      	mov	r0, r5
 8009006:	f000 f9d5 	bl	80093b4 <_free_r>
 800900a:	2000      	movs	r0, #0
 800900c:	6360      	str	r0, [r4, #52]	; 0x34
 800900e:	e7c1      	b.n	8008f94 <__sflush_r+0x1c>
 8009010:	6a21      	ldr	r1, [r4, #32]
 8009012:	2301      	movs	r3, #1
 8009014:	4628      	mov	r0, r5
 8009016:	47b0      	blx	r6
 8009018:	1c41      	adds	r1, r0, #1
 800901a:	d1c7      	bne.n	8008fac <__sflush_r+0x34>
 800901c:	682b      	ldr	r3, [r5, #0]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d0c4      	beq.n	8008fac <__sflush_r+0x34>
 8009022:	2b1d      	cmp	r3, #29
 8009024:	d001      	beq.n	800902a <__sflush_r+0xb2>
 8009026:	2b16      	cmp	r3, #22
 8009028:	d101      	bne.n	800902e <__sflush_r+0xb6>
 800902a:	602f      	str	r7, [r5, #0]
 800902c:	e7b1      	b.n	8008f92 <__sflush_r+0x1a>
 800902e:	89a3      	ldrh	r3, [r4, #12]
 8009030:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009034:	81a3      	strh	r3, [r4, #12]
 8009036:	e7ad      	b.n	8008f94 <__sflush_r+0x1c>
 8009038:	690f      	ldr	r7, [r1, #16]
 800903a:	2f00      	cmp	r7, #0
 800903c:	d0a9      	beq.n	8008f92 <__sflush_r+0x1a>
 800903e:	0793      	lsls	r3, r2, #30
 8009040:	680e      	ldr	r6, [r1, #0]
 8009042:	bf08      	it	eq
 8009044:	694b      	ldreq	r3, [r1, #20]
 8009046:	600f      	str	r7, [r1, #0]
 8009048:	bf18      	it	ne
 800904a:	2300      	movne	r3, #0
 800904c:	eba6 0807 	sub.w	r8, r6, r7
 8009050:	608b      	str	r3, [r1, #8]
 8009052:	f1b8 0f00 	cmp.w	r8, #0
 8009056:	dd9c      	ble.n	8008f92 <__sflush_r+0x1a>
 8009058:	6a21      	ldr	r1, [r4, #32]
 800905a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800905c:	4643      	mov	r3, r8
 800905e:	463a      	mov	r2, r7
 8009060:	4628      	mov	r0, r5
 8009062:	47b0      	blx	r6
 8009064:	2800      	cmp	r0, #0
 8009066:	dc06      	bgt.n	8009076 <__sflush_r+0xfe>
 8009068:	89a3      	ldrh	r3, [r4, #12]
 800906a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800906e:	81a3      	strh	r3, [r4, #12]
 8009070:	f04f 30ff 	mov.w	r0, #4294967295
 8009074:	e78e      	b.n	8008f94 <__sflush_r+0x1c>
 8009076:	4407      	add	r7, r0
 8009078:	eba8 0800 	sub.w	r8, r8, r0
 800907c:	e7e9      	b.n	8009052 <__sflush_r+0xda>
 800907e:	bf00      	nop
 8009080:	20400001 	.word	0x20400001

08009084 <_fflush_r>:
 8009084:	b538      	push	{r3, r4, r5, lr}
 8009086:	690b      	ldr	r3, [r1, #16]
 8009088:	4605      	mov	r5, r0
 800908a:	460c      	mov	r4, r1
 800908c:	b913      	cbnz	r3, 8009094 <_fflush_r+0x10>
 800908e:	2500      	movs	r5, #0
 8009090:	4628      	mov	r0, r5
 8009092:	bd38      	pop	{r3, r4, r5, pc}
 8009094:	b118      	cbz	r0, 800909e <_fflush_r+0x1a>
 8009096:	6983      	ldr	r3, [r0, #24]
 8009098:	b90b      	cbnz	r3, 800909e <_fflush_r+0x1a>
 800909a:	f000 f887 	bl	80091ac <__sinit>
 800909e:	4b14      	ldr	r3, [pc, #80]	; (80090f0 <_fflush_r+0x6c>)
 80090a0:	429c      	cmp	r4, r3
 80090a2:	d11b      	bne.n	80090dc <_fflush_r+0x58>
 80090a4:	686c      	ldr	r4, [r5, #4]
 80090a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d0ef      	beq.n	800908e <_fflush_r+0xa>
 80090ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80090b0:	07d0      	lsls	r0, r2, #31
 80090b2:	d404      	bmi.n	80090be <_fflush_r+0x3a>
 80090b4:	0599      	lsls	r1, r3, #22
 80090b6:	d402      	bmi.n	80090be <_fflush_r+0x3a>
 80090b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090ba:	f000 f915 	bl	80092e8 <__retarget_lock_acquire_recursive>
 80090be:	4628      	mov	r0, r5
 80090c0:	4621      	mov	r1, r4
 80090c2:	f7ff ff59 	bl	8008f78 <__sflush_r>
 80090c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80090c8:	07da      	lsls	r2, r3, #31
 80090ca:	4605      	mov	r5, r0
 80090cc:	d4e0      	bmi.n	8009090 <_fflush_r+0xc>
 80090ce:	89a3      	ldrh	r3, [r4, #12]
 80090d0:	059b      	lsls	r3, r3, #22
 80090d2:	d4dd      	bmi.n	8009090 <_fflush_r+0xc>
 80090d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090d6:	f000 f908 	bl	80092ea <__retarget_lock_release_recursive>
 80090da:	e7d9      	b.n	8009090 <_fflush_r+0xc>
 80090dc:	4b05      	ldr	r3, [pc, #20]	; (80090f4 <_fflush_r+0x70>)
 80090de:	429c      	cmp	r4, r3
 80090e0:	d101      	bne.n	80090e6 <_fflush_r+0x62>
 80090e2:	68ac      	ldr	r4, [r5, #8]
 80090e4:	e7df      	b.n	80090a6 <_fflush_r+0x22>
 80090e6:	4b04      	ldr	r3, [pc, #16]	; (80090f8 <_fflush_r+0x74>)
 80090e8:	429c      	cmp	r4, r3
 80090ea:	bf08      	it	eq
 80090ec:	68ec      	ldreq	r4, [r5, #12]
 80090ee:	e7da      	b.n	80090a6 <_fflush_r+0x22>
 80090f0:	08012358 	.word	0x08012358
 80090f4:	08012378 	.word	0x08012378
 80090f8:	08012338 	.word	0x08012338

080090fc <std>:
 80090fc:	2300      	movs	r3, #0
 80090fe:	b510      	push	{r4, lr}
 8009100:	4604      	mov	r4, r0
 8009102:	e9c0 3300 	strd	r3, r3, [r0]
 8009106:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800910a:	6083      	str	r3, [r0, #8]
 800910c:	8181      	strh	r1, [r0, #12]
 800910e:	6643      	str	r3, [r0, #100]	; 0x64
 8009110:	81c2      	strh	r2, [r0, #14]
 8009112:	6183      	str	r3, [r0, #24]
 8009114:	4619      	mov	r1, r3
 8009116:	2208      	movs	r2, #8
 8009118:	305c      	adds	r0, #92	; 0x5c
 800911a:	f7ff fdc1 	bl	8008ca0 <memset>
 800911e:	4b05      	ldr	r3, [pc, #20]	; (8009134 <std+0x38>)
 8009120:	6263      	str	r3, [r4, #36]	; 0x24
 8009122:	4b05      	ldr	r3, [pc, #20]	; (8009138 <std+0x3c>)
 8009124:	62a3      	str	r3, [r4, #40]	; 0x28
 8009126:	4b05      	ldr	r3, [pc, #20]	; (800913c <std+0x40>)
 8009128:	62e3      	str	r3, [r4, #44]	; 0x2c
 800912a:	4b05      	ldr	r3, [pc, #20]	; (8009140 <std+0x44>)
 800912c:	6224      	str	r4, [r4, #32]
 800912e:	6323      	str	r3, [r4, #48]	; 0x30
 8009130:	bd10      	pop	{r4, pc}
 8009132:	bf00      	nop
 8009134:	08009b95 	.word	0x08009b95
 8009138:	08009bb7 	.word	0x08009bb7
 800913c:	08009bef 	.word	0x08009bef
 8009140:	08009c13 	.word	0x08009c13

08009144 <_cleanup_r>:
 8009144:	4901      	ldr	r1, [pc, #4]	; (800914c <_cleanup_r+0x8>)
 8009146:	f000 b8af 	b.w	80092a8 <_fwalk_reent>
 800914a:	bf00      	nop
 800914c:	08009085 	.word	0x08009085

08009150 <__sfmoreglue>:
 8009150:	b570      	push	{r4, r5, r6, lr}
 8009152:	1e4a      	subs	r2, r1, #1
 8009154:	2568      	movs	r5, #104	; 0x68
 8009156:	4355      	muls	r5, r2
 8009158:	460e      	mov	r6, r1
 800915a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800915e:	f000 f979 	bl	8009454 <_malloc_r>
 8009162:	4604      	mov	r4, r0
 8009164:	b140      	cbz	r0, 8009178 <__sfmoreglue+0x28>
 8009166:	2100      	movs	r1, #0
 8009168:	e9c0 1600 	strd	r1, r6, [r0]
 800916c:	300c      	adds	r0, #12
 800916e:	60a0      	str	r0, [r4, #8]
 8009170:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009174:	f7ff fd94 	bl	8008ca0 <memset>
 8009178:	4620      	mov	r0, r4
 800917a:	bd70      	pop	{r4, r5, r6, pc}

0800917c <__sfp_lock_acquire>:
 800917c:	4801      	ldr	r0, [pc, #4]	; (8009184 <__sfp_lock_acquire+0x8>)
 800917e:	f000 b8b3 	b.w	80092e8 <__retarget_lock_acquire_recursive>
 8009182:	bf00      	nop
 8009184:	20000584 	.word	0x20000584

08009188 <__sfp_lock_release>:
 8009188:	4801      	ldr	r0, [pc, #4]	; (8009190 <__sfp_lock_release+0x8>)
 800918a:	f000 b8ae 	b.w	80092ea <__retarget_lock_release_recursive>
 800918e:	bf00      	nop
 8009190:	20000584 	.word	0x20000584

08009194 <__sinit_lock_acquire>:
 8009194:	4801      	ldr	r0, [pc, #4]	; (800919c <__sinit_lock_acquire+0x8>)
 8009196:	f000 b8a7 	b.w	80092e8 <__retarget_lock_acquire_recursive>
 800919a:	bf00      	nop
 800919c:	2000057f 	.word	0x2000057f

080091a0 <__sinit_lock_release>:
 80091a0:	4801      	ldr	r0, [pc, #4]	; (80091a8 <__sinit_lock_release+0x8>)
 80091a2:	f000 b8a2 	b.w	80092ea <__retarget_lock_release_recursive>
 80091a6:	bf00      	nop
 80091a8:	2000057f 	.word	0x2000057f

080091ac <__sinit>:
 80091ac:	b510      	push	{r4, lr}
 80091ae:	4604      	mov	r4, r0
 80091b0:	f7ff fff0 	bl	8009194 <__sinit_lock_acquire>
 80091b4:	69a3      	ldr	r3, [r4, #24]
 80091b6:	b11b      	cbz	r3, 80091c0 <__sinit+0x14>
 80091b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091bc:	f7ff bff0 	b.w	80091a0 <__sinit_lock_release>
 80091c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80091c4:	6523      	str	r3, [r4, #80]	; 0x50
 80091c6:	4b13      	ldr	r3, [pc, #76]	; (8009214 <__sinit+0x68>)
 80091c8:	4a13      	ldr	r2, [pc, #76]	; (8009218 <__sinit+0x6c>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80091ce:	42a3      	cmp	r3, r4
 80091d0:	bf04      	itt	eq
 80091d2:	2301      	moveq	r3, #1
 80091d4:	61a3      	streq	r3, [r4, #24]
 80091d6:	4620      	mov	r0, r4
 80091d8:	f000 f820 	bl	800921c <__sfp>
 80091dc:	6060      	str	r0, [r4, #4]
 80091de:	4620      	mov	r0, r4
 80091e0:	f000 f81c 	bl	800921c <__sfp>
 80091e4:	60a0      	str	r0, [r4, #8]
 80091e6:	4620      	mov	r0, r4
 80091e8:	f000 f818 	bl	800921c <__sfp>
 80091ec:	2200      	movs	r2, #0
 80091ee:	60e0      	str	r0, [r4, #12]
 80091f0:	2104      	movs	r1, #4
 80091f2:	6860      	ldr	r0, [r4, #4]
 80091f4:	f7ff ff82 	bl	80090fc <std>
 80091f8:	68a0      	ldr	r0, [r4, #8]
 80091fa:	2201      	movs	r2, #1
 80091fc:	2109      	movs	r1, #9
 80091fe:	f7ff ff7d 	bl	80090fc <std>
 8009202:	68e0      	ldr	r0, [r4, #12]
 8009204:	2202      	movs	r2, #2
 8009206:	2112      	movs	r1, #18
 8009208:	f7ff ff78 	bl	80090fc <std>
 800920c:	2301      	movs	r3, #1
 800920e:	61a3      	str	r3, [r4, #24]
 8009210:	e7d2      	b.n	80091b8 <__sinit+0xc>
 8009212:	bf00      	nop
 8009214:	08012334 	.word	0x08012334
 8009218:	08009145 	.word	0x08009145

0800921c <__sfp>:
 800921c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800921e:	4607      	mov	r7, r0
 8009220:	f7ff ffac 	bl	800917c <__sfp_lock_acquire>
 8009224:	4b1e      	ldr	r3, [pc, #120]	; (80092a0 <__sfp+0x84>)
 8009226:	681e      	ldr	r6, [r3, #0]
 8009228:	69b3      	ldr	r3, [r6, #24]
 800922a:	b913      	cbnz	r3, 8009232 <__sfp+0x16>
 800922c:	4630      	mov	r0, r6
 800922e:	f7ff ffbd 	bl	80091ac <__sinit>
 8009232:	3648      	adds	r6, #72	; 0x48
 8009234:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009238:	3b01      	subs	r3, #1
 800923a:	d503      	bpl.n	8009244 <__sfp+0x28>
 800923c:	6833      	ldr	r3, [r6, #0]
 800923e:	b30b      	cbz	r3, 8009284 <__sfp+0x68>
 8009240:	6836      	ldr	r6, [r6, #0]
 8009242:	e7f7      	b.n	8009234 <__sfp+0x18>
 8009244:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009248:	b9d5      	cbnz	r5, 8009280 <__sfp+0x64>
 800924a:	4b16      	ldr	r3, [pc, #88]	; (80092a4 <__sfp+0x88>)
 800924c:	60e3      	str	r3, [r4, #12]
 800924e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009252:	6665      	str	r5, [r4, #100]	; 0x64
 8009254:	f000 f847 	bl	80092e6 <__retarget_lock_init_recursive>
 8009258:	f7ff ff96 	bl	8009188 <__sfp_lock_release>
 800925c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009260:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009264:	6025      	str	r5, [r4, #0]
 8009266:	61a5      	str	r5, [r4, #24]
 8009268:	2208      	movs	r2, #8
 800926a:	4629      	mov	r1, r5
 800926c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009270:	f7ff fd16 	bl	8008ca0 <memset>
 8009274:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009278:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800927c:	4620      	mov	r0, r4
 800927e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009280:	3468      	adds	r4, #104	; 0x68
 8009282:	e7d9      	b.n	8009238 <__sfp+0x1c>
 8009284:	2104      	movs	r1, #4
 8009286:	4638      	mov	r0, r7
 8009288:	f7ff ff62 	bl	8009150 <__sfmoreglue>
 800928c:	4604      	mov	r4, r0
 800928e:	6030      	str	r0, [r6, #0]
 8009290:	2800      	cmp	r0, #0
 8009292:	d1d5      	bne.n	8009240 <__sfp+0x24>
 8009294:	f7ff ff78 	bl	8009188 <__sfp_lock_release>
 8009298:	230c      	movs	r3, #12
 800929a:	603b      	str	r3, [r7, #0]
 800929c:	e7ee      	b.n	800927c <__sfp+0x60>
 800929e:	bf00      	nop
 80092a0:	08012334 	.word	0x08012334
 80092a4:	ffff0001 	.word	0xffff0001

080092a8 <_fwalk_reent>:
 80092a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092ac:	4606      	mov	r6, r0
 80092ae:	4688      	mov	r8, r1
 80092b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80092b4:	2700      	movs	r7, #0
 80092b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80092ba:	f1b9 0901 	subs.w	r9, r9, #1
 80092be:	d505      	bpl.n	80092cc <_fwalk_reent+0x24>
 80092c0:	6824      	ldr	r4, [r4, #0]
 80092c2:	2c00      	cmp	r4, #0
 80092c4:	d1f7      	bne.n	80092b6 <_fwalk_reent+0xe>
 80092c6:	4638      	mov	r0, r7
 80092c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092cc:	89ab      	ldrh	r3, [r5, #12]
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	d907      	bls.n	80092e2 <_fwalk_reent+0x3a>
 80092d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80092d6:	3301      	adds	r3, #1
 80092d8:	d003      	beq.n	80092e2 <_fwalk_reent+0x3a>
 80092da:	4629      	mov	r1, r5
 80092dc:	4630      	mov	r0, r6
 80092de:	47c0      	blx	r8
 80092e0:	4307      	orrs	r7, r0
 80092e2:	3568      	adds	r5, #104	; 0x68
 80092e4:	e7e9      	b.n	80092ba <_fwalk_reent+0x12>

080092e6 <__retarget_lock_init_recursive>:
 80092e6:	4770      	bx	lr

080092e8 <__retarget_lock_acquire_recursive>:
 80092e8:	4770      	bx	lr

080092ea <__retarget_lock_release_recursive>:
 80092ea:	4770      	bx	lr

080092ec <__swhatbuf_r>:
 80092ec:	b570      	push	{r4, r5, r6, lr}
 80092ee:	460e      	mov	r6, r1
 80092f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092f4:	2900      	cmp	r1, #0
 80092f6:	b096      	sub	sp, #88	; 0x58
 80092f8:	4614      	mov	r4, r2
 80092fa:	461d      	mov	r5, r3
 80092fc:	da07      	bge.n	800930e <__swhatbuf_r+0x22>
 80092fe:	2300      	movs	r3, #0
 8009300:	602b      	str	r3, [r5, #0]
 8009302:	89b3      	ldrh	r3, [r6, #12]
 8009304:	061a      	lsls	r2, r3, #24
 8009306:	d410      	bmi.n	800932a <__swhatbuf_r+0x3e>
 8009308:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800930c:	e00e      	b.n	800932c <__swhatbuf_r+0x40>
 800930e:	466a      	mov	r2, sp
 8009310:	f000 fca6 	bl	8009c60 <_fstat_r>
 8009314:	2800      	cmp	r0, #0
 8009316:	dbf2      	blt.n	80092fe <__swhatbuf_r+0x12>
 8009318:	9a01      	ldr	r2, [sp, #4]
 800931a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800931e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009322:	425a      	negs	r2, r3
 8009324:	415a      	adcs	r2, r3
 8009326:	602a      	str	r2, [r5, #0]
 8009328:	e7ee      	b.n	8009308 <__swhatbuf_r+0x1c>
 800932a:	2340      	movs	r3, #64	; 0x40
 800932c:	2000      	movs	r0, #0
 800932e:	6023      	str	r3, [r4, #0]
 8009330:	b016      	add	sp, #88	; 0x58
 8009332:	bd70      	pop	{r4, r5, r6, pc}

08009334 <__smakebuf_r>:
 8009334:	898b      	ldrh	r3, [r1, #12]
 8009336:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009338:	079d      	lsls	r5, r3, #30
 800933a:	4606      	mov	r6, r0
 800933c:	460c      	mov	r4, r1
 800933e:	d507      	bpl.n	8009350 <__smakebuf_r+0x1c>
 8009340:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009344:	6023      	str	r3, [r4, #0]
 8009346:	6123      	str	r3, [r4, #16]
 8009348:	2301      	movs	r3, #1
 800934a:	6163      	str	r3, [r4, #20]
 800934c:	b002      	add	sp, #8
 800934e:	bd70      	pop	{r4, r5, r6, pc}
 8009350:	ab01      	add	r3, sp, #4
 8009352:	466a      	mov	r2, sp
 8009354:	f7ff ffca 	bl	80092ec <__swhatbuf_r>
 8009358:	9900      	ldr	r1, [sp, #0]
 800935a:	4605      	mov	r5, r0
 800935c:	4630      	mov	r0, r6
 800935e:	f000 f879 	bl	8009454 <_malloc_r>
 8009362:	b948      	cbnz	r0, 8009378 <__smakebuf_r+0x44>
 8009364:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009368:	059a      	lsls	r2, r3, #22
 800936a:	d4ef      	bmi.n	800934c <__smakebuf_r+0x18>
 800936c:	f023 0303 	bic.w	r3, r3, #3
 8009370:	f043 0302 	orr.w	r3, r3, #2
 8009374:	81a3      	strh	r3, [r4, #12]
 8009376:	e7e3      	b.n	8009340 <__smakebuf_r+0xc>
 8009378:	4b0d      	ldr	r3, [pc, #52]	; (80093b0 <__smakebuf_r+0x7c>)
 800937a:	62b3      	str	r3, [r6, #40]	; 0x28
 800937c:	89a3      	ldrh	r3, [r4, #12]
 800937e:	6020      	str	r0, [r4, #0]
 8009380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009384:	81a3      	strh	r3, [r4, #12]
 8009386:	9b00      	ldr	r3, [sp, #0]
 8009388:	6163      	str	r3, [r4, #20]
 800938a:	9b01      	ldr	r3, [sp, #4]
 800938c:	6120      	str	r0, [r4, #16]
 800938e:	b15b      	cbz	r3, 80093a8 <__smakebuf_r+0x74>
 8009390:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009394:	4630      	mov	r0, r6
 8009396:	f000 fc75 	bl	8009c84 <_isatty_r>
 800939a:	b128      	cbz	r0, 80093a8 <__smakebuf_r+0x74>
 800939c:	89a3      	ldrh	r3, [r4, #12]
 800939e:	f023 0303 	bic.w	r3, r3, #3
 80093a2:	f043 0301 	orr.w	r3, r3, #1
 80093a6:	81a3      	strh	r3, [r4, #12]
 80093a8:	89a0      	ldrh	r0, [r4, #12]
 80093aa:	4305      	orrs	r5, r0
 80093ac:	81a5      	strh	r5, [r4, #12]
 80093ae:	e7cd      	b.n	800934c <__smakebuf_r+0x18>
 80093b0:	08009145 	.word	0x08009145

080093b4 <_free_r>:
 80093b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80093b6:	2900      	cmp	r1, #0
 80093b8:	d048      	beq.n	800944c <_free_r+0x98>
 80093ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093be:	9001      	str	r0, [sp, #4]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	f1a1 0404 	sub.w	r4, r1, #4
 80093c6:	bfb8      	it	lt
 80093c8:	18e4      	addlt	r4, r4, r3
 80093ca:	f000 fc7d 	bl	8009cc8 <__malloc_lock>
 80093ce:	4a20      	ldr	r2, [pc, #128]	; (8009450 <_free_r+0x9c>)
 80093d0:	9801      	ldr	r0, [sp, #4]
 80093d2:	6813      	ldr	r3, [r2, #0]
 80093d4:	4615      	mov	r5, r2
 80093d6:	b933      	cbnz	r3, 80093e6 <_free_r+0x32>
 80093d8:	6063      	str	r3, [r4, #4]
 80093da:	6014      	str	r4, [r2, #0]
 80093dc:	b003      	add	sp, #12
 80093de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80093e2:	f000 bc77 	b.w	8009cd4 <__malloc_unlock>
 80093e6:	42a3      	cmp	r3, r4
 80093e8:	d90b      	bls.n	8009402 <_free_r+0x4e>
 80093ea:	6821      	ldr	r1, [r4, #0]
 80093ec:	1862      	adds	r2, r4, r1
 80093ee:	4293      	cmp	r3, r2
 80093f0:	bf04      	itt	eq
 80093f2:	681a      	ldreq	r2, [r3, #0]
 80093f4:	685b      	ldreq	r3, [r3, #4]
 80093f6:	6063      	str	r3, [r4, #4]
 80093f8:	bf04      	itt	eq
 80093fa:	1852      	addeq	r2, r2, r1
 80093fc:	6022      	streq	r2, [r4, #0]
 80093fe:	602c      	str	r4, [r5, #0]
 8009400:	e7ec      	b.n	80093dc <_free_r+0x28>
 8009402:	461a      	mov	r2, r3
 8009404:	685b      	ldr	r3, [r3, #4]
 8009406:	b10b      	cbz	r3, 800940c <_free_r+0x58>
 8009408:	42a3      	cmp	r3, r4
 800940a:	d9fa      	bls.n	8009402 <_free_r+0x4e>
 800940c:	6811      	ldr	r1, [r2, #0]
 800940e:	1855      	adds	r5, r2, r1
 8009410:	42a5      	cmp	r5, r4
 8009412:	d10b      	bne.n	800942c <_free_r+0x78>
 8009414:	6824      	ldr	r4, [r4, #0]
 8009416:	4421      	add	r1, r4
 8009418:	1854      	adds	r4, r2, r1
 800941a:	42a3      	cmp	r3, r4
 800941c:	6011      	str	r1, [r2, #0]
 800941e:	d1dd      	bne.n	80093dc <_free_r+0x28>
 8009420:	681c      	ldr	r4, [r3, #0]
 8009422:	685b      	ldr	r3, [r3, #4]
 8009424:	6053      	str	r3, [r2, #4]
 8009426:	4421      	add	r1, r4
 8009428:	6011      	str	r1, [r2, #0]
 800942a:	e7d7      	b.n	80093dc <_free_r+0x28>
 800942c:	d902      	bls.n	8009434 <_free_r+0x80>
 800942e:	230c      	movs	r3, #12
 8009430:	6003      	str	r3, [r0, #0]
 8009432:	e7d3      	b.n	80093dc <_free_r+0x28>
 8009434:	6825      	ldr	r5, [r4, #0]
 8009436:	1961      	adds	r1, r4, r5
 8009438:	428b      	cmp	r3, r1
 800943a:	bf04      	itt	eq
 800943c:	6819      	ldreq	r1, [r3, #0]
 800943e:	685b      	ldreq	r3, [r3, #4]
 8009440:	6063      	str	r3, [r4, #4]
 8009442:	bf04      	itt	eq
 8009444:	1949      	addeq	r1, r1, r5
 8009446:	6021      	streq	r1, [r4, #0]
 8009448:	6054      	str	r4, [r2, #4]
 800944a:	e7c7      	b.n	80093dc <_free_r+0x28>
 800944c:	b003      	add	sp, #12
 800944e:	bd30      	pop	{r4, r5, pc}
 8009450:	200000d4 	.word	0x200000d4

08009454 <_malloc_r>:
 8009454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009456:	1ccd      	adds	r5, r1, #3
 8009458:	f025 0503 	bic.w	r5, r5, #3
 800945c:	3508      	adds	r5, #8
 800945e:	2d0c      	cmp	r5, #12
 8009460:	bf38      	it	cc
 8009462:	250c      	movcc	r5, #12
 8009464:	2d00      	cmp	r5, #0
 8009466:	4606      	mov	r6, r0
 8009468:	db01      	blt.n	800946e <_malloc_r+0x1a>
 800946a:	42a9      	cmp	r1, r5
 800946c:	d903      	bls.n	8009476 <_malloc_r+0x22>
 800946e:	230c      	movs	r3, #12
 8009470:	6033      	str	r3, [r6, #0]
 8009472:	2000      	movs	r0, #0
 8009474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009476:	f000 fc27 	bl	8009cc8 <__malloc_lock>
 800947a:	4921      	ldr	r1, [pc, #132]	; (8009500 <_malloc_r+0xac>)
 800947c:	680a      	ldr	r2, [r1, #0]
 800947e:	4614      	mov	r4, r2
 8009480:	b99c      	cbnz	r4, 80094aa <_malloc_r+0x56>
 8009482:	4f20      	ldr	r7, [pc, #128]	; (8009504 <_malloc_r+0xb0>)
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	b923      	cbnz	r3, 8009492 <_malloc_r+0x3e>
 8009488:	4621      	mov	r1, r4
 800948a:	4630      	mov	r0, r6
 800948c:	f000 fb72 	bl	8009b74 <_sbrk_r>
 8009490:	6038      	str	r0, [r7, #0]
 8009492:	4629      	mov	r1, r5
 8009494:	4630      	mov	r0, r6
 8009496:	f000 fb6d 	bl	8009b74 <_sbrk_r>
 800949a:	1c43      	adds	r3, r0, #1
 800949c:	d123      	bne.n	80094e6 <_malloc_r+0x92>
 800949e:	230c      	movs	r3, #12
 80094a0:	6033      	str	r3, [r6, #0]
 80094a2:	4630      	mov	r0, r6
 80094a4:	f000 fc16 	bl	8009cd4 <__malloc_unlock>
 80094a8:	e7e3      	b.n	8009472 <_malloc_r+0x1e>
 80094aa:	6823      	ldr	r3, [r4, #0]
 80094ac:	1b5b      	subs	r3, r3, r5
 80094ae:	d417      	bmi.n	80094e0 <_malloc_r+0x8c>
 80094b0:	2b0b      	cmp	r3, #11
 80094b2:	d903      	bls.n	80094bc <_malloc_r+0x68>
 80094b4:	6023      	str	r3, [r4, #0]
 80094b6:	441c      	add	r4, r3
 80094b8:	6025      	str	r5, [r4, #0]
 80094ba:	e004      	b.n	80094c6 <_malloc_r+0x72>
 80094bc:	6863      	ldr	r3, [r4, #4]
 80094be:	42a2      	cmp	r2, r4
 80094c0:	bf0c      	ite	eq
 80094c2:	600b      	streq	r3, [r1, #0]
 80094c4:	6053      	strne	r3, [r2, #4]
 80094c6:	4630      	mov	r0, r6
 80094c8:	f000 fc04 	bl	8009cd4 <__malloc_unlock>
 80094cc:	f104 000b 	add.w	r0, r4, #11
 80094d0:	1d23      	adds	r3, r4, #4
 80094d2:	f020 0007 	bic.w	r0, r0, #7
 80094d6:	1ac2      	subs	r2, r0, r3
 80094d8:	d0cc      	beq.n	8009474 <_malloc_r+0x20>
 80094da:	1a1b      	subs	r3, r3, r0
 80094dc:	50a3      	str	r3, [r4, r2]
 80094de:	e7c9      	b.n	8009474 <_malloc_r+0x20>
 80094e0:	4622      	mov	r2, r4
 80094e2:	6864      	ldr	r4, [r4, #4]
 80094e4:	e7cc      	b.n	8009480 <_malloc_r+0x2c>
 80094e6:	1cc4      	adds	r4, r0, #3
 80094e8:	f024 0403 	bic.w	r4, r4, #3
 80094ec:	42a0      	cmp	r0, r4
 80094ee:	d0e3      	beq.n	80094b8 <_malloc_r+0x64>
 80094f0:	1a21      	subs	r1, r4, r0
 80094f2:	4630      	mov	r0, r6
 80094f4:	f000 fb3e 	bl	8009b74 <_sbrk_r>
 80094f8:	3001      	adds	r0, #1
 80094fa:	d1dd      	bne.n	80094b8 <_malloc_r+0x64>
 80094fc:	e7cf      	b.n	800949e <_malloc_r+0x4a>
 80094fe:	bf00      	nop
 8009500:	200000d4 	.word	0x200000d4
 8009504:	200000d8 	.word	0x200000d8

08009508 <__sfputc_r>:
 8009508:	6893      	ldr	r3, [r2, #8]
 800950a:	3b01      	subs	r3, #1
 800950c:	2b00      	cmp	r3, #0
 800950e:	b410      	push	{r4}
 8009510:	6093      	str	r3, [r2, #8]
 8009512:	da08      	bge.n	8009526 <__sfputc_r+0x1e>
 8009514:	6994      	ldr	r4, [r2, #24]
 8009516:	42a3      	cmp	r3, r4
 8009518:	db01      	blt.n	800951e <__sfputc_r+0x16>
 800951a:	290a      	cmp	r1, #10
 800951c:	d103      	bne.n	8009526 <__sfputc_r+0x1e>
 800951e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009522:	f7ff bc69 	b.w	8008df8 <__swbuf_r>
 8009526:	6813      	ldr	r3, [r2, #0]
 8009528:	1c58      	adds	r0, r3, #1
 800952a:	6010      	str	r0, [r2, #0]
 800952c:	7019      	strb	r1, [r3, #0]
 800952e:	4608      	mov	r0, r1
 8009530:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009534:	4770      	bx	lr

08009536 <__sfputs_r>:
 8009536:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009538:	4606      	mov	r6, r0
 800953a:	460f      	mov	r7, r1
 800953c:	4614      	mov	r4, r2
 800953e:	18d5      	adds	r5, r2, r3
 8009540:	42ac      	cmp	r4, r5
 8009542:	d101      	bne.n	8009548 <__sfputs_r+0x12>
 8009544:	2000      	movs	r0, #0
 8009546:	e007      	b.n	8009558 <__sfputs_r+0x22>
 8009548:	f814 1b01 	ldrb.w	r1, [r4], #1
 800954c:	463a      	mov	r2, r7
 800954e:	4630      	mov	r0, r6
 8009550:	f7ff ffda 	bl	8009508 <__sfputc_r>
 8009554:	1c43      	adds	r3, r0, #1
 8009556:	d1f3      	bne.n	8009540 <__sfputs_r+0xa>
 8009558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800955c <_vfiprintf_r>:
 800955c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009560:	460d      	mov	r5, r1
 8009562:	b09d      	sub	sp, #116	; 0x74
 8009564:	4614      	mov	r4, r2
 8009566:	4698      	mov	r8, r3
 8009568:	4606      	mov	r6, r0
 800956a:	b118      	cbz	r0, 8009574 <_vfiprintf_r+0x18>
 800956c:	6983      	ldr	r3, [r0, #24]
 800956e:	b90b      	cbnz	r3, 8009574 <_vfiprintf_r+0x18>
 8009570:	f7ff fe1c 	bl	80091ac <__sinit>
 8009574:	4b89      	ldr	r3, [pc, #548]	; (800979c <_vfiprintf_r+0x240>)
 8009576:	429d      	cmp	r5, r3
 8009578:	d11b      	bne.n	80095b2 <_vfiprintf_r+0x56>
 800957a:	6875      	ldr	r5, [r6, #4]
 800957c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800957e:	07d9      	lsls	r1, r3, #31
 8009580:	d405      	bmi.n	800958e <_vfiprintf_r+0x32>
 8009582:	89ab      	ldrh	r3, [r5, #12]
 8009584:	059a      	lsls	r2, r3, #22
 8009586:	d402      	bmi.n	800958e <_vfiprintf_r+0x32>
 8009588:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800958a:	f7ff fead 	bl	80092e8 <__retarget_lock_acquire_recursive>
 800958e:	89ab      	ldrh	r3, [r5, #12]
 8009590:	071b      	lsls	r3, r3, #28
 8009592:	d501      	bpl.n	8009598 <_vfiprintf_r+0x3c>
 8009594:	692b      	ldr	r3, [r5, #16]
 8009596:	b9eb      	cbnz	r3, 80095d4 <_vfiprintf_r+0x78>
 8009598:	4629      	mov	r1, r5
 800959a:	4630      	mov	r0, r6
 800959c:	f7ff fc7e 	bl	8008e9c <__swsetup_r>
 80095a0:	b1c0      	cbz	r0, 80095d4 <_vfiprintf_r+0x78>
 80095a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095a4:	07dc      	lsls	r4, r3, #31
 80095a6:	d50e      	bpl.n	80095c6 <_vfiprintf_r+0x6a>
 80095a8:	f04f 30ff 	mov.w	r0, #4294967295
 80095ac:	b01d      	add	sp, #116	; 0x74
 80095ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095b2:	4b7b      	ldr	r3, [pc, #492]	; (80097a0 <_vfiprintf_r+0x244>)
 80095b4:	429d      	cmp	r5, r3
 80095b6:	d101      	bne.n	80095bc <_vfiprintf_r+0x60>
 80095b8:	68b5      	ldr	r5, [r6, #8]
 80095ba:	e7df      	b.n	800957c <_vfiprintf_r+0x20>
 80095bc:	4b79      	ldr	r3, [pc, #484]	; (80097a4 <_vfiprintf_r+0x248>)
 80095be:	429d      	cmp	r5, r3
 80095c0:	bf08      	it	eq
 80095c2:	68f5      	ldreq	r5, [r6, #12]
 80095c4:	e7da      	b.n	800957c <_vfiprintf_r+0x20>
 80095c6:	89ab      	ldrh	r3, [r5, #12]
 80095c8:	0598      	lsls	r0, r3, #22
 80095ca:	d4ed      	bmi.n	80095a8 <_vfiprintf_r+0x4c>
 80095cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80095ce:	f7ff fe8c 	bl	80092ea <__retarget_lock_release_recursive>
 80095d2:	e7e9      	b.n	80095a8 <_vfiprintf_r+0x4c>
 80095d4:	2300      	movs	r3, #0
 80095d6:	9309      	str	r3, [sp, #36]	; 0x24
 80095d8:	2320      	movs	r3, #32
 80095da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80095de:	f8cd 800c 	str.w	r8, [sp, #12]
 80095e2:	2330      	movs	r3, #48	; 0x30
 80095e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80097a8 <_vfiprintf_r+0x24c>
 80095e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80095ec:	f04f 0901 	mov.w	r9, #1
 80095f0:	4623      	mov	r3, r4
 80095f2:	469a      	mov	sl, r3
 80095f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095f8:	b10a      	cbz	r2, 80095fe <_vfiprintf_r+0xa2>
 80095fa:	2a25      	cmp	r2, #37	; 0x25
 80095fc:	d1f9      	bne.n	80095f2 <_vfiprintf_r+0x96>
 80095fe:	ebba 0b04 	subs.w	fp, sl, r4
 8009602:	d00b      	beq.n	800961c <_vfiprintf_r+0xc0>
 8009604:	465b      	mov	r3, fp
 8009606:	4622      	mov	r2, r4
 8009608:	4629      	mov	r1, r5
 800960a:	4630      	mov	r0, r6
 800960c:	f7ff ff93 	bl	8009536 <__sfputs_r>
 8009610:	3001      	adds	r0, #1
 8009612:	f000 80aa 	beq.w	800976a <_vfiprintf_r+0x20e>
 8009616:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009618:	445a      	add	r2, fp
 800961a:	9209      	str	r2, [sp, #36]	; 0x24
 800961c:	f89a 3000 	ldrb.w	r3, [sl]
 8009620:	2b00      	cmp	r3, #0
 8009622:	f000 80a2 	beq.w	800976a <_vfiprintf_r+0x20e>
 8009626:	2300      	movs	r3, #0
 8009628:	f04f 32ff 	mov.w	r2, #4294967295
 800962c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009630:	f10a 0a01 	add.w	sl, sl, #1
 8009634:	9304      	str	r3, [sp, #16]
 8009636:	9307      	str	r3, [sp, #28]
 8009638:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800963c:	931a      	str	r3, [sp, #104]	; 0x68
 800963e:	4654      	mov	r4, sl
 8009640:	2205      	movs	r2, #5
 8009642:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009646:	4858      	ldr	r0, [pc, #352]	; (80097a8 <_vfiprintf_r+0x24c>)
 8009648:	f7f6 fdca 	bl	80001e0 <memchr>
 800964c:	9a04      	ldr	r2, [sp, #16]
 800964e:	b9d8      	cbnz	r0, 8009688 <_vfiprintf_r+0x12c>
 8009650:	06d1      	lsls	r1, r2, #27
 8009652:	bf44      	itt	mi
 8009654:	2320      	movmi	r3, #32
 8009656:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800965a:	0713      	lsls	r3, r2, #28
 800965c:	bf44      	itt	mi
 800965e:	232b      	movmi	r3, #43	; 0x2b
 8009660:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009664:	f89a 3000 	ldrb.w	r3, [sl]
 8009668:	2b2a      	cmp	r3, #42	; 0x2a
 800966a:	d015      	beq.n	8009698 <_vfiprintf_r+0x13c>
 800966c:	9a07      	ldr	r2, [sp, #28]
 800966e:	4654      	mov	r4, sl
 8009670:	2000      	movs	r0, #0
 8009672:	f04f 0c0a 	mov.w	ip, #10
 8009676:	4621      	mov	r1, r4
 8009678:	f811 3b01 	ldrb.w	r3, [r1], #1
 800967c:	3b30      	subs	r3, #48	; 0x30
 800967e:	2b09      	cmp	r3, #9
 8009680:	d94e      	bls.n	8009720 <_vfiprintf_r+0x1c4>
 8009682:	b1b0      	cbz	r0, 80096b2 <_vfiprintf_r+0x156>
 8009684:	9207      	str	r2, [sp, #28]
 8009686:	e014      	b.n	80096b2 <_vfiprintf_r+0x156>
 8009688:	eba0 0308 	sub.w	r3, r0, r8
 800968c:	fa09 f303 	lsl.w	r3, r9, r3
 8009690:	4313      	orrs	r3, r2
 8009692:	9304      	str	r3, [sp, #16]
 8009694:	46a2      	mov	sl, r4
 8009696:	e7d2      	b.n	800963e <_vfiprintf_r+0xe2>
 8009698:	9b03      	ldr	r3, [sp, #12]
 800969a:	1d19      	adds	r1, r3, #4
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	9103      	str	r1, [sp, #12]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	bfbb      	ittet	lt
 80096a4:	425b      	neglt	r3, r3
 80096a6:	f042 0202 	orrlt.w	r2, r2, #2
 80096aa:	9307      	strge	r3, [sp, #28]
 80096ac:	9307      	strlt	r3, [sp, #28]
 80096ae:	bfb8      	it	lt
 80096b0:	9204      	strlt	r2, [sp, #16]
 80096b2:	7823      	ldrb	r3, [r4, #0]
 80096b4:	2b2e      	cmp	r3, #46	; 0x2e
 80096b6:	d10c      	bne.n	80096d2 <_vfiprintf_r+0x176>
 80096b8:	7863      	ldrb	r3, [r4, #1]
 80096ba:	2b2a      	cmp	r3, #42	; 0x2a
 80096bc:	d135      	bne.n	800972a <_vfiprintf_r+0x1ce>
 80096be:	9b03      	ldr	r3, [sp, #12]
 80096c0:	1d1a      	adds	r2, r3, #4
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	9203      	str	r2, [sp, #12]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	bfb8      	it	lt
 80096ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80096ce:	3402      	adds	r4, #2
 80096d0:	9305      	str	r3, [sp, #20]
 80096d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80097b8 <_vfiprintf_r+0x25c>
 80096d6:	7821      	ldrb	r1, [r4, #0]
 80096d8:	2203      	movs	r2, #3
 80096da:	4650      	mov	r0, sl
 80096dc:	f7f6 fd80 	bl	80001e0 <memchr>
 80096e0:	b140      	cbz	r0, 80096f4 <_vfiprintf_r+0x198>
 80096e2:	2340      	movs	r3, #64	; 0x40
 80096e4:	eba0 000a 	sub.w	r0, r0, sl
 80096e8:	fa03 f000 	lsl.w	r0, r3, r0
 80096ec:	9b04      	ldr	r3, [sp, #16]
 80096ee:	4303      	orrs	r3, r0
 80096f0:	3401      	adds	r4, #1
 80096f2:	9304      	str	r3, [sp, #16]
 80096f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096f8:	482c      	ldr	r0, [pc, #176]	; (80097ac <_vfiprintf_r+0x250>)
 80096fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80096fe:	2206      	movs	r2, #6
 8009700:	f7f6 fd6e 	bl	80001e0 <memchr>
 8009704:	2800      	cmp	r0, #0
 8009706:	d03f      	beq.n	8009788 <_vfiprintf_r+0x22c>
 8009708:	4b29      	ldr	r3, [pc, #164]	; (80097b0 <_vfiprintf_r+0x254>)
 800970a:	bb1b      	cbnz	r3, 8009754 <_vfiprintf_r+0x1f8>
 800970c:	9b03      	ldr	r3, [sp, #12]
 800970e:	3307      	adds	r3, #7
 8009710:	f023 0307 	bic.w	r3, r3, #7
 8009714:	3308      	adds	r3, #8
 8009716:	9303      	str	r3, [sp, #12]
 8009718:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800971a:	443b      	add	r3, r7
 800971c:	9309      	str	r3, [sp, #36]	; 0x24
 800971e:	e767      	b.n	80095f0 <_vfiprintf_r+0x94>
 8009720:	fb0c 3202 	mla	r2, ip, r2, r3
 8009724:	460c      	mov	r4, r1
 8009726:	2001      	movs	r0, #1
 8009728:	e7a5      	b.n	8009676 <_vfiprintf_r+0x11a>
 800972a:	2300      	movs	r3, #0
 800972c:	3401      	adds	r4, #1
 800972e:	9305      	str	r3, [sp, #20]
 8009730:	4619      	mov	r1, r3
 8009732:	f04f 0c0a 	mov.w	ip, #10
 8009736:	4620      	mov	r0, r4
 8009738:	f810 2b01 	ldrb.w	r2, [r0], #1
 800973c:	3a30      	subs	r2, #48	; 0x30
 800973e:	2a09      	cmp	r2, #9
 8009740:	d903      	bls.n	800974a <_vfiprintf_r+0x1ee>
 8009742:	2b00      	cmp	r3, #0
 8009744:	d0c5      	beq.n	80096d2 <_vfiprintf_r+0x176>
 8009746:	9105      	str	r1, [sp, #20]
 8009748:	e7c3      	b.n	80096d2 <_vfiprintf_r+0x176>
 800974a:	fb0c 2101 	mla	r1, ip, r1, r2
 800974e:	4604      	mov	r4, r0
 8009750:	2301      	movs	r3, #1
 8009752:	e7f0      	b.n	8009736 <_vfiprintf_r+0x1da>
 8009754:	ab03      	add	r3, sp, #12
 8009756:	9300      	str	r3, [sp, #0]
 8009758:	462a      	mov	r2, r5
 800975a:	4b16      	ldr	r3, [pc, #88]	; (80097b4 <_vfiprintf_r+0x258>)
 800975c:	a904      	add	r1, sp, #16
 800975e:	4630      	mov	r0, r6
 8009760:	f3af 8000 	nop.w
 8009764:	4607      	mov	r7, r0
 8009766:	1c78      	adds	r0, r7, #1
 8009768:	d1d6      	bne.n	8009718 <_vfiprintf_r+0x1bc>
 800976a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800976c:	07d9      	lsls	r1, r3, #31
 800976e:	d405      	bmi.n	800977c <_vfiprintf_r+0x220>
 8009770:	89ab      	ldrh	r3, [r5, #12]
 8009772:	059a      	lsls	r2, r3, #22
 8009774:	d402      	bmi.n	800977c <_vfiprintf_r+0x220>
 8009776:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009778:	f7ff fdb7 	bl	80092ea <__retarget_lock_release_recursive>
 800977c:	89ab      	ldrh	r3, [r5, #12]
 800977e:	065b      	lsls	r3, r3, #25
 8009780:	f53f af12 	bmi.w	80095a8 <_vfiprintf_r+0x4c>
 8009784:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009786:	e711      	b.n	80095ac <_vfiprintf_r+0x50>
 8009788:	ab03      	add	r3, sp, #12
 800978a:	9300      	str	r3, [sp, #0]
 800978c:	462a      	mov	r2, r5
 800978e:	4b09      	ldr	r3, [pc, #36]	; (80097b4 <_vfiprintf_r+0x258>)
 8009790:	a904      	add	r1, sp, #16
 8009792:	4630      	mov	r0, r6
 8009794:	f000 f880 	bl	8009898 <_printf_i>
 8009798:	e7e4      	b.n	8009764 <_vfiprintf_r+0x208>
 800979a:	bf00      	nop
 800979c:	08012358 	.word	0x08012358
 80097a0:	08012378 	.word	0x08012378
 80097a4:	08012338 	.word	0x08012338
 80097a8:	08012398 	.word	0x08012398
 80097ac:	080123a2 	.word	0x080123a2
 80097b0:	00000000 	.word	0x00000000
 80097b4:	08009537 	.word	0x08009537
 80097b8:	0801239e 	.word	0x0801239e

080097bc <_printf_common>:
 80097bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097c0:	4616      	mov	r6, r2
 80097c2:	4699      	mov	r9, r3
 80097c4:	688a      	ldr	r2, [r1, #8]
 80097c6:	690b      	ldr	r3, [r1, #16]
 80097c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80097cc:	4293      	cmp	r3, r2
 80097ce:	bfb8      	it	lt
 80097d0:	4613      	movlt	r3, r2
 80097d2:	6033      	str	r3, [r6, #0]
 80097d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80097d8:	4607      	mov	r7, r0
 80097da:	460c      	mov	r4, r1
 80097dc:	b10a      	cbz	r2, 80097e2 <_printf_common+0x26>
 80097de:	3301      	adds	r3, #1
 80097e0:	6033      	str	r3, [r6, #0]
 80097e2:	6823      	ldr	r3, [r4, #0]
 80097e4:	0699      	lsls	r1, r3, #26
 80097e6:	bf42      	ittt	mi
 80097e8:	6833      	ldrmi	r3, [r6, #0]
 80097ea:	3302      	addmi	r3, #2
 80097ec:	6033      	strmi	r3, [r6, #0]
 80097ee:	6825      	ldr	r5, [r4, #0]
 80097f0:	f015 0506 	ands.w	r5, r5, #6
 80097f4:	d106      	bne.n	8009804 <_printf_common+0x48>
 80097f6:	f104 0a19 	add.w	sl, r4, #25
 80097fa:	68e3      	ldr	r3, [r4, #12]
 80097fc:	6832      	ldr	r2, [r6, #0]
 80097fe:	1a9b      	subs	r3, r3, r2
 8009800:	42ab      	cmp	r3, r5
 8009802:	dc26      	bgt.n	8009852 <_printf_common+0x96>
 8009804:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009808:	1e13      	subs	r3, r2, #0
 800980a:	6822      	ldr	r2, [r4, #0]
 800980c:	bf18      	it	ne
 800980e:	2301      	movne	r3, #1
 8009810:	0692      	lsls	r2, r2, #26
 8009812:	d42b      	bmi.n	800986c <_printf_common+0xb0>
 8009814:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009818:	4649      	mov	r1, r9
 800981a:	4638      	mov	r0, r7
 800981c:	47c0      	blx	r8
 800981e:	3001      	adds	r0, #1
 8009820:	d01e      	beq.n	8009860 <_printf_common+0xa4>
 8009822:	6823      	ldr	r3, [r4, #0]
 8009824:	68e5      	ldr	r5, [r4, #12]
 8009826:	6832      	ldr	r2, [r6, #0]
 8009828:	f003 0306 	and.w	r3, r3, #6
 800982c:	2b04      	cmp	r3, #4
 800982e:	bf08      	it	eq
 8009830:	1aad      	subeq	r5, r5, r2
 8009832:	68a3      	ldr	r3, [r4, #8]
 8009834:	6922      	ldr	r2, [r4, #16]
 8009836:	bf0c      	ite	eq
 8009838:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800983c:	2500      	movne	r5, #0
 800983e:	4293      	cmp	r3, r2
 8009840:	bfc4      	itt	gt
 8009842:	1a9b      	subgt	r3, r3, r2
 8009844:	18ed      	addgt	r5, r5, r3
 8009846:	2600      	movs	r6, #0
 8009848:	341a      	adds	r4, #26
 800984a:	42b5      	cmp	r5, r6
 800984c:	d11a      	bne.n	8009884 <_printf_common+0xc8>
 800984e:	2000      	movs	r0, #0
 8009850:	e008      	b.n	8009864 <_printf_common+0xa8>
 8009852:	2301      	movs	r3, #1
 8009854:	4652      	mov	r2, sl
 8009856:	4649      	mov	r1, r9
 8009858:	4638      	mov	r0, r7
 800985a:	47c0      	blx	r8
 800985c:	3001      	adds	r0, #1
 800985e:	d103      	bne.n	8009868 <_printf_common+0xac>
 8009860:	f04f 30ff 	mov.w	r0, #4294967295
 8009864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009868:	3501      	adds	r5, #1
 800986a:	e7c6      	b.n	80097fa <_printf_common+0x3e>
 800986c:	18e1      	adds	r1, r4, r3
 800986e:	1c5a      	adds	r2, r3, #1
 8009870:	2030      	movs	r0, #48	; 0x30
 8009872:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009876:	4422      	add	r2, r4
 8009878:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800987c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009880:	3302      	adds	r3, #2
 8009882:	e7c7      	b.n	8009814 <_printf_common+0x58>
 8009884:	2301      	movs	r3, #1
 8009886:	4622      	mov	r2, r4
 8009888:	4649      	mov	r1, r9
 800988a:	4638      	mov	r0, r7
 800988c:	47c0      	blx	r8
 800988e:	3001      	adds	r0, #1
 8009890:	d0e6      	beq.n	8009860 <_printf_common+0xa4>
 8009892:	3601      	adds	r6, #1
 8009894:	e7d9      	b.n	800984a <_printf_common+0x8e>
	...

08009898 <_printf_i>:
 8009898:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800989c:	460c      	mov	r4, r1
 800989e:	4691      	mov	r9, r2
 80098a0:	7e27      	ldrb	r7, [r4, #24]
 80098a2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80098a4:	2f78      	cmp	r7, #120	; 0x78
 80098a6:	4680      	mov	r8, r0
 80098a8:	469a      	mov	sl, r3
 80098aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80098ae:	d807      	bhi.n	80098c0 <_printf_i+0x28>
 80098b0:	2f62      	cmp	r7, #98	; 0x62
 80098b2:	d80a      	bhi.n	80098ca <_printf_i+0x32>
 80098b4:	2f00      	cmp	r7, #0
 80098b6:	f000 80d8 	beq.w	8009a6a <_printf_i+0x1d2>
 80098ba:	2f58      	cmp	r7, #88	; 0x58
 80098bc:	f000 80a3 	beq.w	8009a06 <_printf_i+0x16e>
 80098c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80098c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80098c8:	e03a      	b.n	8009940 <_printf_i+0xa8>
 80098ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80098ce:	2b15      	cmp	r3, #21
 80098d0:	d8f6      	bhi.n	80098c0 <_printf_i+0x28>
 80098d2:	a001      	add	r0, pc, #4	; (adr r0, 80098d8 <_printf_i+0x40>)
 80098d4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80098d8:	08009931 	.word	0x08009931
 80098dc:	08009945 	.word	0x08009945
 80098e0:	080098c1 	.word	0x080098c1
 80098e4:	080098c1 	.word	0x080098c1
 80098e8:	080098c1 	.word	0x080098c1
 80098ec:	080098c1 	.word	0x080098c1
 80098f0:	08009945 	.word	0x08009945
 80098f4:	080098c1 	.word	0x080098c1
 80098f8:	080098c1 	.word	0x080098c1
 80098fc:	080098c1 	.word	0x080098c1
 8009900:	080098c1 	.word	0x080098c1
 8009904:	08009a51 	.word	0x08009a51
 8009908:	08009975 	.word	0x08009975
 800990c:	08009a33 	.word	0x08009a33
 8009910:	080098c1 	.word	0x080098c1
 8009914:	080098c1 	.word	0x080098c1
 8009918:	08009a73 	.word	0x08009a73
 800991c:	080098c1 	.word	0x080098c1
 8009920:	08009975 	.word	0x08009975
 8009924:	080098c1 	.word	0x080098c1
 8009928:	080098c1 	.word	0x080098c1
 800992c:	08009a3b 	.word	0x08009a3b
 8009930:	680b      	ldr	r3, [r1, #0]
 8009932:	1d1a      	adds	r2, r3, #4
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	600a      	str	r2, [r1, #0]
 8009938:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800993c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009940:	2301      	movs	r3, #1
 8009942:	e0a3      	b.n	8009a8c <_printf_i+0x1f4>
 8009944:	6825      	ldr	r5, [r4, #0]
 8009946:	6808      	ldr	r0, [r1, #0]
 8009948:	062e      	lsls	r6, r5, #24
 800994a:	f100 0304 	add.w	r3, r0, #4
 800994e:	d50a      	bpl.n	8009966 <_printf_i+0xce>
 8009950:	6805      	ldr	r5, [r0, #0]
 8009952:	600b      	str	r3, [r1, #0]
 8009954:	2d00      	cmp	r5, #0
 8009956:	da03      	bge.n	8009960 <_printf_i+0xc8>
 8009958:	232d      	movs	r3, #45	; 0x2d
 800995a:	426d      	negs	r5, r5
 800995c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009960:	485e      	ldr	r0, [pc, #376]	; (8009adc <_printf_i+0x244>)
 8009962:	230a      	movs	r3, #10
 8009964:	e019      	b.n	800999a <_printf_i+0x102>
 8009966:	f015 0f40 	tst.w	r5, #64	; 0x40
 800996a:	6805      	ldr	r5, [r0, #0]
 800996c:	600b      	str	r3, [r1, #0]
 800996e:	bf18      	it	ne
 8009970:	b22d      	sxthne	r5, r5
 8009972:	e7ef      	b.n	8009954 <_printf_i+0xbc>
 8009974:	680b      	ldr	r3, [r1, #0]
 8009976:	6825      	ldr	r5, [r4, #0]
 8009978:	1d18      	adds	r0, r3, #4
 800997a:	6008      	str	r0, [r1, #0]
 800997c:	0628      	lsls	r0, r5, #24
 800997e:	d501      	bpl.n	8009984 <_printf_i+0xec>
 8009980:	681d      	ldr	r5, [r3, #0]
 8009982:	e002      	b.n	800998a <_printf_i+0xf2>
 8009984:	0669      	lsls	r1, r5, #25
 8009986:	d5fb      	bpl.n	8009980 <_printf_i+0xe8>
 8009988:	881d      	ldrh	r5, [r3, #0]
 800998a:	4854      	ldr	r0, [pc, #336]	; (8009adc <_printf_i+0x244>)
 800998c:	2f6f      	cmp	r7, #111	; 0x6f
 800998e:	bf0c      	ite	eq
 8009990:	2308      	moveq	r3, #8
 8009992:	230a      	movne	r3, #10
 8009994:	2100      	movs	r1, #0
 8009996:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800999a:	6866      	ldr	r6, [r4, #4]
 800999c:	60a6      	str	r6, [r4, #8]
 800999e:	2e00      	cmp	r6, #0
 80099a0:	bfa2      	ittt	ge
 80099a2:	6821      	ldrge	r1, [r4, #0]
 80099a4:	f021 0104 	bicge.w	r1, r1, #4
 80099a8:	6021      	strge	r1, [r4, #0]
 80099aa:	b90d      	cbnz	r5, 80099b0 <_printf_i+0x118>
 80099ac:	2e00      	cmp	r6, #0
 80099ae:	d04d      	beq.n	8009a4c <_printf_i+0x1b4>
 80099b0:	4616      	mov	r6, r2
 80099b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80099b6:	fb03 5711 	mls	r7, r3, r1, r5
 80099ba:	5dc7      	ldrb	r7, [r0, r7]
 80099bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80099c0:	462f      	mov	r7, r5
 80099c2:	42bb      	cmp	r3, r7
 80099c4:	460d      	mov	r5, r1
 80099c6:	d9f4      	bls.n	80099b2 <_printf_i+0x11a>
 80099c8:	2b08      	cmp	r3, #8
 80099ca:	d10b      	bne.n	80099e4 <_printf_i+0x14c>
 80099cc:	6823      	ldr	r3, [r4, #0]
 80099ce:	07df      	lsls	r7, r3, #31
 80099d0:	d508      	bpl.n	80099e4 <_printf_i+0x14c>
 80099d2:	6923      	ldr	r3, [r4, #16]
 80099d4:	6861      	ldr	r1, [r4, #4]
 80099d6:	4299      	cmp	r1, r3
 80099d8:	bfde      	ittt	le
 80099da:	2330      	movle	r3, #48	; 0x30
 80099dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80099e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80099e4:	1b92      	subs	r2, r2, r6
 80099e6:	6122      	str	r2, [r4, #16]
 80099e8:	f8cd a000 	str.w	sl, [sp]
 80099ec:	464b      	mov	r3, r9
 80099ee:	aa03      	add	r2, sp, #12
 80099f0:	4621      	mov	r1, r4
 80099f2:	4640      	mov	r0, r8
 80099f4:	f7ff fee2 	bl	80097bc <_printf_common>
 80099f8:	3001      	adds	r0, #1
 80099fa:	d14c      	bne.n	8009a96 <_printf_i+0x1fe>
 80099fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009a00:	b004      	add	sp, #16
 8009a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a06:	4835      	ldr	r0, [pc, #212]	; (8009adc <_printf_i+0x244>)
 8009a08:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009a0c:	6823      	ldr	r3, [r4, #0]
 8009a0e:	680e      	ldr	r6, [r1, #0]
 8009a10:	061f      	lsls	r7, r3, #24
 8009a12:	f856 5b04 	ldr.w	r5, [r6], #4
 8009a16:	600e      	str	r6, [r1, #0]
 8009a18:	d514      	bpl.n	8009a44 <_printf_i+0x1ac>
 8009a1a:	07d9      	lsls	r1, r3, #31
 8009a1c:	bf44      	itt	mi
 8009a1e:	f043 0320 	orrmi.w	r3, r3, #32
 8009a22:	6023      	strmi	r3, [r4, #0]
 8009a24:	b91d      	cbnz	r5, 8009a2e <_printf_i+0x196>
 8009a26:	6823      	ldr	r3, [r4, #0]
 8009a28:	f023 0320 	bic.w	r3, r3, #32
 8009a2c:	6023      	str	r3, [r4, #0]
 8009a2e:	2310      	movs	r3, #16
 8009a30:	e7b0      	b.n	8009994 <_printf_i+0xfc>
 8009a32:	6823      	ldr	r3, [r4, #0]
 8009a34:	f043 0320 	orr.w	r3, r3, #32
 8009a38:	6023      	str	r3, [r4, #0]
 8009a3a:	2378      	movs	r3, #120	; 0x78
 8009a3c:	4828      	ldr	r0, [pc, #160]	; (8009ae0 <_printf_i+0x248>)
 8009a3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009a42:	e7e3      	b.n	8009a0c <_printf_i+0x174>
 8009a44:	065e      	lsls	r6, r3, #25
 8009a46:	bf48      	it	mi
 8009a48:	b2ad      	uxthmi	r5, r5
 8009a4a:	e7e6      	b.n	8009a1a <_printf_i+0x182>
 8009a4c:	4616      	mov	r6, r2
 8009a4e:	e7bb      	b.n	80099c8 <_printf_i+0x130>
 8009a50:	680b      	ldr	r3, [r1, #0]
 8009a52:	6826      	ldr	r6, [r4, #0]
 8009a54:	6960      	ldr	r0, [r4, #20]
 8009a56:	1d1d      	adds	r5, r3, #4
 8009a58:	600d      	str	r5, [r1, #0]
 8009a5a:	0635      	lsls	r5, r6, #24
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	d501      	bpl.n	8009a64 <_printf_i+0x1cc>
 8009a60:	6018      	str	r0, [r3, #0]
 8009a62:	e002      	b.n	8009a6a <_printf_i+0x1d2>
 8009a64:	0671      	lsls	r1, r6, #25
 8009a66:	d5fb      	bpl.n	8009a60 <_printf_i+0x1c8>
 8009a68:	8018      	strh	r0, [r3, #0]
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	6123      	str	r3, [r4, #16]
 8009a6e:	4616      	mov	r6, r2
 8009a70:	e7ba      	b.n	80099e8 <_printf_i+0x150>
 8009a72:	680b      	ldr	r3, [r1, #0]
 8009a74:	1d1a      	adds	r2, r3, #4
 8009a76:	600a      	str	r2, [r1, #0]
 8009a78:	681e      	ldr	r6, [r3, #0]
 8009a7a:	6862      	ldr	r2, [r4, #4]
 8009a7c:	2100      	movs	r1, #0
 8009a7e:	4630      	mov	r0, r6
 8009a80:	f7f6 fbae 	bl	80001e0 <memchr>
 8009a84:	b108      	cbz	r0, 8009a8a <_printf_i+0x1f2>
 8009a86:	1b80      	subs	r0, r0, r6
 8009a88:	6060      	str	r0, [r4, #4]
 8009a8a:	6863      	ldr	r3, [r4, #4]
 8009a8c:	6123      	str	r3, [r4, #16]
 8009a8e:	2300      	movs	r3, #0
 8009a90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a94:	e7a8      	b.n	80099e8 <_printf_i+0x150>
 8009a96:	6923      	ldr	r3, [r4, #16]
 8009a98:	4632      	mov	r2, r6
 8009a9a:	4649      	mov	r1, r9
 8009a9c:	4640      	mov	r0, r8
 8009a9e:	47d0      	blx	sl
 8009aa0:	3001      	adds	r0, #1
 8009aa2:	d0ab      	beq.n	80099fc <_printf_i+0x164>
 8009aa4:	6823      	ldr	r3, [r4, #0]
 8009aa6:	079b      	lsls	r3, r3, #30
 8009aa8:	d413      	bmi.n	8009ad2 <_printf_i+0x23a>
 8009aaa:	68e0      	ldr	r0, [r4, #12]
 8009aac:	9b03      	ldr	r3, [sp, #12]
 8009aae:	4298      	cmp	r0, r3
 8009ab0:	bfb8      	it	lt
 8009ab2:	4618      	movlt	r0, r3
 8009ab4:	e7a4      	b.n	8009a00 <_printf_i+0x168>
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	4632      	mov	r2, r6
 8009aba:	4649      	mov	r1, r9
 8009abc:	4640      	mov	r0, r8
 8009abe:	47d0      	blx	sl
 8009ac0:	3001      	adds	r0, #1
 8009ac2:	d09b      	beq.n	80099fc <_printf_i+0x164>
 8009ac4:	3501      	adds	r5, #1
 8009ac6:	68e3      	ldr	r3, [r4, #12]
 8009ac8:	9903      	ldr	r1, [sp, #12]
 8009aca:	1a5b      	subs	r3, r3, r1
 8009acc:	42ab      	cmp	r3, r5
 8009ace:	dcf2      	bgt.n	8009ab6 <_printf_i+0x21e>
 8009ad0:	e7eb      	b.n	8009aaa <_printf_i+0x212>
 8009ad2:	2500      	movs	r5, #0
 8009ad4:	f104 0619 	add.w	r6, r4, #25
 8009ad8:	e7f5      	b.n	8009ac6 <_printf_i+0x22e>
 8009ada:	bf00      	nop
 8009adc:	080123a9 	.word	0x080123a9
 8009ae0:	080123ba 	.word	0x080123ba

08009ae4 <_putc_r>:
 8009ae4:	b570      	push	{r4, r5, r6, lr}
 8009ae6:	460d      	mov	r5, r1
 8009ae8:	4614      	mov	r4, r2
 8009aea:	4606      	mov	r6, r0
 8009aec:	b118      	cbz	r0, 8009af6 <_putc_r+0x12>
 8009aee:	6983      	ldr	r3, [r0, #24]
 8009af0:	b90b      	cbnz	r3, 8009af6 <_putc_r+0x12>
 8009af2:	f7ff fb5b 	bl	80091ac <__sinit>
 8009af6:	4b1c      	ldr	r3, [pc, #112]	; (8009b68 <_putc_r+0x84>)
 8009af8:	429c      	cmp	r4, r3
 8009afa:	d124      	bne.n	8009b46 <_putc_r+0x62>
 8009afc:	6874      	ldr	r4, [r6, #4]
 8009afe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b00:	07d8      	lsls	r0, r3, #31
 8009b02:	d405      	bmi.n	8009b10 <_putc_r+0x2c>
 8009b04:	89a3      	ldrh	r3, [r4, #12]
 8009b06:	0599      	lsls	r1, r3, #22
 8009b08:	d402      	bmi.n	8009b10 <_putc_r+0x2c>
 8009b0a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b0c:	f7ff fbec 	bl	80092e8 <__retarget_lock_acquire_recursive>
 8009b10:	68a3      	ldr	r3, [r4, #8]
 8009b12:	3b01      	subs	r3, #1
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	60a3      	str	r3, [r4, #8]
 8009b18:	da05      	bge.n	8009b26 <_putc_r+0x42>
 8009b1a:	69a2      	ldr	r2, [r4, #24]
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	db1c      	blt.n	8009b5a <_putc_r+0x76>
 8009b20:	b2eb      	uxtb	r3, r5
 8009b22:	2b0a      	cmp	r3, #10
 8009b24:	d019      	beq.n	8009b5a <_putc_r+0x76>
 8009b26:	6823      	ldr	r3, [r4, #0]
 8009b28:	1c5a      	adds	r2, r3, #1
 8009b2a:	6022      	str	r2, [r4, #0]
 8009b2c:	701d      	strb	r5, [r3, #0]
 8009b2e:	b2ed      	uxtb	r5, r5
 8009b30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b32:	07da      	lsls	r2, r3, #31
 8009b34:	d405      	bmi.n	8009b42 <_putc_r+0x5e>
 8009b36:	89a3      	ldrh	r3, [r4, #12]
 8009b38:	059b      	lsls	r3, r3, #22
 8009b3a:	d402      	bmi.n	8009b42 <_putc_r+0x5e>
 8009b3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b3e:	f7ff fbd4 	bl	80092ea <__retarget_lock_release_recursive>
 8009b42:	4628      	mov	r0, r5
 8009b44:	bd70      	pop	{r4, r5, r6, pc}
 8009b46:	4b09      	ldr	r3, [pc, #36]	; (8009b6c <_putc_r+0x88>)
 8009b48:	429c      	cmp	r4, r3
 8009b4a:	d101      	bne.n	8009b50 <_putc_r+0x6c>
 8009b4c:	68b4      	ldr	r4, [r6, #8]
 8009b4e:	e7d6      	b.n	8009afe <_putc_r+0x1a>
 8009b50:	4b07      	ldr	r3, [pc, #28]	; (8009b70 <_putc_r+0x8c>)
 8009b52:	429c      	cmp	r4, r3
 8009b54:	bf08      	it	eq
 8009b56:	68f4      	ldreq	r4, [r6, #12]
 8009b58:	e7d1      	b.n	8009afe <_putc_r+0x1a>
 8009b5a:	4629      	mov	r1, r5
 8009b5c:	4622      	mov	r2, r4
 8009b5e:	4630      	mov	r0, r6
 8009b60:	f7ff f94a 	bl	8008df8 <__swbuf_r>
 8009b64:	4605      	mov	r5, r0
 8009b66:	e7e3      	b.n	8009b30 <_putc_r+0x4c>
 8009b68:	08012358 	.word	0x08012358
 8009b6c:	08012378 	.word	0x08012378
 8009b70:	08012338 	.word	0x08012338

08009b74 <_sbrk_r>:
 8009b74:	b538      	push	{r3, r4, r5, lr}
 8009b76:	4d06      	ldr	r5, [pc, #24]	; (8009b90 <_sbrk_r+0x1c>)
 8009b78:	2300      	movs	r3, #0
 8009b7a:	4604      	mov	r4, r0
 8009b7c:	4608      	mov	r0, r1
 8009b7e:	602b      	str	r3, [r5, #0]
 8009b80:	f7fc f818 	bl	8005bb4 <_sbrk>
 8009b84:	1c43      	adds	r3, r0, #1
 8009b86:	d102      	bne.n	8009b8e <_sbrk_r+0x1a>
 8009b88:	682b      	ldr	r3, [r5, #0]
 8009b8a:	b103      	cbz	r3, 8009b8e <_sbrk_r+0x1a>
 8009b8c:	6023      	str	r3, [r4, #0]
 8009b8e:	bd38      	pop	{r3, r4, r5, pc}
 8009b90:	20000588 	.word	0x20000588

08009b94 <__sread>:
 8009b94:	b510      	push	{r4, lr}
 8009b96:	460c      	mov	r4, r1
 8009b98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b9c:	f000 f8a0 	bl	8009ce0 <_read_r>
 8009ba0:	2800      	cmp	r0, #0
 8009ba2:	bfab      	itete	ge
 8009ba4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009ba6:	89a3      	ldrhlt	r3, [r4, #12]
 8009ba8:	181b      	addge	r3, r3, r0
 8009baa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009bae:	bfac      	ite	ge
 8009bb0:	6563      	strge	r3, [r4, #84]	; 0x54
 8009bb2:	81a3      	strhlt	r3, [r4, #12]
 8009bb4:	bd10      	pop	{r4, pc}

08009bb6 <__swrite>:
 8009bb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bba:	461f      	mov	r7, r3
 8009bbc:	898b      	ldrh	r3, [r1, #12]
 8009bbe:	05db      	lsls	r3, r3, #23
 8009bc0:	4605      	mov	r5, r0
 8009bc2:	460c      	mov	r4, r1
 8009bc4:	4616      	mov	r6, r2
 8009bc6:	d505      	bpl.n	8009bd4 <__swrite+0x1e>
 8009bc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bcc:	2302      	movs	r3, #2
 8009bce:	2200      	movs	r2, #0
 8009bd0:	f000 f868 	bl	8009ca4 <_lseek_r>
 8009bd4:	89a3      	ldrh	r3, [r4, #12]
 8009bd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009bda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009bde:	81a3      	strh	r3, [r4, #12]
 8009be0:	4632      	mov	r2, r6
 8009be2:	463b      	mov	r3, r7
 8009be4:	4628      	mov	r0, r5
 8009be6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009bea:	f000 b817 	b.w	8009c1c <_write_r>

08009bee <__sseek>:
 8009bee:	b510      	push	{r4, lr}
 8009bf0:	460c      	mov	r4, r1
 8009bf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bf6:	f000 f855 	bl	8009ca4 <_lseek_r>
 8009bfa:	1c43      	adds	r3, r0, #1
 8009bfc:	89a3      	ldrh	r3, [r4, #12]
 8009bfe:	bf15      	itete	ne
 8009c00:	6560      	strne	r0, [r4, #84]	; 0x54
 8009c02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009c06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009c0a:	81a3      	strheq	r3, [r4, #12]
 8009c0c:	bf18      	it	ne
 8009c0e:	81a3      	strhne	r3, [r4, #12]
 8009c10:	bd10      	pop	{r4, pc}

08009c12 <__sclose>:
 8009c12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c16:	f000 b813 	b.w	8009c40 <_close_r>
	...

08009c1c <_write_r>:
 8009c1c:	b538      	push	{r3, r4, r5, lr}
 8009c1e:	4d07      	ldr	r5, [pc, #28]	; (8009c3c <_write_r+0x20>)
 8009c20:	4604      	mov	r4, r0
 8009c22:	4608      	mov	r0, r1
 8009c24:	4611      	mov	r1, r2
 8009c26:	2200      	movs	r2, #0
 8009c28:	602a      	str	r2, [r5, #0]
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	f7fb ff71 	bl	8005b12 <_write>
 8009c30:	1c43      	adds	r3, r0, #1
 8009c32:	d102      	bne.n	8009c3a <_write_r+0x1e>
 8009c34:	682b      	ldr	r3, [r5, #0]
 8009c36:	b103      	cbz	r3, 8009c3a <_write_r+0x1e>
 8009c38:	6023      	str	r3, [r4, #0]
 8009c3a:	bd38      	pop	{r3, r4, r5, pc}
 8009c3c:	20000588 	.word	0x20000588

08009c40 <_close_r>:
 8009c40:	b538      	push	{r3, r4, r5, lr}
 8009c42:	4d06      	ldr	r5, [pc, #24]	; (8009c5c <_close_r+0x1c>)
 8009c44:	2300      	movs	r3, #0
 8009c46:	4604      	mov	r4, r0
 8009c48:	4608      	mov	r0, r1
 8009c4a:	602b      	str	r3, [r5, #0]
 8009c4c:	f7fb ff7d 	bl	8005b4a <_close>
 8009c50:	1c43      	adds	r3, r0, #1
 8009c52:	d102      	bne.n	8009c5a <_close_r+0x1a>
 8009c54:	682b      	ldr	r3, [r5, #0]
 8009c56:	b103      	cbz	r3, 8009c5a <_close_r+0x1a>
 8009c58:	6023      	str	r3, [r4, #0]
 8009c5a:	bd38      	pop	{r3, r4, r5, pc}
 8009c5c:	20000588 	.word	0x20000588

08009c60 <_fstat_r>:
 8009c60:	b538      	push	{r3, r4, r5, lr}
 8009c62:	4d07      	ldr	r5, [pc, #28]	; (8009c80 <_fstat_r+0x20>)
 8009c64:	2300      	movs	r3, #0
 8009c66:	4604      	mov	r4, r0
 8009c68:	4608      	mov	r0, r1
 8009c6a:	4611      	mov	r1, r2
 8009c6c:	602b      	str	r3, [r5, #0]
 8009c6e:	f7fb ff78 	bl	8005b62 <_fstat>
 8009c72:	1c43      	adds	r3, r0, #1
 8009c74:	d102      	bne.n	8009c7c <_fstat_r+0x1c>
 8009c76:	682b      	ldr	r3, [r5, #0]
 8009c78:	b103      	cbz	r3, 8009c7c <_fstat_r+0x1c>
 8009c7a:	6023      	str	r3, [r4, #0]
 8009c7c:	bd38      	pop	{r3, r4, r5, pc}
 8009c7e:	bf00      	nop
 8009c80:	20000588 	.word	0x20000588

08009c84 <_isatty_r>:
 8009c84:	b538      	push	{r3, r4, r5, lr}
 8009c86:	4d06      	ldr	r5, [pc, #24]	; (8009ca0 <_isatty_r+0x1c>)
 8009c88:	2300      	movs	r3, #0
 8009c8a:	4604      	mov	r4, r0
 8009c8c:	4608      	mov	r0, r1
 8009c8e:	602b      	str	r3, [r5, #0]
 8009c90:	f7fb ff77 	bl	8005b82 <_isatty>
 8009c94:	1c43      	adds	r3, r0, #1
 8009c96:	d102      	bne.n	8009c9e <_isatty_r+0x1a>
 8009c98:	682b      	ldr	r3, [r5, #0]
 8009c9a:	b103      	cbz	r3, 8009c9e <_isatty_r+0x1a>
 8009c9c:	6023      	str	r3, [r4, #0]
 8009c9e:	bd38      	pop	{r3, r4, r5, pc}
 8009ca0:	20000588 	.word	0x20000588

08009ca4 <_lseek_r>:
 8009ca4:	b538      	push	{r3, r4, r5, lr}
 8009ca6:	4d07      	ldr	r5, [pc, #28]	; (8009cc4 <_lseek_r+0x20>)
 8009ca8:	4604      	mov	r4, r0
 8009caa:	4608      	mov	r0, r1
 8009cac:	4611      	mov	r1, r2
 8009cae:	2200      	movs	r2, #0
 8009cb0:	602a      	str	r2, [r5, #0]
 8009cb2:	461a      	mov	r2, r3
 8009cb4:	f7fb ff70 	bl	8005b98 <_lseek>
 8009cb8:	1c43      	adds	r3, r0, #1
 8009cba:	d102      	bne.n	8009cc2 <_lseek_r+0x1e>
 8009cbc:	682b      	ldr	r3, [r5, #0]
 8009cbe:	b103      	cbz	r3, 8009cc2 <_lseek_r+0x1e>
 8009cc0:	6023      	str	r3, [r4, #0]
 8009cc2:	bd38      	pop	{r3, r4, r5, pc}
 8009cc4:	20000588 	.word	0x20000588

08009cc8 <__malloc_lock>:
 8009cc8:	4801      	ldr	r0, [pc, #4]	; (8009cd0 <__malloc_lock+0x8>)
 8009cca:	f7ff bb0d 	b.w	80092e8 <__retarget_lock_acquire_recursive>
 8009cce:	bf00      	nop
 8009cd0:	20000580 	.word	0x20000580

08009cd4 <__malloc_unlock>:
 8009cd4:	4801      	ldr	r0, [pc, #4]	; (8009cdc <__malloc_unlock+0x8>)
 8009cd6:	f7ff bb08 	b.w	80092ea <__retarget_lock_release_recursive>
 8009cda:	bf00      	nop
 8009cdc:	20000580 	.word	0x20000580

08009ce0 <_read_r>:
 8009ce0:	b538      	push	{r3, r4, r5, lr}
 8009ce2:	4d07      	ldr	r5, [pc, #28]	; (8009d00 <_read_r+0x20>)
 8009ce4:	4604      	mov	r4, r0
 8009ce6:	4608      	mov	r0, r1
 8009ce8:	4611      	mov	r1, r2
 8009cea:	2200      	movs	r2, #0
 8009cec:	602a      	str	r2, [r5, #0]
 8009cee:	461a      	mov	r2, r3
 8009cf0:	f7fb fef2 	bl	8005ad8 <_read>
 8009cf4:	1c43      	adds	r3, r0, #1
 8009cf6:	d102      	bne.n	8009cfe <_read_r+0x1e>
 8009cf8:	682b      	ldr	r3, [r5, #0]
 8009cfa:	b103      	cbz	r3, 8009cfe <_read_r+0x1e>
 8009cfc:	6023      	str	r3, [r4, #0]
 8009cfe:	bd38      	pop	{r3, r4, r5, pc}
 8009d00:	20000588 	.word	0x20000588

08009d04 <_init>:
 8009d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d06:	bf00      	nop
 8009d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d0a:	bc08      	pop	{r3}
 8009d0c:	469e      	mov	lr, r3
 8009d0e:	4770      	bx	lr

08009d10 <_fini>:
 8009d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d12:	bf00      	nop
 8009d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d16:	bc08      	pop	{r3}
 8009d18:	469e      	mov	lr, r3
 8009d1a:	4770      	bx	lr
